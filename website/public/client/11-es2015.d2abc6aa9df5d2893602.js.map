{"version":3,"sources":["webpack:///src/common/admin/appearance/appearance-editor-config.token.ts","webpack:///src/common/shared/appearance/commands/appearance-commands.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor.service.ts","webpack:///src/common/core/utils/remove-duplicate-slashes.ts","webpack:///src/common/admin/appearance/appearance-panel-meta/appearance-panel-meta.component.html","webpack:///src/common/admin/appearance/appearance-panel-meta/appearance-panel-meta.component.ts","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-input.component.html","webpack:///src/common/admin/appearance/appearance-image-input/appearance-image-input.component.ts","webpack:///src/common/admin/appearance/highlight-in-preview.directive.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme.service.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.component.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component.ts","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/themes-appearance-panel/themes-appearance-panel.component.ts","webpack:///src/common/core/ui/custom-menu/menu-item.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/select-menu-item-action.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/select-menu-item-action.component.ts","webpack:///src/common/shared/icon-selector/icon-selector.component.html","webpack:///src/common/shared/icon-selector/icon-selector.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus/menu-items/menu-items.component.ts","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/menus-appearance-panel/menus-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.html","webpack:///src/common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.html","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.ts","webpack:///src/common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component.html","webpack:///src/common/admin/appearance/appearance.component.html","webpack:///src/common/admin/appearance/appearance.component.ts","webpack:///src/common/admin/appearance/can-deactivate-appearance.guard.ts","webpack:///src/common/admin/appearance/appearance-routing.module.ts","webpack:///src/common/admin/appearance/appearance-editor/appearance-editor-resolver.service.ts","webpack:///src/common/shared/icon-selector/icon-selector.module.ts","webpack:///src/common/core/ui/color-picker/color-picker-input/color-picker-input.module.ts","webpack:///src/common/admin/appearance/base-appearance.module.ts","webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/slider.js","webpack:///src/app/admin/appearance/homepage-appearance-panel/homepage-appearance-panel.component.html","webpack:///src/app/admin/appearance/homepage-appearance-panel/homepage-appearance-panel.component.ts","webpack:///src/app/admin/appearance/app-appearance-config.ts","webpack:///src/common/core/utils/map-order.ts","webpack:///src/app/admin/appearance/app-appearance.module.ts"],"names":["APPEARANCE_EDITOR_CONFIG","DEFAULT_APPEARANCE_EDITOR_CONFIG","navigationRoutes","menus","availableRoutes","positions","sections","name","position","route","queryParams","type","Navigate","key","value","SetConfig","selector","index","Select","Deselect","SetColors","content","SetCustomCss","SetCustomHtml","AppearanceEditor","settings","router","http","toast","activePanel$","BehaviorSubject","defaultSettings","initiated$","ReplaySubject","loading$","changes$","this","next","panel","config","find","navigate","iframe","fromEvent","window","pipe","filter","e","data","URL","origin","location","hostname","subscribe","complete","forEach","setting","initConfig","initIframe","changes","addChanges","observable","saveRequest","c","post","finalize","share","open","request","panelConfig","postMessage","defaultRoute","command","previewWindow","startsWith","get","merged","all","sort","a","b","push","url","getBaseUrl","src","replace","contentWindow","AppearancePanelMetaComponent","path","back","AppearanceImageInputComponent","editor","uploadQueue","validator","image$","showToast","params","uri","backendUri","Image","httpParams","diskPrefix","types","image","then","files","start","response","updateValue","fileEntry","defaultValue","val","propagateChange","fn","provide","useExisting","multi","openModal","$event","stopPropagation","HighlightInPreviewDirective","el","nativeElement","addEventListener","selectNode","deselectNode","GeneralAppearancePanelComponent","fb","form","group","defaults","Object","keys","controls","currentValue","patchValue","valueChanges","CssThemeService","id","put","ids","delete","CrupdateCssThemeModalComponent","dialogRef","cssTheme","errors$","is_dark","default_dark","default_light","theme","setValue","update","create","close","errResponse","errors","ColorPickerInputComponent","overlayPanel","color$","pickerSub","unsubscribe","BeColorPickerModule","components","target","color","valueChanged","openColorPicker","CssThemeColorsPanelComponent","themes","colorCache","setSaveRequest","saveColors","bind","entries","colors","addControl","setColors","payload","ThemesAppearancePanelComponent","appearance","modal","loadedThemes$","selectedTheme$","path$","map","reloadThemes","querySub","afterClosed","newTheme","queryParamsHandling","setSelectedTheme","closeActivePanel","show","title","body","ok","confirmed","deleteTheme","pagination","bindToQueryParams","t","openPreviousPanel","MenuItem","condition","activeExact","Math","floor","random","MenuEditor","allMenus$","activeMenu$","allMenus","commitChanges","previousIndex","currentIndex","activeMenu","items","i","indexOf","splice","item","transformLocalLinksToRoutes","baseUrl","action","JSON","stringify","setConfig","json","parse","menuData","menu","MenuItemCategoriesService","getWithCache","SelectMenuItemActionComponent","overlayPanelRef","itemCategories","linkForm","label","menuItemCategories","categories","destination","addLinkMenuItem","IconSelectorComponent","icons$","iconSelected","icons","icon","observers","length","emitValue","MenuItemsComponent","cd","subscriptions","subscription","reorderActiveMenuItems","selectedMenuItem","removeItem","menuItem","detectChanges","MenusAppearancePanelComponent","setFromJson","slice","offsetX","panelClass","addItem","deleteActive","SeoAppearancePanelComponent","seoFields","field","control","CodeEditorModalComponent","lazyLoader","syntaxInvalid$","initEditor","contents","language","overrideDialogCloseEvents","getValue","loadAsset","ace","edit","editorEl","getSession","setMode","setTheme","$blockScrolling","Infinity","on","annotations","getAnnotations","test","text","setAnnotations","syntaxInvalid","disableClose","backdropClick","keydownEvents","event","keyCode","confirm","CustomCodeAppearancePanelComponent","initialValue","undefined","newValue","saveChanges","addCodeToPreview","AppearanceComponent","breakpoints","panelPortal$","component","init","snapshot","routerSub","openPanel","str","closeEditor","sidenav","CanDeactivateAppearance","bodyBold","cancel","routes","permissions","resolve","AppearanceEditorResolver","state","catchError","mergeMap","of","canActivate","canDeactivate","children","AppearanceRoutingModule","forChild","IconSelectorModule","ColorPickerInputModule","BaseAppearanceModule","useValue","MatSliderModule","ɵfac","ɵmod","ɵinj","imports","CONFIG_KEY","APP_APPEARANCE_CONFIG","HomepageAppearancePanelComponent","channels","selectedSubpanel$","headerTitle","headerSubtitle","headerImage","headerOverlayColor1","headerOverlayColor2","footerTitle","footerSubtitle","footerImage","actions","inputText","inputButton","cta1","cta2","primaryFeatures","array","secondaryFeatures","channelIds","searchControl","results$","selectedChannels$","displayFn","channel","bindToSearchQueryControl","getJson","loadChannels","defaultValues","addFeature","openSubpanel","features","subtitle","description","removeAt","order","B","newChannels","curr","updateChannels","newChannel","option","reset","debounceTime","distinctUntilChanged","query","switchMap","searchForChannel","results","layout","AppAppearanceModule"],"mappings":"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","file":"x","sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {ComponentType} from '@angular/cdk/portal';\nimport {Params} from '@angular/router';\n\nexport interface AppearanceEditorConfig {\n    navigationRoutes: string[];\n    defaultRoute?: string;\n    sections?: AppearanceEditorField[];\n    menus: {\n        availableRoutes: string[],\n        positions?: string[],\n    };\n}\n\nexport interface AppearanceEditorField {\n    name: string;\n    component?: ComponentType<any>;\n    position?: number;\n    route?: string;\n    queryParams?: Params;\n}\n\nexport const APPEARANCE_EDITOR_CONFIG = new InjectionToken<AppearanceEditorConfig[]>('APPEARANCE_EDITOR_CONFIG');\n\nexport const DEFAULT_APPEARANCE_EDITOR_CONFIG: AppearanceEditorConfig = {\n    navigationRoutes: [],\n    menus: {\n        availableRoutes: [\n            'login',\n            'register',\n            'contact',\n            'billing/pricing',\n            'account-settings',\n            'admin/appearance',\n            'admin/users',\n            'admin/settings/authentication',\n            'admin/settings/branding',\n            'admin/settings/cache',\n            'admin/settings/providers',\n            'admin/roles',\n        ],\n        positions: [\n            'admin-navbar',\n            'custom-page-navbar',\n            'auth-page-footer',\n        ]\n    },\n    sections: [\n        {name: 'general', position: 1},\n        {name: 'themes', position: 2},\n        {name: 'menus', position: 3},\n        {name: 'custom-code', position: 4},\n        {name: 'seo-settings', position: 5}\n    ]\n};\n","import { AppearanceCommand } from './appearance-command';\nimport { CommandTypes } from './command-types';\nimport {Params} from '@angular/router';\n\nexport class Navigate implements AppearanceCommand {\n    type = CommandTypes.Navigate;\n    constructor(public route: string, public queryParams: Params) {}\n}\n\nexport class SetConfig implements AppearanceCommand {\n    type = CommandTypes.SetConfig;\n    constructor(public key: string, public value: string|number) {}\n}\n\nexport class Select implements AppearanceCommand {\n    type = CommandTypes.Select;\n    constructor(public selector: string, public index = 0) {}\n}\n\nexport class Deselect implements AppearanceCommand {\n    type = CommandTypes.Deselect;\n}\n\nexport class SetColors implements AppearanceCommand {\n    type = CommandTypes.SetColors;\n    constructor(public key: string, public value: string) {}\n}\n\nexport class SetCustomCss implements AppearanceCommand {\n    type = CommandTypes.SetCustomCss;\n    constructor(public content: string) {}\n}\n\nexport class SetCustomHtml implements AppearanceCommand {\n    type = CommandTypes.SetCustomHtml;\n    constructor(public content: string) {}\n}\n\nexport type AllCommands = Navigate | SetConfig | Select;\n","import {Injectable} from '@angular/core';\nimport {Router} from '@angular/router';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Deselect, Navigate, Select, SetConfig} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceCommand} from '@common/shared/appearance/commands/appearance-command';\nimport {APPEARANCE_TOKEN} from '@common/shared/appearance/appearance-listener.service';\nimport {BehaviorSubject, fromEvent, Observable, ReplaySubject} from 'rxjs';\nimport {filter, finalize, share} from 'rxjs/operators';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {removeDuplicateSlashes} from '@common/core/utils/remove-duplicate-slashes';\nimport {AppearanceEditorConfig, AppearanceEditorField} from '@common/admin/appearance/appearance-editor-config.token';\nimport deepmerge from 'deepmerge';\n\nexport interface EditorChanges {\n    [key: string]: string|number|object;\n    colors?: CssThemeColors;\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppearanceEditor {\n    public activePanel$ = new BehaviorSubject<AppearanceEditorField>(null);\n    public defaultSettings: {[key: string]: any} = {};\n    public initiated$ = new ReplaySubject(1);\n    private previewWindow: Window;\n\n    public loading$ = new BehaviorSubject<boolean>(false);\n    private saveRequest: (changes: EditorChanges) => Observable<void>;\n    public changes$ = new BehaviorSubject<EditorChanges>(null);\n    public config: AppearanceEditorConfig;\n\n    constructor(\n        private settings: Settings,\n        private router: Router,\n        private http: AppHttpClient,\n        private toast: Toast,\n    ) {}\n\n    public addChanges(value: EditorChanges) {\n        this.changes$.next({...this.changes$.value, ...value});\n    }\n    \n    public openPanel(name: string) {\n        const panel = this.config.sections.find(value => {\n            return slugifyString(value.name) === name;\n        });\n        this.activePanel$.next(panel);\n        this.navigate(panel);\n    }\n\n    public init(iframe: HTMLIFrameElement, defaultSettings: {name: string, value: any}[], config: AppearanceEditorConfig[]) {\n        // listen for 'initiated' event from iframe window\n        fromEvent(window, 'message')\n            .pipe(filter((e: MessageEvent) => {\n                return e.data === APPEARANCE_TOKEN && (new URL(e.origin).hostname) === window.location.hostname;\n            })).subscribe(() => {\n                this.initiated$.next(true);\n                this.initiated$.complete();\n                if (this.activePanel$.value) {\n                    this.navigate(this.activePanel$.value);\n                }\n            });\n\n        defaultSettings.forEach(setting => {\n            if (setting.name === 'env') {\n                this.defaultSettings = {...this.defaultSettings, ...setting.value};\n            } else {\n                this.defaultSettings[setting.name] = setting.value;\n            }\n        });\n\n        this.initConfig(config);\n        this.initIframe(iframe);\n        return this.initiated$;\n    }\n\n    public saveChanges(changes?: EditorChanges): Observable<unknown> {\n        if (changes) {\n            this.addChanges(changes);\n        }\n        this.loading$.next(true);\n        const request = this.saveRequest ?\n            this.saveRequest :\n            c => this.http.post<GenericBackendResponse<any>>('admin/appearance', c);\n        const observable = request(this.changes$.value)\n            .pipe(\n                finalize(() => this.loading$.next(false)),\n                share()\n            );\n            observable.subscribe(() => {\n                this.changes$.next(null);\n                this.toast.open('Appearance saved');\n            });\n        return observable;\n    }\n\n    public setSaveRequest(request: (changes: EditorChanges) => Observable<void>) {\n        this.saveRequest = request;\n    }\n\n    public closeActivePanel() {\n        this.router.navigate(['/admin/appearance']);\n    }\n\n    public navigate(panelConfig: AppearanceEditorField) {\n        const route = panelConfig?.route || this.config.defaultRoute;\n        this.postMessage(new Navigate(route, panelConfig?.queryParams));\n    }\n\n    public setConfig(key: string, value: string|number) {\n        this.postMessage(new SetConfig(key, value));\n    }\n\n    public selectNode(selector: string, index = 0) {\n        if ( ! selector) return;\n        this.postMessage(new Select(selector, index));\n    }\n\n    public deselectNode() {\n        this.postMessage(new Deselect());\n    }\n\n    public postMessage(command: AppearanceCommand) {\n        this.previewWindow.postMessage(command, '*');\n    }\n\n    public currentValue(key: string) {\n        if (key.startsWith('env.') || key.startsWith('custom-code.')) {\n            return this.defaultSettings[key];\n        } else {\n            return this.settings.get(key);\n        }\n    }\n\n    private initConfig(config: AppearanceEditorConfig[]) {\n        const merged = deepmerge.all(config) as AppearanceEditorConfig;\n        merged.sections = merged.sections.sort((a, b) => (a.position > b.position) ? 1 : -1);\n        if ( ! merged.defaultRoute) merged.defaultRoute = '/';\n        if (this.settings.get('site.has_mobile_app')) {\n            merged.menus.positions.push('mobile-app-about');\n        }\n        this.config = merged;\n    }\n\n    private initIframe(iframe: HTMLIFrameElement) {\n        const url = this.settings.getBaseUrl() + '/' + this.config.defaultRoute + `?be-preview-mode=${APPEARANCE_TOKEN}`;\n        iframe.src = removeDuplicateSlashes(url);\n        this.previewWindow = iframe.contentWindow;\n    }\n}\n","export function removeDuplicateSlashes(url: string): string {\n    return url.replace(/([^:]\\/)\\/+/g, '$1');\n}\n","<div class=\"back-button\" (click)=\"back.emit()\">\n    <mat-icon svgIcon=\"keyboard-arrow-left\"></mat-icon>\n</div>\n<div class=\"title\">\n    <div class=\"static\" trans>Customizing</div>\n    <div class=\"path\">\n        <ng-container *ngFor=\"let item of path; last as isLast; first as isFirst;\">\n            <span *ngIf=\"item\">\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"separator\" *ngIf=\"!isFirst\"></mat-icon>\n                <span class=\"name\" [class.last]=\"isLast\" trans>{{viewName(item)}}</span>\n            </span>\n        </ng-container>\n    </div>\n</div>","import {ChangeDetectionStrategy, Component, EventEmitter, Input, Output} from '@angular/core';\nimport {snakeCase} from '@common/core/utils/snake-case';\n\n@Component({\n    selector: 'appearance-panel-meta',\n    templateUrl: './appearance-panel-meta.component.html',\n    styleUrls: ['./appearance-panel-meta.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppearancePanelMetaComponent {\n    @Input() path: string[] = [];\n    @Output() back = new EventEmitter();\n\n    public viewName(name: string) {\n        return snakeCase(name).replace(/_/g , ' ');\n    }\n}\n","<div class=\"field-container\" (click)=\"openModal()\">\n  <div class=\"label fake-label\" trans><ng-content></ng-content></div>\n  <div class=\"img-container\">\n    <image-or-icon\n      class=\"inherit-size\"\n      [src]=\"image\"\n      *ngIf=\"image$ | async as image; else noImage\"\n    ></image-or-icon>\n\n    <ng-template #noImage>\n      <div class=\"no-image\">\n        <mat-icon svgIcon=\"photo-size-select-actual\"></mat-icon>\n        <span class=\"text\" trans>Upload</span>\n      </div>\n    </ng-template>\n\n    <div class=\"actions-dropdown\">\n      <button class=\"no-style\" [matMenuTriggerFor]=\"actionsMenu\" (click)=\"$event.stopPropagation()\">\n        <mat-icon svgIcon=\"settings\" class=\"trigger-icon\"></mat-icon>\n      </button>\n\n      <mat-menu #actionsMenu>\n        <div mat-menu-item (click)=\"remove()\" *ngIf=\"image$ | async\" trans>Remove</div>\n        <div mat-menu-item (click)=\"useDefault()\" *ngIf=\"defaultValue\" trans>Use Default</div>\n      </mat-menu>\n    </div>\n  </div>\n</div>\n<mat-progress-bar mode=\"indeterminate\" color=\"accent\" *ngIf=\"loading$ | async\"></mat-progress-bar>\n","import {ChangeDetectionStrategy, Component, Input} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {AppearanceImageUploadValidator} from '@common/admin/appearance/appearance-image-input/appearance-image-upload-validator';\nimport {Settings} from '@common/core/config/settings.service';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {randomString} from '@common/core/utils/random-string';\nimport {finalize} from 'rxjs/operators';\nimport {UploadUri} from '@common/uploads/types/upload-uri.enum';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\n\n@Component({\n    selector: 'appearance-image-input',\n    templateUrl: './appearance-image-input.component.html',\n    styleUrls: ['./appearance-image-input.component.scss'],\n    host: {tabindex: '0'},\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        UploadQueueService,\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: AppearanceImageInputComponent,\n            multi: true,\n        },\n    ],\n})\nexport class AppearanceImageInputComponent implements ControlValueAccessor {\n    @Input() defaultValue: string;\n    @Input() backendUri: string;\n    @Input() diskPrefix: string;\n    private propagateChange: Function;\n    public image$ = new BehaviorSubject(null);\n    public loading$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private editor: AppearanceEditor,\n        private uploadQueue: UploadQueueService,\n        private validator: AppearanceImageUploadValidator,\n        public settings: Settings\n    ) {\n        this.validator.showToast = true;\n    }\n\n    public openModal() {\n        const params: UploadApiConfig = {\n            uri: this.backendUri || UploadUri.Image,\n            httpParams: {diskPrefix: this.diskPrefix},\n            validator: this.validator,\n        };\n        openUploadWindow({types: [UploadInputTypes.image]}).then(files => {\n            this.loading$.next(true);\n            this.uploadQueue\n                .start(files, params)\n                .pipe(finalize(() => this.loading$.next(false)))\n                .subscribe(response => {\n                    this.updateValue(response.fileEntry.url);\n                });\n        });\n    }\n\n    public remove() {\n        this.updateValue(null);\n    }\n\n    public useDefault() {\n        this.updateValue(this.defaultValue);\n    }\n\n    private updateValue(val?: string) {\n        this.propagateChange(val);\n        // make sure new image is loaded by browser as path will be the same\n        this.image$.next(val ? val + `?v=${randomString(8)}` : null);\n    }\n\n    public writeValue(value: string) {\n        this.image$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n}\n","import {Directive, ElementRef, Input, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Directive({\n    selector: '[highlightInPreview]'\n})\nexport class HighlightInPreviewDirective implements OnInit {\n    @Input('highlightInPreview') selector: string;\n\n    constructor(\n        private el: ElementRef<HTMLElement>,\n        private editor: AppearanceEditor,\n    ) {}\n\n    public ngOnInit(): void {\n        this.el.nativeElement.addEventListener('focus', () => {\n            this.editor.selectNode(this.selector);\n        });\n\n        this.el.nativeElement.addEventListener('blur', () => {\n            this.editor.deselectNode();\n        });\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\n\n@Component({\n    selector: 'general-appearance-panel',\n    templateUrl: './general-appearance-panel.component.html',\n    styleUrls: ['./general-appearance-panel.component.scss'],\n    host: {'class': 'appearance-panel'},\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class GeneralAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'branding.logo_light': [''],\n        'branding.logo_dark': [''],\n        'branding.favicon': [''],\n        'env.app_name': [''],\n        'branding.site_description': [''],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public editor: AppearanceEditor,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n          defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n\n    public defaultValue(key: string) {\n        return this.editor.defaultSettings[key];\n    }\n}\n","<appearance-panel-meta [path]=\"['General']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_light')\" formControlName=\"branding.logo_light\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #1 (For top navbar)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.logo_dark')\" formControlName=\"branding.logo_dark\" diskPrefix=\"branding_media\" highlightInPreview=\".logo\">\n        Logo #2 (Everywhere else)\n    </appearance-image-input>\n\n    <appearance-image-input [defaultValue]=\"defaultValue('branding.favicon')\" backendUri=\"uploads/favicon\" diskPrefix=\"branding_media\" formControlName=\"branding.favicon\">\n        Favicon\n    </appearance-image-input>\n\n    <div class=\"input-container\">\n        <label for=\"env.app_name\" trans>Site Name</label>\n        <input type=\"text\" id=\"env.app_name\" [placeholder]=\"defaultValue('env.app_name')\" formControlName=\"env.app_name\">\n    </div>\n\n    <div class=\"input-container\">\n        <label for=\"branding.site_description\" trans>Site Description</label>\n        <textarea id=\"branding.site_description\" [placeholder]=\"defaultValue('branding.site_description')\" rows=\"4\" formControlName=\"branding.site_description\"></textarea>\n    </div>\n</div>\n","import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {PaginatedBackendResponse} from '@common/core/types/pagination/paginated-backend-response';\n\nconst BASE_URI = 'css-theme';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CssThemeService {\n    constructor(private http: AppHttpClient) {}\n\n    public all(): PaginatedBackendResponse<CssTheme> {\n        return this.http.get(BASE_URI);\n    }\n\n    public create(params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.post(BASE_URI, params);\n    }\n\n    public update(id, params: Partial<CssTheme>): BackendResponse<{ theme: CssTheme }> {\n        return this.http.put(`${BASE_URI}/${id}`, params);\n    }\n\n    public delete(ids: number[]): BackendResponse<void> {\n        return this.http.delete(`${BASE_URI}/${ids}`);\n    }\n}\n","<div class=\"modal-header\">\n    <h2 mat-dialog-title>\n        <span *ngIf=\"data.theme\" trans>Update Theme</span>\n        <span *ngIf=\"!data.theme\" trans>Create Theme</span>\n    </h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<form (ngSubmit)=\"confirm()\" ngNativeValidate [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <mat-dialog-content class=\"many-inputs\">\n        <div class=\"input-container\">\n            <label for=\"name\" trans>Name</label>\n            <input type=\"text\" id=\"name\" formControlName=\"name\" required minlength=\"3\">\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"is_dark\" formControlName=\"is_dark\" trans>Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme has light text on dark background.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_dark\" formControlName=\"default_dark\" trans>Default Dark Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default dark theme.</p>\n        </div>\n\n        <div class=\"setting-toggle-container\">\n            <mat-slide-toggle id=\"default_light\" formControlName=\"default_light\" trans>Default Light Theme</mat-slide-toggle>\n            <p trans>Whether this theme should be used as default light theme.</p>\n        </div>\n    </mat-dialog-content>\n\n    <mat-dialog-actions>\n        <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n        <button type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>\n            <span *ngIf=\"data.theme; else creating\">Update</span>\n            <ng-template #creating>\n                <span>Create</span>\n            </ng-template>\n        </button>\n    </mat-dialog-actions>\n</form>\n\n\n","import {ChangeDetectionStrategy, Component, Inject} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {FormBuilder} from '@angular/forms';\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {filter} from 'rxjs/operators';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\n\ninterface CrupdateCssThemeModalData {\n    theme: CssTheme;\n}\n\n@Component({\n    selector: 'crupdate-css-theme-modal',\n    templateUrl: './crupdate-css-theme-modal.component.html',\n    styleUrls: ['./crupdate-css-theme-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateCssThemeModalComponent {\n    public loading$ = new BehaviorSubject(false);\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<CssTheme>]: string}>({});\n    public form = this.fb.group({\n        name: [''],\n        is_dark: [false],\n        default_dark: [false],\n        default_light: [false],\n    });\n\n    constructor(\n        private dialogRef: MatDialogRef<CrupdateCssThemeModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CrupdateCssThemeModalData,\n        private cssTheme: CssThemeService,\n        private toast: Toast,\n        private fb: FormBuilder,\n    ) {\n        if (data.theme) {\n            this.form.patchValue(data.theme);\n        }\n\n        // make sure \"default_light\" and \"default_dark\"\n        // can't be toggled on at the same time\n        this.form.get('default_dark')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_light').setValue(false);\n            });\n        this.form.get('default_light')\n            .valueChanges\n            .pipe(filter(value => !!value))\n            .subscribe(() => {\n                this.form.get('default_dark').setValue(false);\n            });\n    }\n\n    public confirm() {\n        const request = this.data.theme ?\n            this.cssTheme.update(this.data.theme.id, this.form.value) :\n            this.cssTheme.create(this.form.value);\n        request.subscribe(response => {\n            this.toast.open(this.data.theme ? 'Theme updated' : 'Theme created');\n            this.close(response.theme);\n        }, (errResponse: BackendErrorResponse) => this.errors$.next(errResponse.errors));\n    }\n\n    public close(theme?: CssTheme) {\n        this.dialogRef.close(theme);\n    }\n}\n","import {ChangeDetectionStrategy, Component, ElementRef, OnDestroy} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BOTTOM_POSITION} from '@common/core/ui/overlay-panel/positions/bottom-position';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'color-picker-input',\n    templateUrl: './color-picker-input.component.html',\n    styleUrls: ['./color-picker-input.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: ColorPickerInputComponent,\n        multi: true,\n    }]\n})\nexport class ColorPickerInputComponent implements OnDestroy, ControlValueAccessor {\n    private pickerSub: Subscription;\n    public propagateChange: Function;\n    public color$ = new BehaviorSubject(null);\n\n    constructor(\n        private overlayPanel: OverlayPanel,\n    ) {}\n\n    public ngOnDestroy(): void {\n        this.pickerSub && this.pickerSub.unsubscribe();\n    }\n\n    public writeValue(value: string) {\n        this.color$.next(value);\n    }\n\n    public registerOnChange(fn: Function) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public async openColorPicker(e: MouseEvent) {\n        const { BeColorPickerModule } = await import('@common/core/ui/color-picker/be-color-picker.module');\n        this.pickerSub = this.overlayPanel.open(\n            BeColorPickerModule.components.panel,\n            {\n                origin: new ElementRef(e.target),\n                position: BOTTOM_POSITION,\n                data: {color: this.color$.value}\n            }\n        ).valueChanged().subscribe(color => {\n            this.color$.next(color);\n            this.propagateChange(this.color$.value);\n        });\n    }\n}\n","<button type=\"button\" matRipple class=\"no-style color-picker-btn\" (click)=\"openColorPicker($event)\">\n    <mat-icon svgIcon=\"drop-custom\" class=\"color-icon\" [style.color]=\"color$ | async\"></mat-icon>\n    <span class=\"name\" trans><ng-content></ng-content></span>\n    <span class=\"change\" trans>Change</span>\n</button>\n","<ul class=\"unstyled-list\" [formGroup]=\"form\">\n    <li *ngFor=\"let color of theme.colors | keyvalue\">\n        <color-picker-input [formControlName]=\"color.key\" trans>{{viewName(color.key)}}</color-picker-input>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, Input, OnDestroy, OnInit} from '@angular/core';\nimport {CssTheme, CssThemeColors} from '@common/core/types/models/CssTheme';\nimport {FormControl, FormGroup} from '@angular/forms';\nimport {SetColors} from '@common/shared/appearance/commands/appearance-commands';\nimport {AppearanceEditor, EditorChanges} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\n\n@Component({\n    selector: 'css-theme-colors-panel',\n    templateUrl: './css-theme-colors-panel.component.html',\n    styleUrls: ['./css-theme-colors-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CssThemeColorsPanelComponent implements OnInit, OnDestroy {\n    @Input() theme: CssTheme;\n    public form = new FormGroup({});\n    private colorCache: CssThemeColors = {};\n\n    constructor(\n        private editor: AppearanceEditor,\n        private themes: CssThemeService,\n    ) {}\n\n    ngOnInit() {\n        this.editor.setSaveRequest(this.saveColors.bind(this));\n\n        // build form\n        Object.entries(this.theme.colors).forEach(([name, color]) => {\n            this.form.addControl(name, new FormControl(color));\n        });\n\n        this.editor.initiated$.subscribe(() => {\n            this.setColors(this.theme.colors);\n            this.form.valueChanges.subscribe((value: CssThemeColors) => {\n                this.setColors(value);\n                this.editor.addChanges({'colors': value});\n            });\n        });\n    }\n\n    ngOnDestroy() {\n        this.editor.setSaveRequest(null);\n    }\n\n    private saveColors(payload: EditorChanges) {\n        return this.themes.update(this.theme.id, payload);\n    }\n\n    private setColors(colors: CssThemeColors) {\n        Object.entries(colors).forEach(([name, color]) => {\n            // make sure we only set colors that actually changed\n            // to keep performance as good as possible\n            if (this.colorCache[name] !== color) {\n                this.editor.postMessage(new SetColors(name, color));\n                this.colorCache[name] = color;\n            }\n        });\n    }\n\n    public viewName(name: string) {\n        return name.replace('be-', '').replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <css-theme-colors-panel\n            [theme]=\"selectedTheme\"\n            *ngIf=\"selectedTheme$ | async as selectedTheme else themesList\"\n    ></css-theme-colors-panel>\n\n    <ng-template #themesList>\n        <button mat-raised-button color=\"accent\" type=\"button\" class=\"new-theme-button\" (click)=\"openCrupdateThemeModal()\" trans>New Theme</button>\n        <ul class=\"unstyled-list\">\n            <li class=\"nav-item\" *ngFor=\"let theme of loadedThemes$ | async\" (click)=\"setSelectedTheme(theme)\">\n                <div class=\"name\">{{theme.name}}</div>\n                <div class=\"actions\" (click)=\"$event.stopPropagation()\">\n                    <button mat-icon-button type=\"button\" (click)=\"setSelectedTheme(theme)\">\n                        <mat-icon svgIcon=\"drop-custom\"></mat-icon>\n                    </button>\n                    <button mat-icon-button type=\"button\" (click)=\"openCrupdateThemeModal(theme);\">\n                        <mat-icon svgIcon=\"edit\"></mat-icon>\n                    </button>\n                    <button mat-icon-button type=\"button\" (click)=\"maybeDeleteThemeModal(theme)\">\n                        <mat-icon svgIcon=\"delete\"></mat-icon>\n                    </button>\n                </div>\n            </li>\n        </ul>\n    </ng-template>\n</div>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>\n","import {ChangeDetectionStrategy, Component, OnDestroy, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {CrupdateCssThemeModalComponent} from '@common/admin/appearance/panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssTheme} from '@common/core/types/models/CssTheme';\nimport {CssThemeService} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme.service';\nimport {BehaviorSubject, Subscription} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {ActivatedRoute, Router} from '@angular/router';\n\n@Component({\n    selector: 'themes-appearance-panel',\n    templateUrl: './themes-appearance-panel.component.html',\n    styleUrls: ['./themes-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ThemesAppearancePanelComponent implements OnInit, OnDestroy {\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public loadedThemes$ = new BehaviorSubject<CssTheme[]>([]);\n    public selectedTheme$ = new BehaviorSubject<CssTheme>(null);\n    private querySub: Subscription;\n\n    public path$ = this.selectedTheme$.pipe(map(theme => {\n        const path = ['Themes'];\n        if (theme) path.push(theme.name);\n        return path;\n    }));\n\n    constructor(\n        public appearance: AppearanceEditor,\n        private modal: Modal,\n        private themes: CssThemeService,\n        private toast: Toast,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.reloadThemes();\n    }\n\n    ngOnDestroy() {\n        this.querySub && this.querySub.unsubscribe();\n    }\n\n    public openCrupdateThemeModal(theme?: CssTheme) {\n        this.modal.open(CrupdateCssThemeModalComponent, {theme})\n            .afterClosed()\n            .subscribe(newTheme => {\n                if (newTheme) {\n                    this.reloadThemes();\n                }\n            });\n    }\n\n    public setSelectedTheme(theme?: CssTheme) {\n        this.router.navigate([], {queryParams: {theme: theme && theme.id}, queryParamsHandling: 'merge'});\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedTheme$.value) {\n            this.setSelectedTheme();\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public maybeDeleteThemeModal(theme: CssTheme) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Theme',\n            body:  'Are you sure you want to delete this theme?',\n            ok:    'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.deleteTheme(theme);\n        });\n    }\n\n    private reloadThemes() {\n        this.loading$.next(true);\n        this.themes.all()\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.loadedThemes$.next(response.pagination.data);\n                this.bindToQueryParams();\n            });\n    }\n\n    private deleteTheme(theme: CssTheme) {\n        this.themes.delete([theme.id]).subscribe(() => {\n            this.toast.open('Theme deleted');\n            this.reloadThemes();\n        });\n    }\n\n    private bindToQueryParams() {\n        if (this.querySub) return;\n        this.querySub = this.route.queryParams.subscribe((params: {theme?: string}) => {\n            const theme = this.loadedThemes$.value.find(t => t.id === +params.theme);\n            this.selectedTheme$.next(theme);\n        });\n    }\n}\n","export class MenuItem {\n    id: number|string;\n    label: string;\n    action: string;\n\n    // ID for model if action matches to specific model. If action\n    // points to a specific custom page, model_id will be that page's ID.\n    model_id: number;\n    type: MenuItemType = 'link';\n    icon: string;\n    condition: MenuItemCondition = null;\n    target: string = null;\n    activeExact = false;\n\n    constructor(params: Partial<MenuItem> = {}) {\n        for (const name in params) {\n            this[name] = params[name];\n        }\n        this.id = Math.floor(Math.random() * (1000 - 1));\n    }\n}\n\nexport type MenuItemCondition = string|string[]|Function;\nexport type MenuItemType = 'link' | 'route' | 'scrollTo';\n","import {Injectable} from '@angular/core';\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Menu} from '@common/core/ui/custom-menu/menu';\nimport {Settings} from '@common/core/config/settings.service';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {BehaviorSubject} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuEditor {\n    public allMenus$ = new BehaviorSubject< Menu[]>([]);\n    public activeMenu$ = new BehaviorSubject<Menu>(null);\n\n    constructor(\n        private settings: Settings,\n        private appearance: AppearanceEditor,\n    ) {}\n\n    public create() {\n        const allMenus = [...this.allMenus$.value];\n        this.activeMenu$.next(new Menu({name: 'New Menu'}));\n        allMenus.push(this.activeMenu$.value);\n        this.allMenus$.next(allMenus);\n        this.commitChanges();\n    }\n\n    public reorderActiveMenuItems(previousIndex: number, currentIndex: number) {\n        const activeMenu = {...this.activeMenu$.value};\n        moveItemInArray(activeMenu.items, previousIndex, currentIndex);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    public deleteActive() {\n        const allMenus = [...this.allMenus$.value];\n        const i = allMenus.indexOf(this.activeMenu$.value);\n        allMenus.splice(i, 1);\n        this.activeMenu$.next(null);\n        this.allMenus$.next(allMenus);\n        this.commitChanges();\n    }\n\n    public addItem(item: MenuItem) {\n        const activeMenu = {...this.activeMenu$.value};\n        item = this.transformLocalLinksToRoutes(item);\n        activeMenu.items.push(item);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    public removeItem(item: MenuItem) {\n        const activeMenu = {...this.activeMenu$.value};\n        const i = this.activeMenu$.value.items.indexOf(item);\n        activeMenu.items.splice(i, 1);\n        this.activeMenu$.next(activeMenu);\n        this.commitChanges();\n    }\n\n    private transformLocalLinksToRoutes(item: MenuItem): MenuItem {\n        const baseUrl = this.settings.getBaseUrl();\n\n        if (item.type !== 'link' || item.action.indexOf(baseUrl) === -1) return item;\n\n        item.type = 'route';\n        item.action = item.action.replace(this.settings.getBaseUrl(), '');\n        return item;\n    }\n\n    public commitChanges() {\n        const menus = JSON.stringify(this.allMenus$.value);\n        this.appearance.setConfig('menus', menus);\n        this.appearance.addChanges({menus});\n    }\n\n    public setFromJson(json: string) {\n        if ( ! json) return;\n        const menus = JSON.parse(json);\n\n        if ( ! menus) return;\n\n        const allMenus = menus.map(menuData => {\n            const menu = new Menu(menuData);\n            menu.items = menu.items.map(item => new MenuItem(item));\n            return menu;\n        });\n        this.allMenus$.next(allMenus);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class MenuItemCategoriesService {\n    constructor(private http: HttpCacheClient) {}\n\n    public get(): BackendResponse<{categories: MenuItemCategory[]}> {\n        return this.http.getWithCache('admin/appearance/menu-categories');\n    }\n}\n","<div class=\"header\">\n    <span class=\"title\" trans>Select Destination</span>\n    <mat-icon svgIcon=\"close\" (click)=\"close()\"></mat-icon>\n</div>\n<div class=\"new-item-tabs\">\n    <mat-accordion>\n        <form (ngSubmit)=\"addLinkMenuItem()\" [formGroup]=\"linkForm\" ngNativeValidate>\n            <mat-expansion-panel class=\"mat-elevation-z\">\n                <mat-expansion-panel-header><mat-panel-title trans>Link</mat-panel-title></mat-expansion-panel-header>\n                <div class=\"many-inputs expansion-panel-content\">\n                    <div class=\"input-container\">\n                        <label for=\"external-link-url\" trans>URL</label>\n                        <input type=\"url\" id=\"external-link-url\" formControlName=\"action\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label for=\"external-link-text\" trans>Link Text</label>\n                        <input type=\"text\" id=\"external-link-text\" formControlName=\"label\" required>\n                    </div>\n                </div>\n                <mat-action-row>\n                    <button mat-button color=\"accent\" type=\"submit\" trans>Select</button>\n                </mat-action-row>\n            </mat-expansion-panel>\n        </form>\n        <mat-expansion-panel class=\"mat-elevation-z\">\n            <mat-expansion-panel-header><mat-panel-title trans>Route</mat-panel-title></mat-expansion-panel-header>\n            <div class=\"items-list expansion-panel-content\">\n                <div class=\"item\" *ngFor=\"let route of appearance.config.menus.availableRoutes\"\n                     (click)=\"addRouteMenuItem(route)\">{{route}}\n                </div>\n            </div>\n        </mat-expansion-panel>\n        <mat-expansion-panel class=\"mat-elevation-z\" *ngFor=\"let category of menuItemCategories\">\n            <mat-expansion-panel-header><mat-panel-title trans>{{category.name}}</mat-panel-title></mat-expansion-panel-header>\n            <div class=\"items-list expansion-panel-content\">\n                <div class=\"item\" *ngFor=\"let item of category.items\" (click)=\"addCustomMenuItem(item)\">{{item.label}}</div>\n            </div>\n        </mat-expansion-panel>\n    </mat-accordion>\n</div>\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {MenuItemCategory} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-category';\nimport {MenuItemCategoriesService} from '@common/admin/appearance/panels/menus-appearance-panel/menus/item-categories/menu-item-categories.service';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\n\n@Component({\n    selector: 'select-menu-item-action',\n    templateUrl: './select-menu-item-action.component.html',\n    styleUrls: ['./select-menu-item-action.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SelectMenuItemActionComponent implements OnInit {\n    public linkForm = this.fb.group({\n        action: [''],\n        label: [''],\n    });\n    public menuItemCategories: MenuItemCategory[];\n\n    constructor(\n        public editor: MenuEditor,\n        public appearance: AppearanceEditor,\n        private overlayPanelRef: OverlayPanelRef,\n        private fb: FormBuilder,\n        private itemCategories: MenuItemCategoriesService\n    ) {}\n\n    ngOnInit() {\n        this.itemCategories.get().subscribe(response => {\n            this.menuItemCategories = response.categories;\n        });\n    }\n\n    addLinkMenuItem() {\n        this.close({\n            type: 'link',\n            label: this.linkForm.value.label,\n            action: this.linkForm.value.action,\n        });\n    }\n\n    addRouteMenuItem(route: string) {\n        this.close({\n            type: 'route',\n            label: route,\n            action: route,\n        });\n    }\n\n    addCustomMenuItem(item: Partial<MenuItem>) {\n        this.close(item);\n    }\n\n    close(destination?: Partial<MenuItem>) {\n        this.overlayPanelRef.close(destination);\n    }\n}\n","<button mat-icon-button (click)=\"selectIcon(icon)\" *ngFor=\"let icon of icons$ | async\">\n  <mat-icon [svgIcon]=\"icon\"></mat-icon>\n</button>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay overlay-partial\"></loading-indicator>","import {ChangeDetectionStrategy, Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize} from 'rxjs/operators';\nimport {OverlayPanelRef} from '@common/core/ui/overlay-panel/overlay-panel-ref';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {HttpCacheClient} from '@common/core/http/http-cache-client';\n\n@Component({\n    selector: 'icon-selector',\n    templateUrl: './icon-selector.component.html',\n    styleUrls: ['./icon-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class IconSelectorComponent implements OnInit {\n    public icons$: BehaviorSubject<string[]> = new BehaviorSubject([]);\n    public loading$: BehaviorSubject<boolean> = new BehaviorSubject(false);\n\n    @Output() iconSelected = new EventEmitter<string>();\n\n    constructor(\n        private http: HttpCacheClient,\n        private overlayPanelRef: OverlayPanelRef,\n    ) {}\n\n    ngOnInit() {\n        this.loading$.next(true);\n        this.http.get<GenericBackendResponse<{icons: string[]}>>('admin/icons')\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.icons$.next(response.icons);\n            });\n    }\n\n    public selectIcon(icon: string) {\n        // component is used inline\n        if (this.iconSelected.observers.length) {\n            this.iconSelected.next(icon);\n        // component is used as overlay panel\n        } else {\n            this.overlayPanelRef.emitValue(icon);\n            this.overlayPanelRef.close();\n        }\n\n    }\n}\n","<div class=\"title\" trans>Menu Items</div>\n\n<mat-accordion cdkDropList (cdkDropListDropped)=\"reorderMenuItems($event)\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else noActiveMenu\">\n    <mat-expansion-panel\n            class=\"mat-elevation-z menu-item-container\"\n            cdkDrag\n            *ngFor=\"let menuItem of activeMenu.items\"\n            (opened)=\"toggleMenuItem(menuItem)\"\n            (closed)=\"toggleMenuItem(menuItem)\"\n            [attr.data-id]=\"menuItem.id\"\n    >\n        <mat-expansion-panel-header>\n            <mat-panel-title>\n                <mat-icon class=\"drag-handle\" cdkDragHandle svgIcon=\"drag-handle\"></mat-icon>\n                <span class=\"name\">{{menuItem.label}}</span>\n            </mat-panel-title>\n        </mat-expansion-panel-header>\n\n        <div class=\"many-inputs menu-item-list\">\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-label'}}\" trans>Label</label>\n                <input type=\"text\" [(ngModel)]=\"menuItem.label\" id=\"{{menuItem.id + '-label'}}\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-type'}}\" trans>Type</label>\n                <select [(ngModel)]=\"menuItem.type\" id=\"{{menuItem.id + '-type'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option value=\"link\" trans>Link</option>\n                    <option value=\"route\" trans>Route</option>\n                    <option value=\"page\" trans>Page</option>\n                </select>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-action'}}\" trans>Action</label>\n                <input type=\"text\" [(ngModel)]=\"menuItem.action\" id=\"{{menuItem.id + '-action'}}\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-condition'}}\" trans>Condition</label>\n                <select [(ngModel)]=\"menuItem.condition\" id=\"{{menuItem.id + '-condition'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"null\" trans>None</option>\n                    <option value=\"auth\" trans>Show to Logged in Users Only</option>\n                    <option value=\"guest\" trans>Show to Guest Users Only</option>\n                    <option value=\"admin\" trans>Show to Admin Only</option>\n                </select>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"{{menuItem.id + '-target'}}\" trans>Open link in</label>\n                <select [(ngModel)]=\"menuItem.target\" id=\"{{menuItem.id + '-target'}}\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option value=\"_self\" trans>Same Window</option>\n                    <option value=\"_blank\" trans>New Window</option>\n                </select>\n            </div>\n\n            <div class=\"input-container icon-input-container\" #iconInput (click)=\"openIconSelector(iconInput, menuItem)\">\n                <label for=\"{{menuItem.id + '-icon'}}\" trans>Icon</label>\n                <input type=\"text\" readonly [(ngModel)]=\"menuItem.icon\" id=\"{{menuItem.id + '-icon'}}\" placeholder=\"(Optional)\" trans-placeholder>\n                <mat-icon [svgIcon]=\"menuItem.icon\"></mat-icon>\n            </div>\n        </div>\n\n        <mat-action-row>\n            <button mat-button color=\"warn\" class=\"delete-button\" (click)=\"confirmMenuItemDeletion()\" trans>Remove</button>\n        </mat-action-row>\n    </mat-expansion-panel>\n</mat-accordion>\n\n<ng-template #noActiveMenu>\n    <div class=\"no-menu-items\" trans>This menu has no items yet.</div>\n</ng-template>\n","import {ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, OnDestroy} from '@angular/core';\nimport {Subscription} from 'rxjs';\nimport {CdkDragDrop} from '@angular/cdk/drag-drop';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\n\n@Component({\n    selector: 'menu-items',\n    templateUrl: './menu-items.component.html',\n    styleUrls: ['./menu-items.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenuItemsComponent implements OnDestroy {\n    public selectedMenuItem: MenuItem;\n    public subscriptions: Subscription[] = [];\n\n    constructor(\n        public menus: MenuEditor,\n        private modal: Modal,\n        private overlayPanel: OverlayPanel,\n        private cd: ChangeDetectorRef,\n    ) {}\n\n    ngOnDestroy() {\n        this.subscriptions.forEach(subscription => {\n            subscription && subscription.unsubscribe();\n        });\n    }\n\n    public reorderMenuItems(e: CdkDragDrop<void>) {\n        this.menus.reorderActiveMenuItems(e.previousIndex, e.currentIndex);\n    }\n\n    /**\n     * Toggle specified menu item settings panel visibility.\n     */\n    public toggleMenuItem(item: MenuItem) {\n        if (this.selectedMenuItem === item) {\n            this.selectedMenuItem = null;\n        } else {\n            this.selectedMenuItem = item;\n        }\n    }\n\n    /**\n     * Ask user to confirm menu item deletion.\n     */\n    public confirmMenuItemDeletion() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Menu Item',\n            body: 'Are you sure you want to delete this menu item?',\n            ok: 'Delete'\n        }).afterClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            this.menus.removeItem(this.selectedMenuItem);\n            this.selectedMenuItem = null;\n        });\n    }\n\n    public openIconSelector(origin: HTMLElement, menuItem: MenuItem) {\n        this.overlayPanel.open(IconSelectorComponent, {\n            position: RIGHT_POSITION,\n            origin: new ElementRef(origin),\n        }).valueChanged().subscribe(icon => {\n            menuItem.icon = icon;\n            this.menus.commitChanges();\n            this.cd.detectChanges();\n        });\n    }\n}\n","<appearance-panel-meta [path]=\"['Menus', menus.activeMenu$.value && menus.activeMenu$.value.name]\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <div class=\"menu-panel\" *ngIf=\"menus.activeMenu$ | async as activeMenu; else allMenuList\">\n        <div class=\"many-inputs menu-settings\">\n            <div class=\"input-container\">\n                <label for=\"menu-name\" trans>Menu Name</label>\n                <input type=\"text\" id=\"menu-name\" [(ngModel)]=\"activeMenu.name\" (ngModelChange)=\"menus.commitChanges()\">\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"menu-position\" trans>Menu Position</label>\n                <select id=\"menu-position\" [(ngModel)]=\"activeMenu.position\" (ngModelChange)=\"menus.commitChanges()\">\n                    <option [ngValue]=\"position\" *ngFor=\"let position of appearance.config.menus.positions\">{{getDisplayName(position)}}</option>\n                </select>\n            </div>\n        </div>\n\n        <menu-items></menu-items>\n\n        <div class=\"action-buttons\">\n            <button mat-button color=\"warn\" (click)=\"confirmMenuDeletion()\" trans>Delete Menu</button>\n            <button class=\"button flat add-item-button\" mat-button color=\"accent\" (click)=\"openAddItemPanel()\" trans>Add Item</button>\n        </div>\n    </div>\n\n    <ng-template #allMenuList>\n        <div class=\"menus\">\n            <div class=\"menu nav-item\" *ngFor=\"let menu of menus.allMenus$ | async\" (click)=\"setActiveMenu(menu)\">\n                <span class=\"name\">{{menu.name}}</span>\n                <mat-icon svgIcon=\"keyboard-arrow-right\" class=\"actions\"></mat-icon>\n            </div>\n\n            <div class=\"action-buttons\">\n                <button mat-button color=\"accent\" class=\"button primary\" (click)=\"menus.create()\" trans>Add a Menu</button>\n            </div>\n        </div>\n    </ng-template>\n</div>","import {ChangeDetectionStrategy, Component, ElementRef} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {MenuEditor} from '@common/admin/appearance/panels/menus-appearance-panel/menus/menu-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {OverlayPanel} from '@common/core/ui/overlay-panel/overlay-panel.service';\nimport {RIGHT_POSITION} from '@common/core/ui/overlay-panel/positions/right-position';\nimport {SelectMenuItemActionComponent} from '@common/admin/appearance/panels/menus-appearance-panel/menus/add-menu-item-panel/select-menu-item-action.component';\nimport {Menu} from '@common/core/ui/custom-menu/menu';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {MenuItem} from '@common/core/ui/custom-menu/menu-item';\n\n@Component({\n    selector: 'menus-appearance-panel',\n    templateUrl: './menus-appearance-panel.component.html',\n    styleUrls: ['./menus-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MenusAppearancePanelComponent {\n    constructor(\n        public appearance: AppearanceEditor,\n        public menus: MenuEditor,\n        private modal: Modal,\n        private settings: Settings,\n        private panel: OverlayPanel,\n        private el: ElementRef<HTMLElement>\n    ) {\n        this.menus.setFromJson(this.settings.get('menus'));\n    }\n\n    public openAddItemPanel() {\n        const position = RIGHT_POSITION.slice();\n        position[0].offsetX = 10;\n        position[1].offsetX = 10;\n        this.panel\n            .open(SelectMenuItemActionComponent, {\n                position,\n                origin: this.el,\n                panelClass: 'add-menu-item-panel-container',\n            })\n            .afterClosed()\n            .subscribe((val: Partial<MenuItem>) => {\n                if (val) {\n                    this.menus.addItem(new MenuItem(val));\n                }\n            });\n    }\n\n    public openPreviousPanel() {\n        if (this.menus.activeMenu$.value) {\n            this.menus.activeMenu$.next(null);\n        } else {\n            this.appearance.closeActivePanel();\n        }\n    }\n\n    public setActiveMenu(menu: Menu) {\n        this.menus.activeMenu$.next(menu);\n    }\n\n    public confirmMenuDeletion() {\n        this.modal\n            .show(ConfirmModalComponent, {\n                title: 'Delete Menu',\n                body: 'Are you sure you want to delete this menu?',\n                ok: 'Delete',\n            })\n            .afterClosed()\n            .subscribe(confirmed => {\n                if (!confirmed) return;\n                this.menus.deleteActive();\n            });\n    }\n\n    public getDisplayName(name: string) {\n        return name.replace(/-/g, ' ');\n    }\n}\n","<appearance-panel-meta [path]=\"['Seo Settings']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div [formGroup]=\"form\" class=\"appearance-panel-content many-inputs\">\n    <ng-container *ngFor=\"let field of seoFields\">\n        <div class=\"input-container\">\n            <label [for]=\"field.key\" trans>{{field.name}}</label>\n            <textarea type=\"text\" [id]=\"field.key\" [formControlName]=\"field.key\" [placeholder]=\"field.defaultValue\" rows=\"2\"></textarea>\n        </div>\n    </ng-container>\n</div>","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\n\ninterface SeoField {\n    name: string;\n    key: string;\n    defaultValue: string;\n    value: string;\n}\n\n@Component({\n    selector: 'seo-appearance-panel',\n    templateUrl: './seo-appearance-panel.component.html',\n    styleUrls: ['./seo-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class SeoAppearancePanelComponent implements OnInit {\n    public seoFields: SeoField[];\n    public form = this.fb.group({});\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n    ) {}\n\n    ngOnInit() {\n        this.seoFields = this.editor.defaultSettings['seo_fields'];\n\n        this.seoFields.forEach(field => {\n            this.form.addControl(field.key, this.fb.control(field.value));\n        });\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.addChanges(value);\n        });\n    }\n}\n","<div class=\"modal-header\">\n    <h2 class=\"modal-title\" mat-dialog-title trans>Code Editor</h2>\n    <button type=\"button\" (click)=\"close()\" class=\"close-button no-style\" tabindex=\"-1\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n    </button>\n</div>\n\n<mat-dialog-content>\n    <div class=\"editor-container\">\n        <p class=\"info\" *ngIf=\"data.language === 'html'\" trans>If entering javascript, wrap it with &lt;script>&lt;/script> tag.</p>\n        <div class=\"editor\" #editor></div>\n    </div>\n</mat-dialog-content>\n\n<mat-dialog-actions>\n    <button (click)=\"close()\" type=\"button\" mat-button trans>Cancel</button>\n    <button type=\"submit\" mat-raised-button color=\"accent\" (click)=\"confirm()\" [disabled]=\"syntaxInvalid$ | async\" trans>Update</button>\n</mat-dialog-actions>\n\n<loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>","import {ChangeDetectionStrategy, Component, ElementRef, Inject, OnInit, ViewChild} from '@angular/core';\nimport {MAT_DIALOG_DATA, MatDialogRef} from '@angular/material/dialog';\nimport {filter} from 'rxjs/operators';\nimport {ESCAPE} from '@angular/cdk/keycodes';\nimport {LazyLoaderService} from '@common/core/utils/lazy-loader.service';\nimport {BehaviorSubject} from 'rxjs';\n\ndeclare let ace;\n\nexport interface CodeEditorModalData {\n    contents?: string;\n    language: string;\n}\n\n@Component({\n    selector: 'code-editor-modal',\n    templateUrl: './code-editor-modal.component.html',\n    styleUrls: ['./code-editor-modal.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CodeEditorModalComponent implements OnInit {\n    @ViewChild('editor', { static: true }) editorEl: ElementRef;\n\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public syntaxInvalid$ = new BehaviorSubject<boolean>(false);\n    private editor;\n\n    constructor(\n        private dialogRef: MatDialogRef<CodeEditorModalComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: CodeEditorModalData,\n        private lazyLoader: LazyLoaderService,\n    ) {}\n\n    ngOnInit() {\n        this.initEditor(this.data.contents, this.data.language);\n        this.overrideDialogCloseEvents();\n    }\n\n    public confirm() {\n        this.close(this.editor.getValue());\n    }\n\n    public close(value?: string) {\n        this.dialogRef.close(value);\n    }\n\n    private initEditor(contents: string, language = 'html') {\n        this.loading$.next(true);\n        this.lazyLoader.loadAsset('js/ace/ace.js', {type: 'js'}).then(() => {\n            this.editor = ace.edit(this.editorEl.nativeElement);\n            this.editor.getSession().setMode('ace/mode/' + language);\n            this.editor.setTheme('ace/theme/chrome');\n            this.editor.$blockScrolling = Infinity;\n            if (contents) this.editor.setValue(contents, 1);\n\n            this.editor.getSession().on('changeAnnotation', () => {\n                const annotations = this.editor.getSession().getAnnotations() as any[];\n\n                // hide !doctype syntax error\n                if (annotations[0] && /doctype first/.test(annotations[0].text)) {\n                    annotations.splice(0, 1);\n                    this.editor.getSession().setAnnotations(annotations);\n                    return;\n                }\n\n                // prevent editor submit if there are syntax errors\n                const syntaxInvalid = this.editor\n                    .getSession()\n                    .getAnnotations()\n                    .filter(a => a.type === 'error')\n                    .length > 0;\n                this.syntaxInvalid$.next(syntaxInvalid);\n            });\n            this.loading$.next(false);\n        });\n    }\n\n    /**\n     * Need to always send dialog data, regardless of how it was closed.\n     * Angular material does not provide easy way to do this, so\n     * we need to override backdrop click and escape key close events.\n     */\n    private overrideDialogCloseEvents() {\n        this.dialogRef.disableClose = true;\n\n        // close on backdrop click\n        this.dialogRef.backdropClick().subscribe(() => {\n            this.close();\n        });\n\n        // close on escape key\n        this.dialogRef.keydownEvents()\n            .pipe(filter(event => event.keyCode === ESCAPE))\n            .subscribe(() => this.close());\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {FormBuilder} from '@angular/forms';\nimport {CodeEditorModalComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {SetCustomCss, SetCustomHtml} from '@common/shared/appearance/commands/appearance-commands';\n\n@Component({\n    selector: 'custom-code-appearance-panel',\n    templateUrl: './custom-code-appearance-panel.component.html',\n    styleUrls: ['./custom-code-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CustomCodeAppearancePanelComponent implements OnInit {\n    public form = this.fb.group({\n        'custom-code.css': [''],\n        'custom-code.html': [''],\n    });\n\n    constructor(\n        public editor: AppearanceEditor,\n        private fb: FormBuilder,\n        private modal: Modal,\n        private toast: Toast,\n    ) {}\n\n    ngOnInit() {\n        const defaults = {};\n        Object.keys(this.form.controls).forEach(key => {\n            defaults[key] = this.editor.currentValue(key);\n        });\n        this.form.patchValue(defaults);\n    }\n\n    public openModal(type: 'css'|'html') {\n        const key = 'custom-code.' + type;\n        const initialValue = this.form.value[key] || '',\n            params = {contents: this.form.value[key], language: type};\n        this.modal.open(CodeEditorModalComponent, params)\n            .afterClosed()\n            .subscribe(value => {\n                // undefined means user closed modal without clicking \"update\" button\n                if (value === undefined || initialValue === value) return;\n                const newValue = {[key]: value};\n                this.form.patchValue(newValue);\n                this.editor.saveChanges(newValue).subscribe(() => {\n                    this.addCodeToPreview(type, value);\n                    this.toast.open('Custom code saved');\n                });\n            });\n    }\n\n    private addCodeToPreview(type: 'css'|'html', content: string) {\n        if (type === 'css') {\n            this.editor.postMessage(new SetCustomCss(content));\n        } else {\n            this.editor.postMessage(new SetCustomHtml(content));\n        }\n    }\n}\n","<appearance-panel-meta [path]=\"['Custom Code']\" (back)=\"editor.closeActivePanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n   <button type=\"button\" class=\"nav-item\" (click)=\"openModal('css')\">\n      <span class=\"text\" trans>Custom CSS</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n   <button class=\"nav-item\" (click)=\"openModal('html')\">\n      <span class=\"text\" trans>Custom HTML & Javascript</span>\n      <span class=\"actions\" trans>Modify</span>\n   </button>\n</div>","<sidenav class=\"no-navbar\">\n  <nav class=\"sidebar\">\n    <div class=\"header\">\n      <div class=\"back-button\" (click)=\"closeEditor()\">\n        <mat-icon svgIcon=\"close\"></mat-icon>\n      </div>\n      <div class=\"title\" trans>Appearance Editor</div>\n      <button\n        mat-raised-button\n        color=\"accent\"\n        class=\"button primary save-button\"\n        (click)=\"editor.saveChanges()\"\n        [disabled]=\"!(editor.changes$ | async) || (editor.loading$ | async)\"\n      >\n        <span *ngIf=\"editor.changes$ | async; else saved\" trans>Save</span>\n        <ng-template #saved>\n          <span trans>Saved</span>\n        </ng-template>\n      </button>\n    </div>\n\n    <ng-container *ngIf=\"editor.activePanel$ | async as activePanel; else navigation\">\n      <ng-container [ngSwitch]=\"activePanel.name\">\n        <general-appearance-panel *ngSwitchCase=\"'general'\"></general-appearance-panel>\n        <themes-appearance-panel *ngSwitchCase=\"'themes'\"></themes-appearance-panel>\n        <menus-appearance-panel *ngSwitchCase=\"'menus'\"></menus-appearance-panel>\n        <seo-appearance-panel *ngSwitchCase=\"'seo-settings'\"></seo-appearance-panel>\n        <custom-code-appearance-panel *ngSwitchCase=\"'custom-code'\"></custom-code-appearance-panel>\n        <ng-container *ngSwitchDefault>\n          <ng-template\n            *ngIf=\"panelPortal$ | async as portal\"\n            [cdkPortalOutlet]=\"portal\"\n          ></ng-template>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n\n    <ng-template #navigation>\n      <div class=\"root-navigation\">\n        <a\n          class=\"nav-item\"\n          [routerLink]=\"[]\"\n          [queryParams]=\"{panel: slugify(section.name)}\"\n          *ngFor=\"let section of editor.config.sections\"\n        >\n          <span class=\"text\" trans>{{ viewName(section.name) }}</span>\n          <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n        </a>\n      </div>\n    </ng-template>\n  </nav>\n  <main>\n    <div class=\"live-preview\">\n      <iframe src=\"about:blank\" #iframe></iframe>\n    </div>\n  </main>\n</sidenav>\n\n<button mat-fab (click)=\"sidenav.toggleSidebarMode()\" class=\"sidebar-toggle-button\">\n  <mat-icon svgIcon=\"edit\"></mat-icon>\n</button>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Inject,\n    OnDestroy,\n    OnInit,\n    Optional,\n    ViewChild,\n} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {AppearanceEditor} from './appearance-editor/appearance-editor.service';\nimport {slugifyString} from '@common/core/utils/slugify-string';\nimport {Subscription} from 'rxjs';\nimport {ComponentPortal} from '@angular/cdk/portal';\nimport {map} from 'rxjs/operators';\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\nimport {\n    APPEARANCE_EDITOR_CONFIG,\n    AppearanceEditorConfig,\n} from './appearance-editor-config.token';\nimport {SidenavComponent} from '@common/shared/sidenav/sidenav.component';\n\n@Component({\n    selector: 'appearance',\n    templateUrl: './appearance.component.html',\n    styleUrls: ['./appearance.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppearanceComponent implements OnInit, OnDestroy {\n    @ViewChild('iframe', {static: true}) iframe: ElementRef;\n    @ViewChild(SidenavComponent, {static: true}) sidenav: SidenavComponent;\n    private routerSub: Subscription;\n\n    public panelPortal$ = this.editor.activePanel$.pipe(\n        map(panel => {\n            return panel && panel.component\n                ? new ComponentPortal(panel.component)\n                : null;\n        })\n    );\n\n    constructor(\n        public editor: AppearanceEditor,\n        private router: Router,\n        private route: ActivatedRoute,\n        public breakpoints: BreakpointsService,\n        @Inject(APPEARANCE_EDITOR_CONFIG)\n        @Optional()\n        public config: AppearanceEditorConfig[]\n    ) {}\n\n    ngOnInit() {\n        this.editor.init(\n            this.iframe.nativeElement,\n            this.route.snapshot.data.defaultSettings,\n            this.config\n        );\n        this.routerSub = this.route.queryParams.subscribe(\n            (params: {panel?: string}) => {\n                this.editor.openPanel(params.panel);\n            }\n        );\n    }\n\n    ngOnDestroy() {\n        this.routerSub && this.routerSub.unsubscribe();\n    }\n\n    public closeEditor() {\n        this.router.navigate(['admin']);\n    }\n\n    public slugify(str: string) {\n        return slugifyString(str);\n    }\n\n    public viewName(name: string) {\n        return name.replace('-', ' ');\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {CanDeactivate} from '@angular/router';\nimport {AppearanceComponent} from './appearance.component';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {Observable} from 'rxjs';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class CanDeactivateAppearance implements CanDeactivate<AppearanceComponent> {\n    constructor(\n        private editor: AppearanceEditor,\n        private modal: Modal,\n    ) {}\n\n    canDeactivate(): Observable<boolean>|boolean {\n        if ( ! this.editor.changes$.value) return true;\n\n        return this.modal.show(ConfirmModalComponent, {\n            title: 'Close Appearance Editor',\n            body: 'Are you sure you want to close appearance editor?',\n            bodyBold: 'All unsaved changes will be lost.',\n            ok: 'Close',\n            cancel: 'Stay',\n        }).afterClosed();\n    }\n}\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {AppearanceComponent} from './appearance.component';\nimport {CanDeactivateAppearance} from './can-deactivate-appearance.guard';\nimport {AuthGuard} from '../../guards/auth-guard.service';\nimport {AppearanceEditorResolver} from './appearance-editor/appearance-editor-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: AppearanceComponent,\n        data: {permissions: ['appearance.update']},\n        resolve: {defaultSettings: AppearanceEditorResolver},\n        canActivate: [AuthGuard],\n        canDeactivate: [CanDeactivateAppearance],\n        children: [\n            {path: ''},\n            {path: ':panel'},\n            {path: ':panel/:activeItem'},\n        ]\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class AppearanceRoutingModule {}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {GenericBackendResponse} from '@common/core/types/backend-response';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AppearanceEditorResolver implements Resolve<GenericBackendResponse<{[key: string]: any}>> {\n    constructor(\n        private router: Router,\n        private http: AppHttpClient\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<GenericBackendResponse<{[key: string]: any}>> {\n        return this.http.get<GenericBackendResponse<{[key: string]: any}>>('admin/appearance/values').pipe(\n            catchError(() => {\n                this.router.navigate(['/admin']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/admin']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {IconSelectorComponent} from '@common/shared/icon-selector/icon-selector.component';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\n\n\n@NgModule({\n    declarations: [\n        IconSelectorComponent,\n    ],\n    imports: [\n        CommonModule,\n        LoadingIndicatorModule,\n\n        MatButtonModule,\n        MatIconModule,\n    ],\n    exports: [\n        IconSelectorComponent,\n    ]\n})\nexport class IconSelectorModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ColorPickerInputComponent} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatIconModule} from '@angular/material/icon';\nimport { MatRippleModule } from '@angular/material/core';\n\n\n@NgModule({\n    declarations: [ColorPickerInputComponent],\n    imports: [CommonModule, TranslationsModule, MatIconModule, MatRippleModule],\n    exports: [ColorPickerInputComponent],\n})\nexport class ColorPickerInputModule {}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {AppearanceComponent} from './appearance.component';\nimport {MenusAppearancePanelComponent} from './panels/menus-appearance-panel/menus-appearance-panel.component';\nimport {SelectMenuItemActionComponent} from './panels/menus-appearance-panel/menus/add-menu-item-panel/select-menu-item-action.component';\nimport {AppearancePanelMetaComponent} from './appearance-panel-meta/appearance-panel-meta.component';\nimport {MenuItemsComponent} from './panels/menus-appearance-panel/menus/menu-items/menu-items.component';\nimport {AppearanceRoutingModule} from './appearance-routing.module';\nimport {CodeEditorModalComponent} from './panels/custom-code-appearance-panel/code-editor-modal/code-editor-modal.component';\nimport {ThemesAppearancePanelComponent} from './panels/themes-appearance-panel/themes-appearance-panel.component';\nimport {CrupdateCssThemeModalComponent} from './panels/themes-appearance-panel/crupdate-css-theme-modal/crupdate-css-theme-modal.component';\nimport {CssThemeColorsPanelComponent} from '@common/admin/appearance/panels/themes-appearance-panel/css-theme-colors-panel/css-theme-colors-panel.component';\nimport {GeneralAppearancePanelComponent} from '@common/admin/appearance/panels/general-appearance-panel/general-appearance-panel.component';\nimport {HighlightInPreviewDirective} from './highlight-in-preview.directive';\nimport {SeoAppearancePanelComponent} from '@common/admin/appearance/panels/seo-appearance-panel/seo-appearance-panel.component';\nimport {CustomCodeAppearancePanelComponent} from '@common/admin/appearance/panels/custom-code-appearance-panel/custom-code-appearance-panel.component';\nimport {AppearanceImageInputComponent} from '@common/admin/appearance/appearance-image-input/appearance-image-input.component';\nimport {IconSelectorModule} from '@common/shared/icon-selector/icon-selector.module';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ImageOrIconModule} from '@common/core/ui/image-or-icon/image-or-icon.module';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {MatButtonModule} from '@angular/material/button';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {\n    APPEARANCE_EDITOR_CONFIG,\n    DEFAULT_APPEARANCE_EDITOR_CONFIG,\n} from './appearance-editor-config.token';\nimport {SidenavModule} from '@common/shared/sidenav/sidenav.module';\n\n@NgModule({\n    imports: [\n        AppearanceRoutingModule,\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        IconSelectorModule,\n        TranslationsModule,\n        ImageOrIconModule,\n        LoadingIndicatorModule,\n        ColorPickerInputModule,\n        SidenavModule,\n\n        // material\n        MatMenuModule,\n        MatProgressBarModule,\n        MatIconModule,\n        MatButtonModule,\n        MatDialogModule,\n        MatExpansionModule,\n        DragDropModule,\n        PortalModule,\n        MatSlideToggleModule,\n    ],\n    exports: [\n        AppearancePanelMetaComponent,\n        HighlightInPreviewDirective,\n        AppearanceImageInputComponent,\n    ],\n    declarations: [\n        AppearanceComponent,\n        SelectMenuItemActionComponent,\n        AppearancePanelMetaComponent,\n        MenuItemsComponent,\n        CodeEditorModalComponent,\n        CrupdateCssThemeModalComponent,\n        CssThemeColorsPanelComponent,\n        AppearanceImageInputComponent,\n        MenusAppearancePanelComponent,\n        ThemesAppearancePanelComponent,\n        GeneralAppearancePanelComponent,\n        SeoAppearancePanelComponent,\n        CustomCodeAppearancePanelComponent,\n        HighlightInPreviewDirective,\n    ],\n    providers: [\n        {\n            provide: APPEARANCE_EDITOR_CONFIG,\n            useValue: DEFAULT_APPEARANCE_EDITOR_CONFIG,\n            multi: true,\n        },\n    ],\n})\nexport class BaseAppearanceModule {}\n","import { DOCUMENT, CommonModule } from '@angular/common';\nimport { forwardRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, ChangeDetectorRef, Optional, Attribute, NgZone, Inject, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { mixinTabIndex, mixinColor, mixinDisabled, MatCommonModule } from '@angular/material/core';\nimport { FocusMonitor } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { hasModifierKey, DOWN_ARROW, RIGHT_ARROW, UP_ARROW, LEFT_ARROW, HOME, END, PAGE_DOWN, PAGE_UP } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\nimport { normalizePassiveListenerOptions } from '@angular/cdk/platform';\nimport { Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/common';\n\nconst _c0 = [\"sliderWrapper\"];\nconst activeEventOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Visually, a 30px separation between tick marks looks best. This is very subjective but it is\n * the default separation we chose.\n */\nconst MIN_AUTO_TICK_SEPARATION = 30;\n/** The thumb gap size for a disabled slider. */\nconst DISABLED_THUMB_GAP = 7;\n/** The thumb gap size for a non-active slider at its minimum value. */\nconst MIN_VALUE_NONACTIVE_THUMB_GAP = 7;\n/** The thumb gap size for an active slider at its minimum value. */\nconst MIN_VALUE_ACTIVE_THUMB_GAP = 10;\n/**\n * Provider Expression that allows mat-slider to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)] and [formControl].\n * @docs-private\n */\nconst MAT_SLIDER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => MatSlider),\n    multi: true\n};\n/** A simple change event emitted by the MatSlider component. */\nclass MatSliderChange {\n}\n// Boilerplate for applying mixins to MatSlider.\n/** @docs-private */\nclass MatSliderBase {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}\nconst _MatSliderMixinBase = mixinTabIndex(mixinColor(mixinDisabled(MatSliderBase), 'accent'));\n/**\n * Allows users to select from a range of values by moving the slider thumb. It is similar in\n * behavior to the native `<input type=\"range\">` element.\n */\nclass MatSlider extends _MatSliderMixinBase {\n    constructor(elementRef, _focusMonitor, _changeDetectorRef, _dir, tabIndex, _ngZone, _document, _animationMode) {\n        super(elementRef);\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._ngZone = _ngZone;\n        this._animationMode = _animationMode;\n        this._invert = false;\n        this._max = 100;\n        this._min = 0;\n        this._step = 1;\n        this._thumbLabel = false;\n        this._tickInterval = 0;\n        this._value = null;\n        this._vertical = false;\n        /** Event emitted when the slider value has changed. */\n        this.change = new EventEmitter();\n        /** Event emitted when the slider thumb moves. */\n        this.input = new EventEmitter();\n        /**\n         * Emits when the raw value of the slider changes. This is here primarily\n         * to facilitate the two-way binding for the `value` input.\n         * @docs-private\n         */\n        this.valueChange = new EventEmitter();\n        /** onTouch function registered via registerOnTouch (ControlValueAccessor). */\n        this.onTouched = () => { };\n        this._percent = 0;\n        /**\n         * Whether or not the thumb is sliding.\n         * Used to determine if there should be a transition for the thumb and fill track.\n         */\n        this._isSliding = false;\n        /**\n         * Whether or not the slider is active (clicked or sliding).\n         * Used to shrink and grow the thumb as according to the Material Design spec.\n         */\n        this._isActive = false;\n        /** The size of a tick interval as a percentage of the size of the track. */\n        this._tickIntervalPercent = 0;\n        /** The dimensions of the slider. */\n        this._sliderDimensions = null;\n        this._controlValueAccessorChangeFn = () => { };\n        /** Subscription to the Directionality change EventEmitter. */\n        this._dirChangeSubscription = Subscription.EMPTY;\n        /** Called when the user has put their pointer down on the slider. */\n        this._pointerDown = (event) => {\n            // Don't do anything if the slider is disabled or the\n            // user is using anything other than the main mouse button.\n            if (this.disabled || this._isSliding || (!isTouchEvent(event) && event.button !== 0)) {\n                return;\n            }\n            this._ngZone.run(() => {\n                const oldValue = this.value;\n                const pointerPosition = getPointerPositionOnPage(event);\n                this._isSliding = true;\n                this._lastPointerEvent = event;\n                event.preventDefault();\n                this._focusHostElement();\n                this._onMouseenter(); // Simulate mouseenter in case this is a mobile device.\n                this._bindGlobalEvents(event);\n                this._focusHostElement();\n                this._updateValueFromPosition(pointerPosition);\n                this._valueOnSlideStart = oldValue;\n                // Emit a change and input event if the value changed.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                }\n            });\n        };\n        /**\n         * Called when the user has moved their pointer after\n         * starting to drag. Bound on the document level.\n         */\n        this._pointerMove = (event) => {\n            if (this._isSliding) {\n                // Prevent the slide from selecting anything else.\n                event.preventDefault();\n                const oldValue = this.value;\n                this._lastPointerEvent = event;\n                this._updateValueFromPosition(getPointerPositionOnPage(event));\n                // Native range elements always emit `input` events when the value changed while sliding.\n                if (oldValue != this.value) {\n                    this._emitInputEvent();\n                }\n            }\n        };\n        /** Called when the user has lifted their pointer. Bound on the document level. */\n        this._pointerUp = (event) => {\n            if (this._isSliding) {\n                event.preventDefault();\n                this._removeGlobalEvents();\n                this._isSliding = false;\n                if (this._valueOnSlideStart != this.value && !this.disabled) {\n                    this._emitChangeEvent();\n                }\n                this._valueOnSlideStart = this._lastPointerEvent = null;\n            }\n        };\n        /** Called when the window has lost focus. */\n        this._windowBlur = () => {\n            // If the window is blurred while dragging we need to stop dragging because the\n            // browser won't dispatch the `mouseup` and `touchend` events anymore.\n            if (this._lastPointerEvent) {\n                this._pointerUp(this._lastPointerEvent);\n            }\n        };\n        this._document = _document;\n        this.tabIndex = parseInt(tabIndex) || 0;\n        _ngZone.runOutsideAngular(() => {\n            const element = elementRef.nativeElement;\n            element.addEventListener('mousedown', this._pointerDown, activeEventOptions);\n            element.addEventListener('touchstart', this._pointerDown, activeEventOptions);\n        });\n    }\n    /** Whether the slider is inverted. */\n    get invert() { return this._invert; }\n    set invert(value) {\n        this._invert = coerceBooleanProperty(value);\n    }\n    /** The maximum value that the slider can have. */\n    get max() { return this._max; }\n    set max(v) {\n        this._max = coerceNumberProperty(v, this._max);\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The minimum value that the slider can have. */\n    get min() { return this._min; }\n    set min(v) {\n        this._min = coerceNumberProperty(v, this._min);\n        // If the value wasn't explicitly set by the user, set it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        this._percent = this._calculatePercentage(this._value);\n        // Since this also modifies the percentage, we need to let the change detection know.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** The values at which the thumb will snap. */\n    get step() { return this._step; }\n    set step(v) {\n        this._step = coerceNumberProperty(v, this._step);\n        if (this._step % 1 !== 0) {\n            this._roundToDecimal = this._step.toString().split('.').pop().length;\n        }\n        // Since this could modify the label, we need to notify the change detection.\n        this._changeDetectorRef.markForCheck();\n    }\n    /** Whether or not to show the thumb label. */\n    get thumbLabel() { return this._thumbLabel; }\n    set thumbLabel(value) { this._thumbLabel = coerceBooleanProperty(value); }\n    /**\n     * How often to show ticks. Relative to the step so that a tick always appears on a step.\n     * Ex: Tick interval of 4 with a step of 3 will draw a tick every 4 steps (every 12 values).\n     */\n    get tickInterval() { return this._tickInterval; }\n    set tickInterval(value) {\n        if (value === 'auto') {\n            this._tickInterval = 'auto';\n        }\n        else if (typeof value === 'number' || typeof value === 'string') {\n            this._tickInterval = coerceNumberProperty(value, this._tickInterval);\n        }\n        else {\n            this._tickInterval = 0;\n        }\n    }\n    /** Value of the slider. */\n    get value() {\n        // If the value needs to be read and it is still uninitialized, initialize it to the min.\n        if (this._value === null) {\n            this.value = this._min;\n        }\n        return this._value;\n    }\n    set value(v) {\n        if (v !== this._value) {\n            let value = coerceNumberProperty(v);\n            // While incrementing by a decimal we can end up with values like 33.300000000000004.\n            // Truncate it to ensure that it matches the label and to make it easier to work with.\n            if (this._roundToDecimal) {\n                value = parseFloat(value.toFixed(this._roundToDecimal));\n            }\n            this._value = value;\n            this._percent = this._calculatePercentage(this._value);\n            // Since this also modifies the percentage, we need to let the change detection know.\n            this._changeDetectorRef.markForCheck();\n        }\n    }\n    /** Whether the slider is vertical. */\n    get vertical() { return this._vertical; }\n    set vertical(value) {\n        this._vertical = coerceBooleanProperty(value);\n    }\n    /** The value to be used for display purposes. */\n    get displayValue() {\n        if (this.displayWith) {\n            // Value is never null but since setters and getters cannot have\n            // different types, the value getter is also typed to return null.\n            return this.displayWith(this.value);\n        }\n        // Note that this could be improved further by rounding something like 0.999 to 1 or\n        // 0.899 to 0.9, however it is very performance sensitive, because it gets called on\n        // every change detection cycle.\n        if (this._roundToDecimal && this.value && this.value % 1 !== 0) {\n            return this.value.toFixed(this._roundToDecimal);\n        }\n        return this.value || 0;\n    }\n    /** set focus to the host element */\n    focus(options) {\n        this._focusHostElement(options);\n    }\n    /** blur the host element */\n    blur() {\n        this._blurHostElement();\n    }\n    /** The percentage of the slider that coincides with the value. */\n    get percent() { return this._clamp(this._percent); }\n    /**\n     * Whether the axis of the slider is inverted.\n     * (i.e. whether moving the thumb in the positive x or y direction decreases the slider's value).\n     */\n    _shouldInvertAxis() {\n        // Standard non-inverted mode for a vertical slider should be dragging the thumb from bottom to\n        // top. However from a y-axis standpoint this is inverted.\n        return this.vertical ? !this.invert : this.invert;\n    }\n    /** Whether the slider is at its minimum value. */\n    _isMinValue() {\n        return this.percent === 0;\n    }\n    /**\n     * The amount of space to leave between the slider thumb and the track fill & track background\n     * elements.\n     */\n    _getThumbGap() {\n        if (this.disabled) {\n            return DISABLED_THUMB_GAP;\n        }\n        if (this._isMinValue() && !this.thumbLabel) {\n            return this._isActive ? MIN_VALUE_ACTIVE_THUMB_GAP : MIN_VALUE_NONACTIVE_THUMB_GAP;\n        }\n        return 0;\n    }\n    /** CSS styles for the track background element. */\n    _getTrackBackgroundStyles() {\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${1 - this.percent}, 1` : `${1 - this.percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '-' : '';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`\n        };\n    }\n    /** CSS styles for the track fill element. */\n    _getTrackFillStyles() {\n        const percent = this.percent;\n        const axis = this.vertical ? 'Y' : 'X';\n        const scale = this.vertical ? `1, ${percent}, 1` : `${percent}, 1, 1`;\n        const sign = this._shouldInvertMouseCoords() ? '' : '-';\n        return {\n            // scale3d avoids some rendering issues in Chrome. See #12071.\n            transform: `translate${axis}(${sign}${this._getThumbGap()}px) scale3d(${scale})`,\n            // iOS Safari has a bug where it won't re-render elements which start of as `scale(0)` until\n            // something forces a style recalculation on it. Since we'll end up with `scale(0)` when\n            // the value of the slider is 0, we can easily get into this situation. We force a\n            // recalculation by changing the element's `display` when it goes from 0 to any other value.\n            display: percent === 0 ? 'none' : ''\n        };\n    }\n    /** CSS styles for the ticks container element. */\n    _getTicksContainerStyles() {\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the ticks container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '' : '-';\n        let offset = this._tickIntervalPercent / 2 * 100;\n        return {\n            'transform': `translate${axis}(${sign}${offset}%)`\n        };\n    }\n    /** CSS styles for the ticks element. */\n    _getTicksStyles() {\n        let tickSize = this._tickIntervalPercent * 100;\n        let backgroundSize = this.vertical ? `2px ${tickSize}%` : `${tickSize}% 2px`;\n        let axis = this.vertical ? 'Y' : 'X';\n        // Depending on the direction we pushed the ticks container, push the ticks the opposite\n        // direction to re-center them but clip off the end edge. In RTL languages we need to flip the\n        // ticks 180 degrees so we're really cutting off the end edge abd not the start.\n        let sign = !this.vertical && this._getDirection() == 'rtl' ? '-' : '';\n        let rotate = !this.vertical && this._getDirection() == 'rtl' ? ' rotate(180deg)' : '';\n        let styles = {\n            'backgroundSize': backgroundSize,\n            // Without translateZ ticks sometimes jitter as the slider moves on Chrome & Firefox.\n            'transform': `translateZ(0) translate${axis}(${sign}${tickSize / 2}%)${rotate}`\n        };\n        if (this._isMinValue() && this._getThumbGap()) {\n            const shouldInvertAxis = this._shouldInvertAxis();\n            let side;\n            if (this.vertical) {\n                side = shouldInvertAxis ? 'Bottom' : 'Top';\n            }\n            else {\n                side = shouldInvertAxis ? 'Right' : 'Left';\n            }\n            styles[`padding${side}`] = `${this._getThumbGap()}px`;\n        }\n        return styles;\n    }\n    _getThumbContainerStyles() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        let axis = this.vertical ? 'Y' : 'X';\n        // For a horizontal slider in RTL languages we push the thumb container off the left edge\n        // instead of the right edge to avoid causing a horizontal scrollbar to appear.\n        let invertOffset = (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n        let offset = (invertOffset ? this.percent : 1 - this.percent) * 100;\n        return {\n            'transform': `translate${axis}(-${offset}%)`\n        };\n    }\n    /**\n     * Whether mouse events should be converted to a slider position by calculating their distance\n     * from the right or bottom edge of the slider as opposed to the top or left.\n     */\n    _shouldInvertMouseCoords() {\n        const shouldInvertAxis = this._shouldInvertAxis();\n        return (this._getDirection() == 'rtl' && !this.vertical) ? !shouldInvertAxis : shouldInvertAxis;\n    }\n    /** The language direction for this slider element. */\n    _getDirection() {\n        return (this._dir && this._dir.value == 'rtl') ? 'rtl' : 'ltr';\n    }\n    ngAfterViewInit() {\n        this._focusMonitor\n            .monitor(this._elementRef, true)\n            .subscribe((origin) => {\n            this._isActive = !!origin && origin !== 'keyboard';\n            this._changeDetectorRef.detectChanges();\n        });\n        if (this._dir) {\n            this._dirChangeSubscription = this._dir.change.subscribe(() => {\n                this._changeDetectorRef.markForCheck();\n            });\n        }\n    }\n    ngOnDestroy() {\n        const element = this._elementRef.nativeElement;\n        element.removeEventListener('mousedown', this._pointerDown, activeEventOptions);\n        element.removeEventListener('touchstart', this._pointerDown, activeEventOptions);\n        this._lastPointerEvent = null;\n        this._removeGlobalEvents();\n        this._focusMonitor.stopMonitoring(this._elementRef);\n        this._dirChangeSubscription.unsubscribe();\n    }\n    _onMouseenter() {\n        if (this.disabled) {\n            return;\n        }\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onFocus() {\n        // We save the dimensions of the slider here so we can use them to update the spacing of the\n        // ticks and determine where on the slider click and slide events happen.\n        this._sliderDimensions = this._getSliderDimensions();\n        this._updateTickIntervalPercent();\n    }\n    _onBlur() {\n        this.onTouched();\n    }\n    _onKeydown(event) {\n        if (this.disabled || hasModifierKey(event)) {\n            return;\n        }\n        const oldValue = this.value;\n        switch (event.keyCode) {\n            case PAGE_UP:\n                this._increment(10);\n                break;\n            case PAGE_DOWN:\n                this._increment(-10);\n                break;\n            case END:\n                this.value = this.max;\n                break;\n            case HOME:\n                this.value = this.min;\n                break;\n            case LEFT_ARROW:\n                // NOTE: For a sighted user it would make more sense that when they press an arrow key on an\n                // inverted slider the thumb moves in that direction. However for a blind user, nothing\n                // about the slider indicates that it is inverted. They will expect left to be decrement,\n                // regardless of how it appears on the screen. For speakers ofRTL languages, they probably\n                // expect left to mean increment. Therefore we flip the meaning of the side arrow keys for\n                // RTL. For inverted sliders we prefer a good a11y experience to having it \"look right\" for\n                // sighted users, therefore we do not swap the meaning.\n                this._increment(this._getDirection() == 'rtl' ? 1 : -1);\n                break;\n            case UP_ARROW:\n                this._increment(1);\n                break;\n            case RIGHT_ARROW:\n                // See comment on LEFT_ARROW about the conditions under which we flip the meaning.\n                this._increment(this._getDirection() == 'rtl' ? -1 : 1);\n                break;\n            case DOWN_ARROW:\n                this._increment(-1);\n                break;\n            default:\n                // Return if the key is not one that we explicitly handle to avoid calling preventDefault on\n                // it.\n                return;\n        }\n        if (oldValue != this.value) {\n            this._emitInputEvent();\n            this._emitChangeEvent();\n        }\n        this._isSliding = true;\n        event.preventDefault();\n    }\n    _onKeyup() {\n        this._isSliding = false;\n    }\n    /** Use defaultView of injected document if available or fallback to global window reference */\n    _getWindow() {\n        return this._document.defaultView || window;\n    }\n    /**\n     * Binds our global move and end events. They're bound at the document level and only while\n     * dragging so that the user doesn't have to keep their pointer exactly over the slider\n     * as they're swiping across the screen.\n     */\n    _bindGlobalEvents(triggerEvent) {\n        // Note that we bind the events to the `document`, because it allows us to capture\n        // drag cancel events where the user's pointer is outside the browser window.\n        const document = this._document;\n        const isTouch = isTouchEvent(triggerEvent);\n        const moveEventName = isTouch ? 'touchmove' : 'mousemove';\n        const endEventName = isTouch ? 'touchend' : 'mouseup';\n        document.addEventListener(moveEventName, this._pointerMove, activeEventOptions);\n        document.addEventListener(endEventName, this._pointerUp, activeEventOptions);\n        if (isTouch) {\n            document.addEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        }\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.addEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Removes any global event listeners that we may have added. */\n    _removeGlobalEvents() {\n        const document = this._document;\n        document.removeEventListener('mousemove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('mouseup', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchmove', this._pointerMove, activeEventOptions);\n        document.removeEventListener('touchend', this._pointerUp, activeEventOptions);\n        document.removeEventListener('touchcancel', this._pointerUp, activeEventOptions);\n        const window = this._getWindow();\n        if (typeof window !== 'undefined' && window) {\n            window.removeEventListener('blur', this._windowBlur);\n        }\n    }\n    /** Increments the slider by the given number of steps (negative number decrements). */\n    _increment(numSteps) {\n        this.value = this._clamp((this.value || 0) + this.step * numSteps, this.min, this.max);\n    }\n    /** Calculate the new value from the new physical location. The value will always be snapped. */\n    _updateValueFromPosition(pos) {\n        if (!this._sliderDimensions) {\n            return;\n        }\n        let offset = this.vertical ? this._sliderDimensions.top : this._sliderDimensions.left;\n        let size = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n        let posComponent = this.vertical ? pos.y : pos.x;\n        // The exact value is calculated from the event and used to find the closest snap value.\n        let percent = this._clamp((posComponent - offset) / size);\n        if (this._shouldInvertMouseCoords()) {\n            percent = 1 - percent;\n        }\n        // Since the steps may not divide cleanly into the max value, if the user\n        // slid to 0 or 100 percent, we jump to the min/max value. This approach\n        // is slightly more intuitive than using `Math.ceil` below, because it\n        // follows the user's pointer closer.\n        if (percent === 0) {\n            this.value = this.min;\n        }\n        else if (percent === 1) {\n            this.value = this.max;\n        }\n        else {\n            const exactValue = this._calculateValue(percent);\n            // This calculation finds the closest step by finding the closest\n            // whole number divisible by the step relative to the min.\n            const closestValue = Math.round((exactValue - this.min) / this.step) * this.step + this.min;\n            // The value needs to snap to the min and max.\n            this.value = this._clamp(closestValue, this.min, this.max);\n        }\n    }\n    /** Emits a change event if the current value is different from the last emitted value. */\n    _emitChangeEvent() {\n        this._controlValueAccessorChangeFn(this.value);\n        this.valueChange.emit(this.value);\n        this.change.emit(this._createChangeEvent());\n    }\n    /** Emits an input event when the current value is different from the last emitted value. */\n    _emitInputEvent() {\n        this.input.emit(this._createChangeEvent());\n    }\n    /** Updates the amount of space between ticks as a percentage of the width of the slider. */\n    _updateTickIntervalPercent() {\n        if (!this.tickInterval || !this._sliderDimensions) {\n            return;\n        }\n        if (this.tickInterval == 'auto') {\n            let trackSize = this.vertical ? this._sliderDimensions.height : this._sliderDimensions.width;\n            let pixelsPerStep = trackSize * this.step / (this.max - this.min);\n            let stepsPerTick = Math.ceil(MIN_AUTO_TICK_SEPARATION / pixelsPerStep);\n            let pixelsPerTick = stepsPerTick * this.step;\n            this._tickIntervalPercent = pixelsPerTick / trackSize;\n        }\n        else {\n            this._tickIntervalPercent = this.tickInterval * this.step / (this.max - this.min);\n        }\n    }\n    /** Creates a slider change object from the specified value. */\n    _createChangeEvent(value = this.value) {\n        let event = new MatSliderChange();\n        event.source = this;\n        event.value = value;\n        return event;\n    }\n    /** Calculates the percentage of the slider that a value is. */\n    _calculatePercentage(value) {\n        return ((value || 0) - this.min) / (this.max - this.min);\n    }\n    /** Calculates the value a percentage of the slider corresponds to. */\n    _calculateValue(percentage) {\n        return this.min + percentage * (this.max - this.min);\n    }\n    /** Return a number between two numbers. */\n    _clamp(value, min = 0, max = 1) {\n        return Math.max(min, Math.min(value, max));\n    }\n    /**\n     * Get the bounding client rect of the slider track element.\n     * The track is used rather than the native element to ignore the extra space that the thumb can\n     * take up.\n     */\n    _getSliderDimensions() {\n        return this._sliderWrapper ? this._sliderWrapper.nativeElement.getBoundingClientRect() : null;\n    }\n    /**\n     * Focuses the native element.\n     * Currently only used to allow a blur event to fire but will be used with keyboard input later.\n     */\n    _focusHostElement(options) {\n        this._elementRef.nativeElement.focus(options);\n    }\n    /** Blurs the native element. */\n    _blurHostElement() {\n        this._elementRef.nativeElement.blur();\n    }\n    /**\n     * Sets the model value. Implemented as part of ControlValueAccessor.\n     * @param value\n     */\n    writeValue(value) {\n        this.value = value;\n    }\n    /**\n     * Registers a callback to be triggered when the value has changed.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnChange(fn) {\n        this._controlValueAccessorChangeFn = fn;\n    }\n    /**\n     * Registers a callback to be triggered when the component is touched.\n     * Implemented as part of ControlValueAccessor.\n     * @param fn Callback to be registered.\n     */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /**\n     * Sets whether the component should be disabled.\n     * Implemented as part of ControlValueAccessor.\n     * @param isDisabled\n     */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n    }\n}\nMatSlider.ɵfac = function MatSlider_Factory(t) { return new (t || MatSlider)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8), ɵngcc0.ɵɵinjectAttribute('tabindex'), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8)); };\nMatSlider.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatSlider, selectors: [[\"mat-slider\"]], viewQuery: function MatSlider_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 1);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._sliderWrapper = _t.first);\n    } }, hostAttrs: [\"role\", \"slider\", 1, \"mat-slider\", \"mat-focus-indicator\"], hostVars: 28, hostBindings: function MatSlider_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function MatSlider_focus_HostBindingHandler() { return ctx._onFocus(); })(\"blur\", function MatSlider_blur_HostBindingHandler() { return ctx._onBlur(); })(\"keydown\", function MatSlider_keydown_HostBindingHandler($event) { return ctx._onKeydown($event); })(\"keyup\", function MatSlider_keyup_HostBindingHandler() { return ctx._onKeyup(); })(\"mouseenter\", function MatSlider_mouseenter_HostBindingHandler() { return ctx._onMouseenter(); })(\"selectstart\", function MatSlider_selectstart_HostBindingHandler($event) { return $event.preventDefault(); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"tabIndex\", ctx.tabIndex);\n        ɵngcc0.ɵɵattribute(\"aria-disabled\", ctx.disabled)(\"aria-valuemax\", ctx.max)(\"aria-valuemin\", ctx.min)(\"aria-valuenow\", ctx.value)(\"aria-orientation\", ctx.vertical ? \"vertical\" : \"horizontal\");\n        ɵngcc0.ɵɵclassProp(\"mat-slider-disabled\", ctx.disabled)(\"mat-slider-has-ticks\", ctx.tickInterval)(\"mat-slider-horizontal\", !ctx.vertical)(\"mat-slider-axis-inverted\", ctx._shouldInvertAxis())(\"mat-slider-invert-mouse-coords\", ctx._shouldInvertMouseCoords())(\"mat-slider-sliding\", ctx._isSliding)(\"mat-slider-thumb-label-showing\", ctx.thumbLabel)(\"mat-slider-vertical\", ctx.vertical)(\"mat-slider-min-value\", ctx._isMinValue())(\"mat-slider-hide-last-tick\", ctx.disabled || ctx._isMinValue() && ctx._getThumbGap() && ctx._shouldInvertAxis())(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\");\n    } }, inputs: { disabled: \"disabled\", color: \"color\", tabIndex: \"tabIndex\", invert: \"invert\", max: \"max\", min: \"min\", value: \"value\", step: \"step\", thumbLabel: \"thumbLabel\", tickInterval: \"tickInterval\", vertical: \"vertical\", displayWith: \"displayWith\" }, outputs: { change: \"change\", input: \"input\", valueChange: \"valueChange\" }, exportAs: [\"matSlider\"], features: [ɵngcc0.ɵɵProvidersFeature([MAT_SLIDER_VALUE_ACCESSOR]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 13, vars: 6, consts: [[1, \"mat-slider-wrapper\"], [\"sliderWrapper\", \"\"], [1, \"mat-slider-track-wrapper\"], [1, \"mat-slider-track-background\", 3, \"ngStyle\"], [1, \"mat-slider-track-fill\", 3, \"ngStyle\"], [1, \"mat-slider-ticks-container\", 3, \"ngStyle\"], [1, \"mat-slider-ticks\", 3, \"ngStyle\"], [1, \"mat-slider-thumb-container\", 3, \"ngStyle\"], [1, \"mat-slider-focus-ring\"], [1, \"mat-slider-thumb\"], [1, \"mat-slider-thumb-label\"], [1, \"mat-slider-thumb-label-text\"]], template: function MatSlider_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelement(3, \"div\", 3);\n        ɵngcc0.ɵɵelement(4, \"div\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵelement(6, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 7);\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelement(9, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(11, \"span\", 11);\n        ɵngcc0.ɵɵtext(12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackBackgroundStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTrackFillStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksContainerStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getTicksStyles());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngStyle\", ctx._getThumbContainerStyles());\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵtextInterpolate(ctx.displayValue);\n    } }, directives: [ɵngcc3.NgStyle], styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"], encapsulation: 2, changeDetection: 0 });\nMatSlider.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: String, decorators: [{ type: Attribute, args: ['tabindex',] }] },\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] }\n];\nMatSlider.propDecorators = {\n    invert: [{ type: Input }],\n    max: [{ type: Input }],\n    min: [{ type: Input }],\n    step: [{ type: Input }],\n    thumbLabel: [{ type: Input }],\n    tickInterval: [{ type: Input }],\n    value: [{ type: Input }],\n    displayWith: [{ type: Input }],\n    vertical: [{ type: Input }],\n    change: [{ type: Output }],\n    input: [{ type: Output }],\n    valueChange: [{ type: Output }],\n    _sliderWrapper: [{ type: ViewChild, args: ['sliderWrapper',] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSlider, [{\n        type: Component,\n        args: [{\n                selector: 'mat-slider',\n                exportAs: 'matSlider',\n                providers: [MAT_SLIDER_VALUE_ACCESSOR],\n                host: {\n                    '(focus)': '_onFocus()',\n                    '(blur)': '_onBlur()',\n                    '(keydown)': '_onKeydown($event)',\n                    '(keyup)': '_onKeyup()',\n                    '(mouseenter)': '_onMouseenter()',\n                    // On Safari starting to slide temporarily triggers text selection mode which\n                    // show the wrong cursor. We prevent it by stopping the `selectstart` event.\n                    '(selectstart)': '$event.preventDefault()',\n                    'class': 'mat-slider mat-focus-indicator',\n                    'role': 'slider',\n                    '[tabIndex]': 'tabIndex',\n                    '[attr.aria-disabled]': 'disabled',\n                    '[attr.aria-valuemax]': 'max',\n                    '[attr.aria-valuemin]': 'min',\n                    '[attr.aria-valuenow]': 'value',\n                    '[attr.aria-orientation]': 'vertical ? \"vertical\" : \"horizontal\"',\n                    '[class.mat-slider-disabled]': 'disabled',\n                    '[class.mat-slider-has-ticks]': 'tickInterval',\n                    '[class.mat-slider-horizontal]': '!vertical',\n                    '[class.mat-slider-axis-inverted]': '_shouldInvertAxis()',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if mouse coordinates need to be inverted.\n                    '[class.mat-slider-invert-mouse-coords]': '_shouldInvertMouseCoords()',\n                    '[class.mat-slider-sliding]': '_isSliding',\n                    '[class.mat-slider-thumb-label-showing]': 'thumbLabel',\n                    '[class.mat-slider-vertical]': 'vertical',\n                    '[class.mat-slider-min-value]': '_isMinValue()',\n                    '[class.mat-slider-hide-last-tick]': 'disabled || _isMinValue() && _getThumbGap() && _shouldInvertAxis()',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"'\n                },\n                template: \"<div class=\\\"mat-slider-wrapper\\\" #sliderWrapper>\\n  <div class=\\\"mat-slider-track-wrapper\\\">\\n    <div class=\\\"mat-slider-track-background\\\" [ngStyle]=\\\"_getTrackBackgroundStyles()\\\"></div>\\n    <div class=\\\"mat-slider-track-fill\\\" [ngStyle]=\\\"_getTrackFillStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-ticks-container\\\" [ngStyle]=\\\"_getTicksContainerStyles()\\\">\\n    <div class=\\\"mat-slider-ticks\\\" [ngStyle]=\\\"_getTicksStyles()\\\"></div>\\n  </div>\\n  <div class=\\\"mat-slider-thumb-container\\\" [ngStyle]=\\\"_getThumbContainerStyles()\\\">\\n    <div class=\\\"mat-slider-focus-ring\\\"></div>\\n    <div class=\\\"mat-slider-thumb\\\"></div>\\n    <div class=\\\"mat-slider-thumb-label\\\">\\n      <span class=\\\"mat-slider-thumb-label-text\\\">{{displayValue}}</span>\\n    </div>\\n  </div>\\n</div>\\n\",\n                inputs: ['disabled', 'color', 'tabIndex'],\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                styles: [\".mat-slider{display:inline-block;position:relative;box-sizing:border-box;padding:8px;outline:none;vertical-align:middle}.mat-slider:not(.mat-slider-disabled):active,.mat-slider.mat-slider-sliding:not(.mat-slider-disabled){cursor:-webkit-grabbing;cursor:grabbing}.mat-slider-wrapper{position:absolute}.mat-slider-track-wrapper{position:absolute;top:0;left:0;overflow:hidden}.mat-slider-track-fill{position:absolute;transform-origin:0 0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-track-background{position:absolute;transform-origin:100% 100%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-ticks-container{position:absolute;left:0;top:0;overflow:hidden}.mat-slider-ticks{background-repeat:repeat;background-clip:content-box;box-sizing:border-box;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-container{position:absolute;z-index:1;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-focus-ring{position:absolute;width:30px;height:30px;border-radius:50%;transform:scale(0);opacity:0;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider.cdk-keyboard-focused .mat-slider-focus-ring,.mat-slider.cdk-program-focused .mat-slider-focus-ring{transform:scale(1);opacity:1}.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb-label,.mat-slider:not(.mat-slider-disabled):not(.mat-slider-sliding) .mat-slider-thumb{cursor:-webkit-grab;cursor:grab}.mat-slider-thumb{position:absolute;right:-10px;bottom:-10px;box-sizing:border-box;width:20px;height:20px;border:3px solid transparent;border-radius:50%;transform:scale(0.7);transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-thumb-label{display:none;align-items:center;justify-content:center;position:absolute;width:28px;height:28px;border-radius:50%;transition:transform 400ms cubic-bezier(0.25, 0.8, 0.25, 1),border-radius 400ms cubic-bezier(0.25, 0.8, 0.25, 1),background-color 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.cdk-high-contrast-active .mat-slider-thumb-label{outline:solid 1px}.mat-slider-thumb-label-text{z-index:1;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-sliding .mat-slider-track-fill,.mat-slider-sliding .mat-slider-track-background,.mat-slider-sliding .mat-slider-thumb-container{transition-duration:0ms}.mat-slider-has-ticks .mat-slider-wrapper::after{content:\\\"\\\";position:absolute;border-width:0;border-style:solid;opacity:0;transition:opacity 400ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after,.mat-slider-has-ticks:hover:not(.mat-slider-hide-last-tick) .mat-slider-wrapper::after{opacity:1}.mat-slider-has-ticks.cdk-focused:not(.mat-slider-disabled) .mat-slider-ticks,.mat-slider-has-ticks:hover:not(.mat-slider-disabled) .mat-slider-ticks{opacity:1}.mat-slider-thumb-label-showing .mat-slider-focus-ring{display:none}.mat-slider-thumb-label-showing .mat-slider-thumb-label{display:flex}.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:100% 100%}.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:0 0}.mat-slider:not(.mat-slider-disabled).cdk-focused.mat-slider-thumb-label-showing .mat-slider-thumb{transform:scale(0)}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label{border-radius:50% 50% 0}.mat-slider:not(.mat-slider-disabled).cdk-focused .mat-slider-thumb-label-text{opacity:1}.mat-slider:not(.mat-slider-disabled).cdk-mouse-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-touch-focused .mat-slider-thumb,.mat-slider:not(.mat-slider-disabled).cdk-program-focused .mat-slider-thumb{border-width:2px;transform:scale(1)}.mat-slider-disabled .mat-slider-focus-ring{transform:scale(0);opacity:0}.mat-slider-disabled .mat-slider-thumb{border-width:4px;transform:scale(0.5)}.mat-slider-disabled .mat-slider-thumb-label{display:none}.mat-slider-horizontal{height:48px;min-width:128px}.mat-slider-horizontal .mat-slider-wrapper{height:2px;top:23px;left:8px;right:8px}.mat-slider-horizontal .mat-slider-wrapper::after{height:2px;border-left-width:2px;right:0;top:0}.mat-slider-horizontal .mat-slider-track-wrapper{height:2px;width:100%}.mat-slider-horizontal .mat-slider-track-fill{height:2px;width:100%;transform:scaleX(0)}.mat-slider-horizontal .mat-slider-track-background{height:2px;width:100%;transform:scaleX(1)}.mat-slider-horizontal .mat-slider-ticks-container{height:2px;width:100%}.cdk-high-contrast-active .mat-slider-horizontal .mat-slider-ticks-container{height:0;outline:solid 2px;top:1px}.mat-slider-horizontal .mat-slider-ticks{height:2px;width:100%}.mat-slider-horizontal .mat-slider-thumb-container{width:100%;height:0;top:50%}.mat-slider-horizontal .mat-slider-focus-ring{top:-15px;right:-15px}.mat-slider-horizontal .mat-slider-thumb-label{right:-14px;top:-40px;transform:translateY(26px) scale(0.01) rotate(45deg)}.mat-slider-horizontal .mat-slider-thumb-label-text{transform:rotate(-45deg)}.mat-slider-horizontal.cdk-focused .mat-slider-thumb-label{transform:rotate(45deg)}.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label,.cdk-high-contrast-active .mat-slider-horizontal.cdk-focused .mat-slider-thumb-label-text{transform:none}.mat-slider-vertical{width:48px;min-height:128px}.mat-slider-vertical .mat-slider-wrapper{width:2px;top:8px;bottom:8px;left:23px}.mat-slider-vertical .mat-slider-wrapper::after{width:2px;border-top-width:2px;bottom:0;left:0}.mat-slider-vertical .mat-slider-track-wrapper{height:100%;width:2px}.mat-slider-vertical .mat-slider-track-fill{height:100%;width:2px;transform:scaleY(0)}.mat-slider-vertical .mat-slider-track-background{height:100%;width:2px;transform:scaleY(1)}.mat-slider-vertical .mat-slider-ticks-container{width:2px;height:100%}.cdk-high-contrast-active .mat-slider-vertical .mat-slider-ticks-container{width:0;outline:solid 2px;left:1px}.mat-slider-vertical .mat-slider-focus-ring{bottom:-15px;left:-15px}.mat-slider-vertical .mat-slider-ticks{width:2px;height:100%}.mat-slider-vertical .mat-slider-thumb-container{height:100%;width:0;left:50%}.mat-slider-vertical .mat-slider-thumb{-webkit-backface-visibility:hidden;backface-visibility:hidden}.mat-slider-vertical .mat-slider-thumb-label{bottom:-14px;left:-40px;transform:translateX(26px) scale(0.01) rotate(-45deg)}.mat-slider-vertical .mat-slider-thumb-label-text{transform:rotate(45deg)}.mat-slider-vertical.cdk-focused .mat-slider-thumb-label{transform:rotate(-45deg)}[dir=rtl] .mat-slider-wrapper::after{left:0;right:auto}[dir=rtl] .mat-slider-horizontal .mat-slider-track-fill{transform-origin:100% 100%}[dir=rtl] .mat-slider-horizontal .mat-slider-track-background{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-fill{transform-origin:0 0}[dir=rtl] .mat-slider-horizontal.mat-slider-axis-inverted .mat-slider-track-background{transform-origin:100% 100%}.mat-slider._mat-animation-noopable .mat-slider-track-fill,.mat-slider._mat-animation-noopable .mat-slider-track-background,.mat-slider._mat-animation-noopable .mat-slider-ticks,.mat-slider._mat-animation-noopable .mat-slider-thumb-container,.mat-slider._mat-animation-noopable .mat-slider-focus-ring,.mat-slider._mat-animation-noopable .mat-slider-thumb,.mat-slider._mat-animation-noopable .mat-slider-thumb-label,.mat-slider._mat-animation-noopable .mat-slider-thumb-label-text,.mat-slider._mat-animation-noopable .mat-slider-has-ticks .mat-slider-wrapper::after{transition:none}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }, { type: String, decorators: [{\n                type: Attribute,\n                args: ['tabindex']\n            }] }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }]; }, { change: [{\n            type: Output\n        }], input: [{\n            type: Output\n        }], valueChange: [{\n            type: Output\n        }], invert: [{\n            type: Input\n        }], max: [{\n            type: Input\n        }], min: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }], step: [{\n            type: Input\n        }], thumbLabel: [{\n            type: Input\n        }], tickInterval: [{\n            type: Input\n        }], vertical: [{\n            type: Input\n        }], displayWith: [{\n            type: Input\n        }], _sliderWrapper: [{\n            type: ViewChild,\n            args: ['sliderWrapper']\n        }] }); })();\n/** Returns whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the coordinates of a touch or mouse event relative to the viewport. */\nfunction getPointerPositionOnPage(event) {\n    // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n    const point = isTouchEvent(event) ? (event.touches[0] || event.changedTouches[0]) : event;\n    return { x: point.clientX, y: point.clientY };\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSliderModule {\n}\nMatSliderModule.ɵfac = function MatSliderModule_Factory(t) { return new (t || MatSliderModule)(); };\nMatSliderModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatSliderModule });\nMatSliderModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ imports: [[CommonModule, MatCommonModule], MatCommonModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatSliderModule, { declarations: function () { return [MatSlider]; }, imports: function () { return [CommonModule, MatCommonModule]; }, exports: function () { return [MatSlider, MatCommonModule]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSliderModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, MatCommonModule],\n                exports: [MatSlider, MatCommonModule],\n                declarations: [MatSlider]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_SLIDER_VALUE_ACCESSOR, MatSlider, MatSliderChange, MatSliderModule };\n\n//# sourceMappingURL=slider.js.map","<appearance-panel-meta [path]=\"path$ | async\" (back)=\"openPreviousPanel()\"></appearance-panel-meta>\n\n<div class=\"appearance-panel-content\">\n    <ng-container *ngIf=\"selectedSubpanel$ | async as selectedSubpanel; else mainPanel\">\n        <div [ngSwitch]=\"selectedSubpanel\">\n            <ng-container *ngSwitchCase=\"'primaryFeatures'\">\n                <div *ngFor=\"let group of primaryArray().controls; index as index\" [formGroup]=\"group\"\n                     class=\"many-inputs feature-group\">\n                    <div class=\"feature-group-header\">\n                        <div class=\"text\">{{'Feature' | trans}} #{{index + 1}}</div>\n                        <button mat-icon-button color=\"warn\" (click)=\"removeFeature('primary', index)\">\n                            <mat-icon svgIcon=\"close\"></mat-icon>\n                        </button>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'primary.' + index + '.title'\" trans>Title</label>\n                        <input type=\"text\" [id]=\"'primary.' + index + '.title'\" formControlName=\"title\"\n                               [placeholder]=\"defaultValue('primaryFeatures.' + index + '.title')\"\n                               highlightInPreview=\".inline-feature:nth-child({{index + 1}}) h3\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'primary.' + index + '.subtitle'\" trans>Subtitle</label>\n                        <input type=\"text\" [id]=\"'primary.' + index + '.subtitle'\" formControlName=\"subtitle\"\n                               [placeholder]=\"defaultValue('primaryFeatures.' + index + '.subtitle')\"\n                               highlightInPreview=\".inline-feature:nth-child({{index + 1}}) p\" required>\n                    </div>\n                    <appearance-image-input [defaultValue]=\"defaultValue('primaryFeatures.' + index + '.image')\"\n                                            formControlName=\"image\"\n                                            diskPrefix=\"homepage\"\n                                            highlightInPreview=\".inline-feature:nth-child({{index + 1}}) img\" trans>\n                        Image\n                    </appearance-image-input>\n                </div>\n                <button mat-flat-button color=\"accent\" *ngIf=\"primaryArray().length < 3\" (click)=\"addFeature('primary')\" trans>Add</button>\n            </ng-container>\n            <ng-container *ngSwitchCase=\"'secondaryFeatures'\">\n                <div *ngFor=\"let group of secondaryArray().controls; index as index\" [formGroup]=\"group\"\n                     class=\"many-inputs feature-group\">\n                    <div class=\"feature-group-header\">\n                        <div class=\"text\">{{'Feature' | trans}} #{{index + 1}}</div>\n                        <button mat-icon-button color=\"warn\" (click)=\"removeFeature('secondary', index)\">\n                            <mat-icon svgIcon=\"close\"></mat-icon>\n                        </button>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'secondary.' + index + '.title'\" trans>Title</label>\n                        <input type=\"text\" [id]=\"'secondary.' + index + '.title'\" formControlName=\"title\"\n                               [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.title')\"\n                               highlightInPreview=\".big-feature:nth-child({{index + 1}}) h2\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'secondary.' + index + '.subtitle'\" trans>Subtitle</label>\n                        <input type=\"text\" [id]=\"'secondary.' + index + '.subtitle'\" formControlName=\"subtitle\"\n                               [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.subtitle')\"\n                               highlightInPreview=\".big-feature:nth-child({{index + 1}}) small\" required>\n                    </div>\n                    <div class=\"input-container\">\n                        <label [for]=\"'secondary.' + index + '.description'\" trans>Description</label>\n                        <textarea type=\"text\" [id]=\"'secondary.' + index + '.description'\" formControlName=\"description\"\n                                  rows=\"4\" [placeholder]=\"defaultValue('secondaryFeatures.' + index + '.description')\"\n                                  highlightInPreview=\".big-feature:nth-child({{index + 1}}) p\"\n                                  required></textarea>\n                    </div>\n                    <appearance-image-input [defaultValue]=\"defaultValue('secondaryFeatures.' + index + '.image')\"\n                                            highlightInPreview=\".big-feature:nth-child({{index + 1}}) img\"\n                                            diskPrefix=\"homepage\"\n                                            formControlName=\"image\" trans>Image\n                    </appearance-image-input>\n                </div>\n                <button mat-flat-button color=\"accent\" (click)=\"addFeature('secondary')\" trans>Add</button>\n            </ng-container>\n            <div *ngSwitchCase=\"'actions'\" class=\"many-inputs\" [formGroup]=\"form.get('actions')\">\n                <div class=\"input-container\">\n                    <label for=\"home.actions.inputText\" trans>Input Text</label>\n                    <input type=\"text\" id=\"home.actions.inputText\" formControlName=\"inputText\"\n                           highlightInPreview=\"new-link-form input\"\n                           [placeholder]=\"defaultValue('actions.inputText')\" required>\n                </div>\n                <div class=\"input-container\">\n                    <label for=\"home.actions.inputButton\" trans>Input Button</label>\n                    <input type=\"text\" id=\"home.actions.inputButton\" formControlName=\"inputButton\"\n                           highlightInPreview=\"new-link-form .mat-flat-button\"\n                           [placeholder]=\"defaultValue('actions.inputButton')\" required>\n                </div>\n                <div class=\"input-container\">\n                    <label for=\"home.actions.cta1\" trans>Call to Action #1</label>\n                    <input type=\"text\" id=\"home.actions.cta1\" formControlName=\"cta1\"\n                           highlightInPreview=\".get-started-button\"\n                           [placeholder]=\"defaultValue('actions.cta1')\" required>\n                </div>\n                <div class=\"input-container\">\n                    <label for=\"home.actions.cta2\" trans>Call to Action #2</label>\n                    <input type=\"text\" id=\"home.actions.cta2\" formControlName=\"cta2\"\n                           highlightInPreview=\".learn-more-button\"\n                           [placeholder]=\"defaultValue('actions.cta2')\" required>\n                </div>\n            </div>\n            <div *ngSwitchCase=\"'channels'\" class=\"channels-panel many-inputs\">\n                <div class=\"slider-list-container\">\n                    <div class=\"input-container\">\n                        <label for=\"slider-list\" trans>Manage Channels</label>\n                        <div class=\"input-wrapper\">\n                            <input id=\"slider-list\" [formControl]=\"searchControl\" [matAutocomplete]=\"sliderAuto\" placeholder=\"Find channel...\" trans-placeholder #inputEl>\n                            <button type=\"submit\" mat-icon-button class=\"search-button\">\n                                <mat-icon svgIcon=\"search\"></mat-icon>\n                            </button>\n                        </div>\n                    </div>\n\n                    <mat-autocomplete #sliderAuto=\"matAutocomplete\" class=\"search-list-autocomplete\" (optionSelected)=\"selectResult($event)\" [autoActiveFirstOption]=\"true\" [displayWith]=\"displayFn\">\n                        <mat-option *ngFor=\"let result of results$ | async\" [value]=\"result\">{{result.name}}</mat-option>\n                    </mat-autocomplete>\n                </div>\n\n                <a mat-raised-button color=\"accent\" routerLink=\"/admin/channels/new\" target=\"_blank\" trans>New Channel</a>\n\n                <loading-indicator [isVisible]=\"loading$ | async\" class=\"overlay\"></loading-indicator>\n\n                <div class=\"lists\" cdkDropList (cdkDropListDropped)=\"reorderChannels($event)\">\n                    <div class=\"channel-list-item\" *ngFor=\"let channel of selectedChannels$ | async\" cdkDrag>\n                        <button mat-icon-button cdkDragHandle>\n                            <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n                        </button>\n                        <div class=\"name\">{{channel.name}}</div>\n                        <div class=\"actions\">\n                            <a mat-icon-button [routerLink]=\"['/admin/channels', channel.id, 'edit']\" target=\"_blank\">\n                                <mat-icon svgIcon=\"edit\"></mat-icon>\n                            </a>\n                            <button mat-icon-button (click)=\"removeChannel(channel)\">\n                                <mat-icon svgIcon=\"delete\"></mat-icon>\n                            </button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        </div>\n    </ng-container>\n\n    <ng-template #mainPanel>\n        <div [formGroup]=\"form\" class=\"many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"home.header.title\" trans>Header Title</label>\n                <input type=\"text\" id=\"home.header.title\" formControlName=\"headerTitle\"\n                       [placeholder]=\"defaultValue('headerTitle')\" highlightInPreview=\".header-title\" required>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"home.header.subtitle\" trans>Header Subtitle</label>\n                <textarea type=\"text\" id=\"home.header.subtitle\" formControlName=\"headerSubtitle\" rows=\"4\"\n                          [placeholder]=\"defaultValue('headerSubtitle')\" highlightInPreview=\".header-description\"\n                          required></textarea>\n            </div>\n\n            <appearance-image-input [defaultValue]=\"defaultValue('headerImage')\"\n                                    highlightInPreview=\".hero\"\n                                    diskPrefix=\"homepage\"\n                                    formControlName=\"headerImage\" trans>Header Image\n            </appearance-image-input>\n\n            <color-picker-input formControlName=\"headerOverlayColor1\" trans>Header Overlay Color 1</color-picker-input>\n            <color-picker-input formControlName=\"headerOverlayColor2\" trans>Header Overlay Color 2</color-picker-input>\n\n            <div class=\"separator\"></div>\n\n            <ul class=\"unstyled-list\">\n                <li (click)=\"openSubpanel('actions')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Action Buttons</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n                <li (click)=\"openSubpanel('primaryFeatures')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Primary Features</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n                <li (click)=\"openSubpanel('secondaryFeatures')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Secondary Features</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n                <li (click)=\"openSubpanel('channels')\" class=\"nav-item\">\n                    <span class=\"text\" trans>Channels</span>\n                    <mat-icon class=\"actions\" svgIcon=\"keyboard-arrow-right\"></mat-icon>\n                </li>\n            </ul>\n\n            <div class=\"separator\"></div>\n\n            <div class=\"input-container\">\n                <label for=\"home.footer.title\" trans>Footer Title</label>\n                <input type=\"text\" id=\"home.footer.title\" formControlName=\"footerTitle\"\n                       [placeholder]=\"defaultValue('footerTitle')\" highlightInPreview=\".footer-title\" required>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"home.footer.subtitle\" trans>Footer Subtitle</label>\n                <textarea type=\"text\" id=\"home.footer.subtitle\" formControlName=\"footerSubtitle\" rows=\"4\"\n                          [placeholder]=\"defaultValue('footerSubtitle')\" highlightInPreview=\".footer-description\"\n                          required></textarea>\n            </div>\n            <appearance-image-input [defaultValue]=\"defaultValue('footerImage')\"\n                                    highlightInPreview=\".bottom-cta\"\n                                    diskPrefix=\"homepage\"\n                                    formControlName=\"footerImage\" trans>Footer Image\n            </appearance-image-input>\n        </div>\n    </ng-template>\n</div>\n","import {ChangeDetectionStrategy, Component, OnInit} from '@angular/core';\nimport {BehaviorSubject, of} from 'rxjs';\nimport {FormArray, FormBuilder, FormControl} from '@angular/forms';\nimport {AppearanceEditor} from '@common/admin/appearance/appearance-editor/appearance-editor.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {catchError, debounceTime, distinctUntilChanged, filter, finalize, map, switchMap} from 'rxjs/operators';\nimport * as Dot from 'dot-object';\nimport {HomepageContent} from '../../../web-player/landing/homepage-content';\nimport {Channel} from '../../channels/channel';\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\nimport {ChannelService} from '../../channels/channel.service';\nimport {moveItemInArray} from '@angular/cdk/drag-drop';\nimport {mapOrder} from '@common/core/utils/map-order';\n\nconst CONFIG_KEY = 'homepage.appearance';\n\n@Component({\n    selector: 'homepage-appearance-panel',\n    templateUrl: './homepage-appearance-panel.component.html',\n    styleUrls: ['./homepage-appearance-panel.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class HomepageAppearancePanelComponent implements OnInit {\n    public selectedSubpanel$ = new BehaviorSubject<string>(null);\n    public defaultValues: HomepageContent;\n\n    public path$ = this.selectedSubpanel$.pipe(map(panel => {\n        const path = ['Homepage'];\n        if (panel) path.push(panel);\n        return path;\n    }));\n\n    public form = this.fb.group({\n        headerTitle: [''],\n        headerSubtitle: [''],\n        headerImage: [''],\n        headerOverlayColor1: [''],\n        headerOverlayColor2: [''],\n        footerTitle: [''],\n        footerSubtitle: [''],\n        footerImage: [''],\n        actions: this.fb.group({\n            inputText: [''],\n            inputButton: [''],\n            cta1: [''],\n            cta2: [''],\n        }),\n        primaryFeatures: this.fb.array([]),\n        secondaryFeatures: this.fb.array([]),\n        channelIds: this.fb.control([]),\n    });\n\n    public searchControl = new FormControl();\n    public results$ = new BehaviorSubject<Channel[]>([]);\n    public loading$ = new BehaviorSubject(false);\n    public selectedChannels$ = new BehaviorSubject<Channel[]>([]);\n\n    constructor(\n        private fb: FormBuilder,\n        private editor: AppearanceEditor,\n        private settings: Settings,\n        private channels: ChannelService,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchQueryControl();\n        const data = this.settings.getJson(CONFIG_KEY, {}) as HomepageContent;\n        this.loadChannels(data.channelIds);\n        this.defaultValues = this.editor.defaultSettings[CONFIG_KEY] ? JSON.parse(this.editor.defaultSettings[CONFIG_KEY]) : {};\n\n        (data.primaryFeatures || []).forEach(() => {\n            this.addFeature('primary');\n        });\n        (data.secondaryFeatures || []).forEach(() => {\n            this.addFeature('secondary');\n        });\n\n        this.form.patchValue(data);\n\n        this.form.valueChanges.subscribe(value => {\n            this.editor.setConfig(CONFIG_KEY, value);\n            this.editor.addChanges({[CONFIG_KEY]: value});\n        });\n    }\n\n    public openPreviousPanel() {\n        if (this.selectedSubpanel$.value) {\n            this.openSubpanel(null);\n        } else {\n            this.editor.closeActivePanel();\n        }\n    }\n\n    public openSubpanel(name: string) {\n        this.selectedSubpanel$.next(name);\n    }\n\n    public addFeature(type: 'primary'|'secondary') {\n        const features = this.form.get(`${type}Features`) as FormArray;\n        const data: {[key: string]: string[]} = {title: [''], subtitle: [''], image: ['']};\n        if (type === 'secondary') {\n            data.description = [''];\n        }\n        features.push(this.fb.group(data));\n    }\n\n    public removeFeature(type: 'primary'|'secondary', index: number) {\n        const features = this.form.get(`${type}Features`) as FormArray;\n        features.removeAt(index);\n    }\n\n    public defaultValue(key: string): string {\n        return Dot.pick(key, this.defaultValues) || '';\n    }\n\n    public primaryArray() {\n        return this.form.get('primaryFeatures') as FormArray;\n    }\n\n    public secondaryArray() {\n        return this.form.get('secondaryFeatures') as FormArray;\n    }\n\n    /**\n     * CHANNELS\n     */\n\n    private loadChannels(channelIds: number[]) {\n        if ( ! channelIds || !channelIds.length) return;\n        this.loading$.next(true);\n        this.channels.all({channelIds})\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                const channels = response.pagination.data;\n                this.selectedChannels$.next(mapOrder(channels, channelIds, 'id'));\n            });\n    }\n\n    public removeChannel(channel: Channel) {\n        const channels = this.selectedChannels$.value;\n        const newChannels = channels.filter(curr => curr.id !== channel.id);\n        this.updateChannels(newChannels);\n    }\n\n    public reorderChannels($event) {\n        const channels = this.selectedChannels$.value.slice();\n        moveItemInArray(channels, $event.previousIndex, $event.currentIndex);\n        this.updateChannels(channels);\n    }\n\n    public selectResult(e: MatAutocompleteSelectedEvent) {\n        const newChannel = e.option.value;\n        if (this.selectedChannels$.value.find(c => c.id === newChannel.id)) {\n            return;\n        }\n        this.updateChannels([...this.selectedChannels$.value, newChannel]);\n        this.searchControl.reset();\n    }\n\n    private updateChannels(newChannels: Channel[]) {\n        this.selectedChannels$.next(newChannels);\n        this.form.patchValue({channelIds: newChannels.map(c => c.id)});\n    }\n\n    private bindToSearchQueryControl() {\n        this.searchControl.valueChanges\n            .pipe(\n                debounceTime(200),\n                distinctUntilChanged(),\n                filter(query => typeof query === 'string'),\n                switchMap(query => this.searchForChannel(query)),\n                catchError(() => of([])),\n            ).subscribe(results => {\n            this.results$.next(results);\n        });\n    }\n\n    private searchForChannel(query: string) {\n        return this.channels.all({query})\n            .pipe(map(response => {\n                return response.pagination.data\n                    // track list is not supported on landing page currently.\n                    .filter(c => c.config.layout !== 'trackTable' && c.config.layout !== 'trackList');\n            }));\n    }\n\n    public displayFn = (channel: Channel) => channel ? channel.name : '';\n}\n","import {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\n\nexport const APP_APPEARANCE_CONFIG = {\n    defaultRoute: '/',\n    navigationRoutes: [\n        '/',\n        'artist',\n        'album',\n        'track',\n        'playlist',\n        'genre',\n        'user',\n        'account',\n        'login',\n        'register',\n    ],\n    menus: {\n        availableRoutes: [\n            'admin/upload',\n            'upload',\n            'library/songs',\n            'library/albums',\n            'library/artists',\n            'library/history',\n        ],\n        positions: [\n            'sidebar-primary',\n            'sidebar-secondary',\n            'mobile-bottom',\n            'landing-page-navbar',\n            'landing-page-footer',\n            'custom-page-navbar',\n            'admin-navbar',\n        ],\n    },\n    sections: [\n        {\n            name: 'landing page',\n            component: HomepageAppearancePanelComponent,\n            position: 1,\n        }\n    ]\n};\n","/**\n * Sort array based on another array.\n */\nexport function mapOrder(array: any[], order: any[], key: string) {\n    if ( ! array) return array;\n    array.sort((a, b) => {\n        const A = a[key], B = b[key];\n        if (order.indexOf(A) > order.indexOf(B)) {\n            return 1;\n        } else {\n            return -1;\n        }\n    });\n\n    return array;\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BaseAppearanceModule} from '@common/admin/appearance/base-appearance.module';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {ReactiveFormsModule} from '@angular/forms';\nimport {HomepageAppearancePanelComponent} from './homepage-appearance-panel/homepage-appearance-panel.component';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {ColorPickerInputModule} from '@common/core/ui/color-picker/color-picker-input/color-picker-input.module';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {RouterModule} from '@angular/router';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {APPEARANCE_EDITOR_CONFIG} from '../../../common/admin/appearance/appearance-editor-config.token';\nimport {APP_APPEARANCE_CONFIG} from './app-appearance-config';\n\n\n@NgModule({\n    declarations: [\n        HomepageAppearancePanelComponent,\n    ],\n    imports: [\n        CommonModule,\n        BaseAppearanceModule,\n        ReactiveFormsModule,\n        ColorPickerInputModule,\n        LoadingIndicatorModule,\n        RouterModule,\n\n        // material\n        MatIconModule,\n        MatButtonModule,\n        TranslationsModule,\n        MatSliderModule,\n        MatAutocompleteModule,\n        DragDropModule,\n    ],\n    providers: [\n        {\n            provide: APPEARANCE_EDITOR_CONFIG,\n            useValue: APP_APPEARANCE_CONFIG,\n            multi: true,\n        }\n    ]\n})\nexport class AppAppearanceModule {\n}\n"]}