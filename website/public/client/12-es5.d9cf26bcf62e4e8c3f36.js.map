{"version":3,"sources":["webpack:///src/app/shared/select-artist-control/select-artist-control.component.html","webpack:///src/app/shared/select-artist-control/select-artist-control.component.ts","webpack:///src/app/backstage/requests/backstage-request-form/backstage-request-form.component.html","webpack:///src/app/backstage/requests/backstage-request-form/backstage-request-form.component.ts","webpack:///src/app/backstage/requests/backstage-request-submitted/backstage-request-submitted.component.ts","webpack:///src/app/backstage/requests/backstage-request-submitted/backstage-request-submitted.component.html","webpack:///src/app/backstage/requests/backstage-type-selector/backstage-type-selector.component.html","webpack:///src/app/backstage/requests/backstage-type-selector/backstage-type-selector.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component.html","webpack:///src/app/backstage/editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page.component.html","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page-resolver.service.ts","webpack:///src/app/web-player/audio-upload-validator.ts","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.html","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.ts","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.html","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.ts","webpack:///src/app/uploading/track-form/album-control/album-control.component.html","webpack:///src/app/uploading/track-form/album-control/album-control.component.ts","webpack:///src/app/uploading/track-form/track-form.component.html","webpack:///src/app/uploading/track-form/track-form.component.ts","webpack:///src/common/core/types/models/Tag.ts","webpack:///src/app/uploading/album-form/album-form.component.html","webpack:///src/app/backstage/editing/crupdate-track-page/crupdate-track-page.component.ts","webpack:///src/common/guards/pending-changes/pending-changes-guard.service.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page.component.ts","webpack:///src/app/uploading/album-form/album-form.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page.component.html","webpack:///src/app/backstage/editing/crupdate-track-page/crupdate-track-page.component.html","webpack:///src/common/uploads/utils/read-uploaded-folders.ts","webpack:///src/common/uploads/directives/upload-dropzone.directive.ts","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.html","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.ts","webpack:///src/app/uploading/upload-page/upload-page.component.html","webpack:///src/app/backstage/backstage-routing.module.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page-resolver.service.ts","webpack:///src/app/uploading/upload-page/upload-page.component.ts","webpack:///src/app/shared/select-artist-control/select-artist-control.module.ts","webpack:///src/app/uploading/uploading.module.ts","webpack:///src/app/backstage/backstage.module.ts"],"names":["SelectArtistControlComponent","search","listAll","isDisabled$","BehaviorSubject","searchFormControl","loading$","artists$","selectedArtist$","searchedOnce","this","bindToSearchControl","value","next","fn","propagateChange","isDisabled","valueChanges","pipe","debounceTime","distinctUntilChanged","switchMap","query","searchArtists","catchError","of","subscribe","users","suggestArtists","limit","finalize","map","response","artists","document","querySelector","style","width","fakeInput","nativeElement","getBoundingClientRect","clearSearchInput","artist","setValue","provide","useExisting","multi","onMenuOpened","onMenuClosed","$event","stopPropagation","BackstageRequestSubmittedComponent","BackstageRequestFormComponent","backstage","fb","settings","currentUser","socialAuth","uploadQueue","imageValidator","router","route","uploadedPassportEntry$","socialProfiles$","errors$","requestType$","form","group","artist_name","get","image","primaryArtist","image_small","first_name","last_name","role","company","routeConfig","path","replace","verifyArtist","disable","becomeArtist","artistPlaceholder","claimArtist","payload","artist_id","id","type","data","passportScanEntryId","socialProfiles","submitRequest","navigate","request","replaceUrl","err","errors","serviceName","retrieveProfile","then","profile","files","start","uri","httpParams","diskPrefix","disk","validator","fileEntry","profiles","BackstageTypeSelectorComponent","currentUserIsArtist","ArtistAlbumsTableComponent","modal","albumsApi","images","datatable","urls","albums","albums$","data$","changes","encodedArtist","btoa","JSON","stringify","name","insideAdmin","url","includes","init","initialData","album","show","title","body","ok","beforeClosed","confirmed","filter","a","CrupdateArtistPageComponent","EditArtistPageResolver","AudioUploadValidator","toast","cd","verified","spotify_id","genres","description","country","city","profile_images","array","links","suggestGenreFn","media","types","results","genre","bindToRouteData","update","create","markAsPristine","open","editArtist","errResponse","detectChanges","api","patchValue","g","forEach","img","addProfileImage","profileImagesArray","push","index","removeAt","dirty","createOrUpdate","state","paramMap","with","albumsPerPage","forEditing","mergeMap","DEFAULT_MAX_SIZE_MB","showToast","validations","maxSize","getMaxFileSize","i18n","convertToBytes","TrackArtistControlComponent","searchControl","value$","searchResults$","bindSearchControl","fromEvent","searchInput","take","findMatches","newArtists","findIndex","blur","r","_","selectArtist","upload","TrackUploadHeaderComponent","subscription","unsubscribe","progress$","throttleTime","animationFrame","leading","trailing","progress","AlbumControlComponent","results$","selectedAlbum$","searchAlbums","suggestAlbums","selectAlbum","TrackFormComponent","tracks","audioValidator","waveGenerator","canceled","saved","defaultImage$","uniqueId","number","tags","duration","youtube_id","spotify_popularity","waveData","lyrics","expanded","suggestTagFn","tag","currentValue","albumForm","track","formValue","t","display_name","canAttachMusicToAnyArtist","uploadQueueItem","uploadedResponse$","patchFormUsingFileUpload","customData","completed","getPayload","remove","emit","params","willProcessFiles","audio","video","uploadedFiles","queueItem","find","queueItemId","generate","uploadedFile","finishProcessing","uploads$","markForCheck","values","metadata","comment","release_date","indexOf","trackUrl","bodyExpansion","CrupdateTrackPageComponent","PendingChangesGuard","CrupdateAlbumPageComponent","AlbumFormComponent","waveform","uploadButtonConfig","multiple","confirmCancel","allTracks$","Date","toISOString","slice","trackByFn","i","onlyValidUploads","uploadsAdded$","uploads","error$","e","sortedTracks","previousIndex","currentIndex","trackForms","some","f","isUploading","tf","reset","autoMatchAlbum","trackForm","markAsDirty","newTracks","submit","uploadFiles","maybeCancel","reorderTracks","queryParams","parse","atob","toAlbumsPage","component","canDeactivate","toTracksPage","readDirRecursive","entry","entries","dir","Promise","resolve","readEntriesRecursive","createReader","key","childEntry","isDirectory","transformFileEntry","reader","allEntries","readEntries","length","concat","file","fullPath","UploadDropzoneDirective","el","disableDropzoneClick","disableDropzone","uploadConfig","filesDropped","addEventListener","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","clickButton","handleClick","removeClassesFromDropzone","emitUploadEvent","dropzoneDisabled","classList","add","preventDefault","dataTransfer","dropEffect","newEl","elementFromPoint","clientX","clientY","contains","items","Array","from","item","kind","webkitGetAsEntry","hasFiles","toLowerCase","UploadedMediaPreviewComponent","setTimeout","trackLinkInput","focus","select","isTrack","routerLinkToUrl","mediaLink","network","mediaUrl","model_type","shareUsing","target","createAlbum$","CrupdateAlbumPageResolverService","UploadPageComponent","BackstageRoutingModule","SelectArtistControlModule","UploadingModule","BackstageModule","routes","redirectTo","pathMatch","savedMedia$","album_name","newMedia","uploadTracks","forChild"],"mappings":"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","file":"x","sourcesContent":["<div class=\"fake-input\" #fakeInput [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\" [class.disabled]=\"isDisabled$ | async\">\n        <span *ngIf=\"selectedArtist$ | async as selectedArtist; else anyArtist\">\n            <media-image class=\"result-image\" [media]=\"selectedArtist\"></media-image>\n            {{selectedArtist.name}}\n        </span>\n    <ng-template #anyArtist>\n        <span trans>Select an artist</span>\n    </ng-template>\n    <div class=\"arrow-container\">\n        <div class=\"arrow\"></div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"select-artist-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button type=\"button\" mat-menu-item *ngFor=\"let artist of artists$ | async\" (click)=\"selectArtist(artist)\">\n        <media-image class=\"result-image\" [media]=\"artist\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{artist.name}}</div>\n            <div class=\"email\" trans>Artist</div>\n        </div>\n    </button>\n    <div mat-menu-item disabled *ngIf=\"searchedOnce && !(artists$ | async).length\" trans>No artists found.</div>\n</mat-menu>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    finalize,\n    map,\n    switchMap\n} from 'rxjs/operators';\nimport {Search} from '../../web-player/search/search.service';\nimport {Artist} from '../../models/Artist';\n\n@Component({\n    selector: 'select-artist-control',\n    templateUrl: './select-artist-control.component.html',\n    styleUrls: ['./select-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'tabindex': '0'},\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: SelectArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class SelectArtistControlComponent implements OnInit, ControlValueAccessor {\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild('fakeInput') fakeInput: ElementRef<HTMLDivElement>;\n    @Input() listAll = false;\n    public isDisabled$ = new BehaviorSubject<boolean>(false);\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public artists$ = new BehaviorSubject<Artist[]>([]);\n    public selectedArtist$ = new BehaviorSubject<Artist>(null);\n    private propagateChange: (artist: Artist) => void;\n    public searchedOnce = false;\n\n    constructor(private search: Search) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Artist) {\n        this.selectedArtist$.next(value);\n    }\n\n    public registerOnChange(fn: (artist: Artist) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {\n    }\n\n    public setDisabledState(isDisabled: boolean) {\n        this.isDisabled$.next(isDisabled);\n    }\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchArtists(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.artists$.next(users);\n        });\n    }\n\n    private searchArtists(query: string): Observable<Artist[]> {\n        this.loading$.next(true);\n        return this.search.suggestArtists({\n            query,\n            limit: 7,\n            listAll: this.listAll,\n        }).pipe(\n            finalize(() => this.loading$.next(false)),\n            map(response => response.artists),\n        );\n    }\n\n    public onMenuOpened() {\n        const menu = (document.querySelector('.select-artist-control-menu') as HTMLElement);\n        menu.style.width = this.fakeInput.nativeElement.getBoundingClientRect().width + 'px';\n\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectArtist(artist: Artist) {\n        this.selectedArtist$.next(artist);\n        this.propagateChange(artist);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<h1 trans>Tell us about yourself</h1>\n\n<form (ngSubmit)=\"requestAccess()\" ngNativeValidate [formGroup]=\"form\" class=\"many-inputs\" *ngIf=\"errors$ | async as errors\">\n    <ng-container *ngIf=\"requestType$ | async as requestType\">\n        <upload-image-control formControlName=\"image\" [compact]=\"true\"></upload-image-control>\n\n        <div class=\"input-container\" *ngIf=\"requestType !== 'become-artist'\">\n            <label for=\"backstage-artist\" trans>Select Artist</label>\n            <select-artist-control [listAll]=\"true\" id=\"backstage-artist\" formControlName=\"artist\"></select-artist-control>\n            <div class=\"error\" *ngIf=\"errors.artist_id\">{{errors.artist_id}}</div>\n        </div>\n\n        <div class=\"input-container\" *ngIf=\"requestType === 'become-artist'\">\n            <label for=\"backstage-name\" trans>Your artist name</label>\n            <input type=\"text\" id=\"backstage-name\" formControlName=\"artist_name\" required>\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n        <div class=\"inline-inputs-container many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"backstage-first-name\" trans>First name</label>\n                <input type=\"text\" id=\"backstage-first-name\" formControlName=\"first_name\" required>\n                <div class=\"error\" *ngIf=\"errors.first_name\">{{errors.first_name}}</div>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"backstage-last-name\" trans>Last name</label>\n                <input type=\"text\" id=\"backstage-last-name\" formControlName=\"last_name\" required>\n                <div class=\"error\" *ngIf=\"errors.last_name\">{{errors.last_name}}</div>\n            </div>\n        </div>\n        <div class=\"input-container\" *ngIf=\"requestType === 'claim-artist'\">\n            <label for=\"backstage-role\" trans>Role</label>\n            <select type=\"text\" id=\"backstage-role\" formControlName=\"role\" required>\n                <option [value]=\"null\" disabled trans>Select role</option>\n                <option value=\"artist\" trans>Artist</option>\n                <option value=\"agent\" trans>Agent</option>\n                <option value=\"composer\" trans>Composer</option>\n                <option value=\"label\" trans>Label</option>\n                <option value=\"manager\" trans>Manager</option>\n                <option value=\"musician\" trans>Musician</option>\n                <option value=\"producer\" trans>Producer</option>\n                <option value=\"publisher\" trans>Publisher</option>\n                <option value=\"songwriter\" trans>Songwriter</option>\n            </select>\n            <div class=\"error\" *ngIf=\"errors.role\">{{errors.role}}</div>\n        </div>\n        <div class=\"input-container\">\n            <label for=\"backstage-company\" trans>Company (optional)</label>\n            <input type=\"text\" id=\"backstage-company\" formControlName=\"company\">\n            <div class=\"error\" *ngIf=\"errors.company\">{{errors.company}}</div>\n        </div>\n\n        <div class=\"speed-up-container\">\n            <div class=\"speed-up-title\" trans>Speed up the process by connecting artist social media accounts or uploading your passport scan.</div>\n            <div class=\"speed-up-buttons\">\n                <button type=\"button\" class=\"twitter-btn speed-up-button\" mat-flat-button color=\"accent\" (click)=\"retrieveSocialProfile('twitter')\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"twitter\"></mat-icon>\n                    <span trans>Connect to Twitter</span>\n                </button>\n                <button type=\"button\" mat-flat-button class=\"facebook-btn speed-up-button\" color=\"accent\" (click)=\"retrieveSocialProfile('facebook')\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"facebook\"></mat-icon>\n                    <span trans>Connect to Facebook</span>\n                </button>\n                <button type=\"button\" mat-flat-button color=\"accent\" class=\"passport-btn speed-up-button\" [uploadButton]=\"{types: ['image/*']}\" (filesSelected)=\"uploadPassportScan($event)\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"document-scanner\"></mat-icon>\n                    <span trans>Upload Passport Scan</span>\n                </button>\n            </div>\n            <div class=\"attached-verifications\">\n                <div class=\"facebook-profile verification\" *ngFor=\"let profile of socialProfiles$ | async | keyvalue\">\n                    <img class=\"verification-img\" [src]=\"profile.value.avatar\" alt=\"\">\n                    <div class=\"verification-details\">\n                        <div class=\"verification-name\" trans>{{profile.key}} Profile</div>\n                        <a [href]=\"profile.value.profileUrl\" target=\"_blank\" class=\"verification-url\">{{profile.value.profileUrl}}</a>\n                    </div>\n                    <button class=\"remove-verification\" type=\"button\" mat-icon-button (click)=\"removeSocialProfile(profile.key)\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                </div>\n                <div class=\"passport-attachment verification\" *ngIf=\"uploadedPassportEntry$ | async as entry\">\n                    <mat-icon class=\"verification-img\" svgIcon=\"document-scanner\"></mat-icon>\n                    <div class=\"verification-details\">\n                        <div class=\"verification-name\" trans>Passport Scan</div>\n                        <div>{{entry.name}} ({{entry.file_size | formattedFileSize}})</div>\n                    </div>\n                    <button class=\"remove-verification\" type=\"button\" mat-icon-button (click)=\"removePassportUpload()\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                </div>\n                <upload-progress-bar></upload-progress-bar>\n            </div>\n        </div>\n\n        <div class=\"backstage-action-buttons\">\n            <a class=\"backstage-action-button\" type=\"button\" routerLink=\"/backstage/requests\" mat-raised-button trans>Go Back</a>\n            <button class=\"backstage-action-button\" type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Submit Request</button>\n        </div>\n    </ng-container>\n</form>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BackstagRequestService} from '../backstag-request.service';\nimport {FormBuilder} from '@angular/forms';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {SocialAuthService} from '@common/auth/social-auth.service';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {ImageUploadValidator} from '../../../web-player/image-upload-validator';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {ExternalSocialProfile} from '@common/auth/external-social-profile';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {finalize} from 'rxjs/operators';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BackstageRequestType} from '../backstage-request-type';\nimport {AppCurrentUser} from '../../../app-current-user';\n\n@Component({\n    selector: 'backstage-request-form',\n    templateUrl: './backstage-request-form.component.html',\n    styleUrls: ['./backstage-request-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageRequestFormComponent {\n    public uploadedPassportEntry$ = new BehaviorSubject<FileEntry>(null);\n    public socialProfiles$ = new BehaviorSubject<{[key: string]: ExternalSocialProfile}>(null);\n    public errors$ = new BehaviorSubject<object>({});\n    public loading$ = new BehaviorSubject(false);\n    public requestType$ = new BehaviorSubject<BackstageRequestType>(null);\n    public form = this.fb.group({\n        artist: [],\n        artist_name: [this.currentUser.get('display_name')],\n        image: [this.currentUser.primaryArtist()?.image_small || this.currentUser.get('avatar')],\n        first_name: [this.currentUser.get('first_name')],\n        last_name: [this.currentUser.get('last_name')],\n        role: [],\n        company: [''],\n    });\n\n    constructor(\n        private backstage: BackstagRequestService,\n        private fb: FormBuilder,\n        public settings: Settings,\n        private currentUser: AppCurrentUser,\n        private socialAuth: SocialAuthService,\n        private uploadQueue: UploadQueueService,\n        private imageValidator: ImageUploadValidator,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {\n        this.requestType$.next(this.route.routeConfig.path.replace('requests/', '') as BackstageRequestType);\n        if (this.requestType$.value === BackstageRequestType.verifyArtist) {\n            this.form.get('artist').setValue(this.currentUser.primaryArtist());\n            this.form.get('artist').disable();\n        }\n        if (this.requestType$.value === BackstageRequestType.becomeArtist) {\n            this.form.get('artist').setValue(this.currentUser.artistPlaceholder());\n            this.form.get('artist').disable();\n        }\n        if (this.requestType$.value !== BackstageRequestType.claimArtist) {\n            this.form.get('role').setValue('artist');\n        }\n        if (this.requestType$.value !== BackstageRequestType.becomeArtist) {\n            this.form.get('image').disable();\n        }\n    }\n\n    public requestAccess() {\n        this.loading$.next(true);\n        const payload = {\n            artist_name: this.form.value.artist_name,\n            artist_id: this.form.value.artist?.id,\n            type: this.requestType$.value,\n            data: {\n                ...this.form.value,\n                passportScanEntryId: this.uploadedPassportEntry$.value?.id,\n                socialProfiles: this.socialProfiles$.value,\n            }\n        };\n        this.backstage.submitRequest(payload)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.router.navigate(['/backstage/requests', response.request.id, 'request-submitted'], {replaceUrl: true});\n            }, (err: BackendErrorResponse) => this.errors$.next(err.errors));\n    }\n\n    public retrieveSocialProfile(serviceName: string) {\n        this.socialAuth.retrieveProfile(serviceName).then(profile => {\n            this.socialProfiles$.next({\n                ...this.socialProfiles$.value,\n                [serviceName]: profile,\n            });\n        });\n    }\n\n    public uploadPassportScan(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads/images',\n            httpParams: {diskPrefix: 'test', disk: 'private'},\n            validator: this.imageValidator\n        } as UploadApiConfig;\n        this.uploadQueue.start(files, params).subscribe(response => {\n            this.uploadedPassportEntry$.next(response.fileEntry);\n        });\n    }\n\n    public removePassportUpload() {\n        this.uploadedPassportEntry$.next(null);\n    }\n\n    public removeSocialProfile(serviceName: string) {\n        const profiles = {...this.socialProfiles$.value};\n        delete profiles[serviceName];\n        this.socialProfiles$.next(profiles);\n    }\n}\n","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\n\n@Component({\n    selector: 'backstage-request-submitted',\n    templateUrl: './backstage-request-submitted.component.html',\n    styleUrls: ['./backstage-request-submitted.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageRequestSubmittedComponent {\n}\n","<div class=\"text-align-center\">\n    <mat-icon class=\"check-icon\" svgIcon=\"check\"></mat-icon>\n</div>\n\n<h1 trans>We've got your request</h1>\n\n<ul>\n    <li>Our support team will review it and send you an email within 3 days!</li>\n    <li>Don't submit another request until you hear from us.</li>\n    <li>If this artist profile is already claimed, ask an admin on your team to invite you.</li>\n</ul>\n\n<div class=\"backstage-action-buttons\">\n    <a routerLink=\"/\" class=\"backstage-action-button\" mat-flat-button color=\"accent\" trans>Got It</a>\n</div>\n","<h1 trans [transValues]=\"{sitename: settings.get('branding.site_name')}\">Get Access to :sitename for Artists</h1>\n<h2 trans>First, select the type of your request.</h2>\n\n<div class=\"claim-row\">\n    <a class=\"claim-col\" [routerLink]=\"[currentUserIsArtist ? 'verify-artist' : 'become-artist']\">\n        <div class=\"title\" trans>\n            <ng-container *ngIf=\"currentUserIsArtist\">Get verified</ng-container>\n            <ng-container *ngIf=\"!currentUserIsArtist\">Become an artist</ng-container>\n        </div>\n        <img src=\"client/assets/images/backstage/claim-artist.jpg\" alt=\"\">\n    </a>\n    <a class=\"claim-col\" routerLink=\"claim-artist\">\n        <div class=\"title\" trans>Claim existing artist</div>\n        <img src=\"client/assets/images/backstage/claim-label.jpg\" alt=\"\">\n    </a>\n</div>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {AppCurrentUser} from '../../../app-current-user';\n\n@Component({\n    selector: 'backstage-type-selector',\n    templateUrl: './backstage-type-selector.component.html',\n    styleUrls: ['./backstage-type-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageTypeSelectorComponent {\n    public currentUserIsArtist = false;\n\n    constructor(\n        public settings: Settings,\n        private currentUser: AppCurrentUser,\n    ) {\n        this.currentUserIsArtist = !!this.currentUser.primaryArtist();\n    }\n}\n","<div class=\"datatable\">\n    <datatable-header pluralResourceName=\"albums\">\n        <ng-container leftContent>\n            <div class=\"new-album-container\">\n                <a mat-raised-button color=\"accent\" [routerLink]=\"urls.createAlbum(insideAdmin)\" [queryParams]=\"{artist: encodedArtist}\" *ngIf=\"currentUser.hasPermission('music.create')\" [disabled]=\"!artist\" trans>New Album</a>\n                <p class=\"save-message\" *ngIf=\"!artist\">\n                    <mat-icon svgIcon=\"warning\"></mat-icon>\n                    <span trans>Save artist first to enable album creation.</span>\n                </p>\n            </div>\n        </ng-container>\n    </datatable-header>\n    <table class=\"material-table\">\n        <thead>\n        <tr>\n            <th table-sort-header=\"name\" trans>Album</th>\n            <th table-sort-header trans>Release Date</th>\n            <th table-sort-header=\"views\" trans>Views</th>\n            <th table-sort-header=\"tracks_count\" trans>Number Of Tracks</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let album of albums$ | async\">\n            <td>\n                <div class=\"column-with-image\">\n                    <media-image [media]=\"album\" default=\"album\"></media-image>\n                    <span>{{album.name}}</span>\n                </div>\n            </td>\n            <td data-label=\"Release Date\">{{album.release_date ? album.release_date: '&ndash;'}}</td>\n            <td data-label=\"Views\">{{album.views}}</td>\n            <td data-label=\"Number of Tracks\">{{album.tracks_count ? album.tracks_count : '&ndash;'}}</td>\n            <td class=\"edit-column\">\n                <a [routerLink]=\"urls.editAlbum(album, insideAdmin)\" [queryParams]=\"{artist: encodedArtist}\" mat-icon-button [matTooltip]=\"'Edit album' | trans\">\n                    <mat-icon svgIcon=\"edit\"></mat-icon>\n                </a>\n                <button mat-icon-button (click)=\"maybeDeleteAlbum(album)\" [matTooltip]=\"'Delete album' | trans\" *ngIf=\"currentUser.hasPermission('albums.delete')\" trans>\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\n                </button>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <no-results-message svgImage=\"music.svg\" *ngIf=\"!datatable.data.length\">\n        <span primary-text trans>This artist has no albums yet</span>\n    </no-results-message>\n</div>\n","import {\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {WebPlayerImagesService} from '../../../../web-player/web-player-images.service';\nimport {Artist} from '../../../../models/Artist';\nimport {Album} from '../../../../models/Album';\nimport {Albums} from '../../../../web-player/albums/albums.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\nimport {Observable} from 'rxjs';\nimport {WebPlayerUrls} from '../../../../web-player/web-player-urls.service';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'artist-albums-table',\n    templateUrl: './artist-albums-table.component.html',\n    styleUrls: ['./artist-albums-table.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DatatableService],\n})\nexport class ArtistAlbumsTableComponent implements OnInit, OnChanges {\n    @Input() artist: Artist;\n    @Input() albums: Album[] = [];\n    albums$ = this.datatable.data$ as Observable<Album[]>;\n    encodedArtist: string;\n    insideAdmin: boolean;\n    constructor(\n        private modal: Modal,\n        private albumsApi: Albums,\n        public currentUser: CurrentUser,\n        public images: WebPlayerImagesService,\n        public datatable: DatatableService<Album>,\n        public urls: WebPlayerUrls,\n        private router: Router,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.artist) {\n            this.encodedArtist = btoa(JSON.stringify({\n                id: this.artist.id,\n                name: this.artist.name,\n                image_small: this.artist.image_small\n            }));\n        }\n    }\n\n    ngOnInit() {\n        this.insideAdmin = this.router.url.includes('admin');\n        this.datatable.init({\n            initialData: this.albums ? this.albums : []\n        });\n    }\n\n    public maybeDeleteAlbum(album: Album) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Album',\n            body: 'Are you sure you want to delete this album?',\n            ok: 'Delete'\n        }).beforeClosed().subscribe(async (confirmed) => {\n            if ( ! confirmed) return;\n            this.albumsApi.delete([album.id]).subscribe(() => {\n                this.datatable.data = this.datatable.data.filter(a => a.id !== album.id);\n            });\n        });\n    }\n}\n","<div class=\"material-panel\">\n    <form class=\"edit-main-info\" (ngSubmit)=\"createOrUpdate()\" [formGroup]=\"form\" ngNativeValidate>\n        <div class=\"left-col\">\n            <upload-image-control formControlName=\"image_small\" diskPrefix=\"artist\"></upload-image-control>\n            <button type=\"submit\" mat-raised-button color=\"accent\" class=\"main-button\" *ngIf=\"artist\" trans>Update</button>\n            <button type=\"submit\" mat-raised-button color=\"accent\" class=\"main-button\" *ngIf=\"!artist\" trans>Create</button>\n        </div>\n        <div class=\"right-col many-inputs admin-artist-edit-inputs\">\n\n            <mat-tab-group color=\"accent\" animationDuration=\"0ms\">\n                <mat-tab [label]=\"'Details' | trans\">\n                    <div class=\"many-inputs tab\">\n                        <div class=\"input-container\">\n                            <label for=\"artist-name\" trans>Name</label>\n                            <input type=\"text\" formControlName=\"name\" id=\"artist-name\" [readOnly]=\"!insideAdmin\" required>\n                            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-genres\" trans>Genres</label>\n                            <chip-input placeholder=\"+Add genre\" id=\"artist-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                            <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                        </div>\n                        <ng-container *ngIf=\"insideAdmin\">\n                            <div class=\"input-container\" *ngIf=\"settings.get('spotify_is_setup')\">\n                                <label for=\"artist-spotify-id\" trans>Spotify ID</label>\n                                <input type=\"text\" id=\"artist-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n                            </div>\n                            <div class=\"setting-toggle-container\">\n                                <mat-slide-toggle formControlName=\"verified\" trans>Verified</mat-slide-toggle>\n                                <div class=\"error\" *ngIf=\"errors.verified\">{{errors.verified}}</div>\n                            </div>\n                        </ng-container>\n                    </div>\n                </mat-tab>\n                <mat-tab [label]=\"'Links' | trans\">\n                    <profile-links-form-control formControlName=\"links\"></profile-links-form-control>\n                </mat-tab>\n                <mat-tab [label]=\"'Biography' | trans\">\n                    <div class=\"many-inputs tab\">\n                        <div class=\"input-container\">\n                            <label for=\"artist-country\" trans>Country</label>\n                            <input formControlName=\"country\" id=\"artist-country\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-city\" trans>City</label>\n                            <input formControlName=\"city\" id=\"artist-city\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-bio\" trans>Biography</label>\n                            <textarea formControlName=\"description\" id=\"artist-bio\" rows=\"8\"></textarea>\n                        </div>\n                        <div class=\"profile-images\">\n                            <div class=\"profile-images-title\" trans>Biography Images</div>\n                            <div class=\"profile-images-wrapper\" formArrayName=\"profile_images\">\n                                <upload-image-control\n                                    *ngFor=\"let image of profileImagesArray().controls; index as i\"\n                                    [formControlName]=\"i\"\n                                    (fileDeleted)=\"removeProfileImage(i)\"\n                                    [uploadConfig]=\"{httpParams: {diskPrefix: 'bio'}}\"\n                                    [buttonText]=\"image.value ? 'Replace Image' : 'Upload Image'\"\n                                ></upload-image-control>\n                            </div>\n                        </div>\n                    </div>\n                </mat-tab>\n            </mat-tab-group>\n        </div>\n    </form>\n\n    <artist-albums-table [albums]=\"albums\" [artist]=\"artist\"></artist-albums-table>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit\n} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Artists} from '../../../web-player/artists/artists.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Artist} from '../../../models/Artist';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {FormArray, FormBuilder, FormControl} from '@angular/forms';\nimport {GENRE_MODEL} from '../../../models/Genre';\nimport {map} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {Album} from '../../../models/Album';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {WebPlayerUrls} from '../../../web-player/web-player-urls.service';\n\n@Component({\n    selector: 'crupdate-artist-page',\n    templateUrl: './crupdate-artist-page.component.html',\n    styleUrls: ['./crupdate-artist-page.component.scss'],\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CrupdateArtistPageComponent implements OnInit, ComponentCanDeactivate {\n    public insideAdmin = false;\n    public errors: {[K in keyof Partial<Artist>]: string} = {};\n    public artist: Artist;\n    public albums: Album[] = [];\n\n    public form = this.fb.group({\n        name: [''],\n        verified: [''],\n        image_small: [''],\n        spotify_id: [''],\n        genres: [[]],\n        description: [''],\n        country: [''],\n        city: [''],\n        profile_images: this.fb.array([]),\n        links: [[]],\n    });\n\n    constructor(\n        public settings: Settings,\n        private uploadQueue: UploadQueueService,\n        private artists: Artists,\n        private route: ActivatedRoute,\n        private toast: Toast,\n        private router: Router,\n        private fb: FormBuilder,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n        private urls: WebPlayerUrls,\n    ) {}\n\n    ngOnInit() {\n        this.bindToRouteData();\n        this.insideAdmin = this.router.url.includes('admin');\n    }\n\n    public createOrUpdate() {\n        this.artist ? this.update() : this.create();\n    }\n\n    public create() {\n        return this.artists.create(this.form.value).subscribe(response => {\n            this.form.markAsPristine();\n            this.artist = response.artist;\n            this.toast.open('Artist created.');\n            this.router.navigate(this.urls.editArtist(this.artist.id, true), {replaceUrl: true});\n            this.errors = {};\n        }, (errResponse: BackendErrorResponse) => {\n            this.errors = errResponse.errors;\n            this.cd.detectChanges();\n        });\n    }\n\n    public update() {\n        return this.artists.update(this.artist.id, this.form.value).subscribe(() => {\n            this.form.markAsPristine();\n            this.toast.open('Artist updated.');\n            this.router.navigate(['/admin/artists']);\n        }, (errResponse: BackendErrorResponse) => {\n            this.errors = errResponse.errors;\n            this.cd.detectChanges();\n        });\n    }\n\n    public profileImagesArray() {\n        return this.form.get('profile_images') as FormArray;\n    }\n\n    private bindToRouteData() {\n        this.route.data.subscribe((data: {api: {artist?: Artist, albums?: Album[]}}) => {\n            if (data.api) {\n                this.artist = data.api.artist;\n                this.albums = data.api.albums;\n                this.form.patchValue({\n                    name: data.api.artist.name,\n                    verified: data.api.artist.verified,\n                    image_small: data.api.artist.image_small,\n                    spotify_id: data.api.artist.spotify_id,\n                    genres: (data.api.artist.genres || []).map(g => g.name),\n                    description: data.api.artist.profile?.description,\n                    country: data.api.artist.profile?.country,\n                    city: data.api.artist.profile?.city,\n                    profile_images: [],\n                    links: data.api.artist.links,\n                });\n                (data.api.artist.profile_images || []).forEach(img => {\n                    this.addProfileImage(img.url);\n                });\n            }\n        });\n        this.addProfileImage();\n    }\n\n    public addProfileImage(url = '') {\n        this.profileImagesArray().push(new FormControl(url));\n    }\n\n    public removeProfileImage(index: number) {\n        this.profileImagesArray().removeAt(index);\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n\n    public canDeactivate(): boolean {\n        return !this.form.dirty;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {Artists, GetArtistResponse} from '../../../web-player/artists/artists.service';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, of} from 'rxjs';\nimport {BackendResponse} from '@common/core/types/backend-response';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EditArtistPageResolver implements Resolve<GetArtistResponse> {\n\n    constructor(\n        private artists: Artists,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<GetArtistResponse> {\n        const params = {\n            with: ['simplifiedAlbums', 'genres', 'profile'],\n            albumsPerPage: 50,\n            forEditing: true,\n        };\n        const id = +route.paramMap.get('id');\n        return this.artists.get(id, params).pipe(\n            catchError(() => {\n                this.router.navigate(['/']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response.artist) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AudioUploadValidator extends UploadValidator {\n    protected readonly DEFAULT_MAX_SIZE_MB = 50;\n    public showToast = true;\n\n    protected initValidations() {\n        const validations = [\n            new FileSizeValidation(\n                {maxSize: this.getMaxFileSize()},\n                this.i18n\n            ),\n            new FileTypeValidation({types: ['audio', 'video']}, this.i18n),\n        ];\n\n        this.validations.push(...validations);\n    }\n\n    protected getMaxFileSize(): number {\n        return this.settings.get(\n            'uploads.max_size',\n            convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')\n        );\n    }\n}\n","<div class=\"input-container\">\n    <label [for]=\"id\" trans>Artists</label>\n    <input\n        type=\"text\"\n        [id]=\"id\"\n        [formControl]=\"searchControl\"\n        [matAutocomplete]=\"artistAuto\"\n        placeholder=\"Search artists...\"\n        trans-placeholder\n        #searchInput\n    >\n\n    <mat-chip-list [selectable]=\"false\">\n        <mat-chip class=\"chip-with-image\" *ngFor=\"let artist of value$ | async\" [removable]=\"true\" (removed)=\"deselectArtist(artist)\">\n            <img [src]=\"artist.image_small\" [alt]=\"artist.name\">\n            {{artist.name}}\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n    <mat-autocomplete #artistAuto=\"matAutocomplete\" class=\"media-autocomplete-panel\" (optionSelected)=\"selectArtist($event.option.value)\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let artist of searchResults$ | async\" [value]=\"artist\">\n            <img [src]=\"artist.image_small\" [alt]=\"artist.name + ' image'\">\n            <span>{{artist.name}}</span>\n        </mat-option>\n    </mat-autocomplete>\n\n    <div class=\"error\" *ngIf=\"error\">{{error}}</div>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, fromEvent, of as observableOf} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {debounceTime, distinctUntilChanged, take} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {Artist} from '../../../models/Artist';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'track-artist-control',\n    templateUrl: './track-artist-control.component.html',\n    styleUrls: ['./track-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'custom-control'},\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TrackArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class TrackArtistControlComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @Input() error: string;\n    @Input() id: string;\n\n    public searchControl = new FormControl();\n    public value$ = new BehaviorSubject<Artist[]>([]);\n    public searchResults$ = new BehaviorSubject<Artist[]>([]);\n    private propagateChange: (artists: Artist[]) => void;\n\n    constructor(\n        private search: Search,\n        public currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.bindSearchControl();\n    }\n\n    ngAfterViewInit() {\n        fromEvent(this.searchInput.nativeElement, 'focus')\n            .pipe(take(1))\n            .subscribe(() => {\n                this.findMatches();\n            });\n    }\n\n    public writeValue(value: Artist[]) {\n        this.value$.next(value);\n    }\n\n    public registerOnChange(fn: (artists: Artist[]) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public deselectArtist(artist: Artist) {\n        const newArtists = this.value$.value.filter(a => a.id !== artist.id);\n        this.value$.next(newArtists);\n        this.propagateChange(this.value$.value);\n    }\n\n    public selectArtist(artist: Artist) {\n        if (this.value$.value.findIndex(a => a.id === artist.id) === -1) {\n            this.value$.next([...this.value$.value, artist]);\n            this.propagateChange(this.value$.value);\n        }\n        this.searchInput.nativeElement.blur();\n    }\n\n    private bindSearchControl() {\n        this.searchControl.valueChanges\n            .pipe(\n                distinctUntilChanged(),\n                debounceTime(250),\n            ).subscribe(query => {\n                if (typeof query !== 'string') {\n                    return observableOf([]);\n                }\n                this.findMatches(query);\n            });\n    }\n\n    public findMatches(query?: string) {\n        this.search.suggestArtists({query, limit: 7})\n            .subscribe(r => this.searchResults$.next(r.artists));\n    }\n\n    public displayFn(_) {\n        return null;\n    }\n}\n","<div class=\"meta\">\n    <div class=\"name\">{{upload.uploadedFile.name}}</div>\n    <div class=\"time-left\" *ngIf=\"(progress.percentage && progress.percentage < 100) && !upload.error$.value\">\n        {{progress.eta}}\n        <span trans>left</span>\n    </div>\n    <div class=\"actions\">\n        <mat-icon\n                class=\"error-icon action-icon\"\n                svgIcon=\"error-outline\"\n                *ngIf=\"upload.error$ | async as error; else noError\"\n                [matTooltip]=\"error | trans\"\n                matTooltipPosition=\"left\"\n        ></mat-icon>\n        <ng-template #noError>\n            <span *ngIf=\"upload.completed\" trans>Upload complete.</span>\n            <span *ngIf=\"upload.processing$ | async\" trans>We are processing your track for playback…</span>\n            <span class=\"cancel-button\" *ngIf=\"!(upload.processing$ | async) && !upload.completed\" (click)=\"upload.cancel()\" trans>Cancel</span>\n        </ng-template>\n    </div>\n</div>\n<mat-progress-bar [mode]=\"(upload.processing$ | async) ? 'indeterminate' : 'determinate'\" color=\"accent\" [value]=\"progress.percentage\"></mat-progress-bar>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {UploadQueueItem, UploadQueueItemProgress} from '@common/uploads/upload-queue/upload-queue-item';\nimport {throttleTime} from 'rxjs/operators';\nimport {animationFrameScheduler, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'track-upload-header',\n    templateUrl: './track-upload-header.component.html',\n    styleUrls: ['./track-upload-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TrackUploadHeaderComponent implements OnChanges, OnDestroy {\n    @Input() upload: UploadQueueItem;\n    private subscription: Subscription;\n    public progress: UploadQueueItemProgress;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n\n    ngOnChanges() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.subscription = this.upload.progress$.pipe(\n            // material progress bar animation lasts 250ms\n            throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}),\n        ).subscribe(progress => {\n            this.progress = progress;\n            this.cd.detectChanges();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","<div class=\"many-inputs\">\n    <div class=\"input-container\">\n        <div class=\"fake-label\" trans>Album</div>\n        <div class=\"fake-input\" #fakeInput tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\n            <ng-container *ngIf=\"selectedAlbum$ | async as selectedAlbum; else anyAlbum\">\n                <media-image [media]=\"selectedAlbum\"></media-image>\n                <div class=\"title-name\">{{selectedAlbum.name}}</div>\n            </ng-container>\n            <ng-template #anyAlbum>\n                <div class=\"title-name\" trans>None</div>\n            </ng-template>\n            <div class=\"arrow-container\">\n                <div class=\"arrow\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"add-album-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button mat-menu-item (click)=\"selectAlbum(null)\">\n        <media-image default=\"album\"></media-image>\n        <div class=\"info any-user-info\">\n            <div class=\"name\" trans>No Album</div>\n        </div>\n    </button>\n    <button mat-menu-item *ngFor=\"let album of results$ | async\" (click)=\"selectAlbum(album)\">\n        <media-image [media]=\"album\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{album.name}}</div>\n            <artists-links-list class=\"email\" [artists]=\"album.artists\"></artists-links-list>\n        </div>\n    </button>\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(results$ | async).length\" trans>No albums found.</button>\n</mat-menu>\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, map, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Album, ALBUM_MODEL} from '../../../models/Album';\nimport {Search} from '../../../web-player/search/search.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'album-control',\n    templateUrl: './album-control.component.html',\n    styleUrls: ['./album-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumControlComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild('fakeInput') fakeInput: ElementRef<HTMLDivElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public results$ = new BehaviorSubject<Album[]>([]);\n    public selectedAlbum$ = new BehaviorSubject<Album>(null);\n    private propagateChange: (album: Album) => void;\n    public searchedOnce = false;\n\n    constructor(\n        private search: Search,\n        public currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Album) {\n        this.selectedAlbum$.next(value);\n    }\n\n    public registerOnChange(fn: (album: Album) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchAlbums(query)),\n            catchError(() => of([])),\n        ).subscribe(albums => {\n            this.searchedOnce = true;\n            this.results$.next(albums);\n        });\n    }\n\n    private searchAlbums(query: string): Observable<Album[]> {\n        this.loading$.next(true);\n        return this.search.suggestAlbums({query, limit: 7})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.albums),\n            );\n    }\n\n    public onMenuOpened() {\n        const menu = (document.querySelector('.add-album-control-menu') as HTMLElement);\n        menu.style.width = this.fakeInput.nativeElement.getBoundingClientRect().width + 'px';\n\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectAlbum(album: Album) {\n        this.selectedAlbum$.next(album);\n        this.propagateChange(album);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<form (ngSubmit)=\"submit()\" class=\"many-inputs\" [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <track-upload-header [upload]=\"uploadQueueItem\" *ngIf=\"uploadQueueItem\"></track-upload-header>\n    <div class=\"inline-form\" *ngIf=\"albumForm\" [formGroup]=\"form\">\n        <ng-content></ng-content>\n        <div class=\"input-container\">\n            <label [for]=\"'track-form-' + uniqueId + '-name'\" class=\"hidden\" trans>Title</label>\n            <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n        </div>\n        <div class=\"actions\">\n            <button type=\"button\" [class.active]=\"expanded\" mat-icon-button (click)=\"toggleExpandedState()\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" (click)=\"maybeCancel()\" mat-icon-button>\n                <mat-icon svgIcon=\"delete\"></mat-icon>\n            </button>\n        </div>\n    </div>\n    <div [@bodyExpansion]=\"getExpandedState()\" class=\"full-form\">\n        <div class=\"full-form-container\" [class.inside-album]=\"albumForm\">\n            <div class=\"left-column\">\n                <upload-image-control formControlName=\"image\" [defaultBackground]=\"defaultImage$ | async\" diskPrefix=\"track_image\"></upload-image-control>\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"left-column-action-button\" (click)=\"openUploadMusicModal()\">\n                    <span *ngIf=\"this.track\" trans>Replace File</span>\n                    <span *ngIf=\"!this.track\" trans>Upload Track</span>\n                </button>\n            </div>\n            <div class=\"many-inputs fields-container\">\n                <div class=\"input-container\" *ngIf=\"!albumForm\">\n                    <label [for]=\"'track-form-' + uniqueId + '-name'\" trans>Title</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n                    <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                </div>\n\n                <album-control formControlName=\"album\" [id]=\"'track-form-' + uniqueId + '-album_id'\" *ngIf=\"!albumForm\"></album-control>\n                <track-artist-control [error]=\"errors.artists\" [id]=\"'track-form-' + uniqueId + '-artists'\" formControlName=\"artists\"></track-artist-control>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-duration'\" trans>Duration (ms)</label>\n                    <input type=\"number\" [id]=\"'track-form-' + uniqueId + '-duration'\" formControlName=\"duration\" min=\"1\" required>\n                    <div class=\"error\" *ngIf=\"errors.duration\">{{errors.duration}}</div>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-youtube-id'\" trans>Youtube Video ID</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-youtube-id'\" formControlName=\"youtube_id\" minlength=\"1\" maxlength=\"30\">\n                    <div class=\"error\" *ngIf=\"errors.youtube_id\">{{errors.youtube_id}}</div>\n                    <p>ID only. https://www.youtube.com/embed?v=<strong>EPyh41zPg4Z</strong></p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-url'\" trans>Track Url</label>\n                    <input type=\"url\" [id]=\"'track-form-' + uniqueId + '-track-url'\" formControlName=\"url\" minlength=\"1\" maxlength=\"191\">\n                    <div class=\"error\" *ngIf=\"errors.url\">{{errors.url}}</div>\n                    <p>Remote or local url to music or video file for this track. If available, this will always play instead of youtube video.</p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin && settings.get('spotify_is_setup')\">\n                    <label for=\"track-spotify-id\" trans>Spotify ID</label>\n                    <input type=\"text\" id=\"track-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-genres'\" trans>Genres</label>\n                    <chip-input placeholder=\"+Add genre\" [id]=\"'track-form-' + uniqueId + '-track-genres'\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-tags'\" trans>Tags</label>\n                    <chip-input placeholder=\"+Add tag\" [id]=\"'track-form-' + uniqueId + '-track-tags'\" [suggestFn]=\"suggestTagFn\" formControlName=\"tags\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-description'\" trans>Description</label>\n                    <textarea type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-description'\" formControlName=\"description\" minlength=\"10\" maxlength=\"999\" rows=\"5\"></textarea>\n                </div>\n\n                <button type=\"submit\" mat-raised-button *ngIf=\"!albumForm\" color=\"accent\" [disabled]=\"(loading$ | async) || (uploadQueueItem && !uploadQueueItem.completed)\" trans>Save</button>\n                <button type=\"button\" mat-button (click)=\"maybeCancel()\" *ngIf=\"!albumForm && !track\" trans>Cancel</button>\n            </div>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {Track} from '../../models/Track';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {DefaultImagePaths} from '../../web-player/default-image-paths.enum';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {\n    matExpansionAnimations,\n    MatExpansionPanelState\n} from '@angular/material/expansion';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {finalize, map} from 'rxjs/operators';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {Router} from '@angular/router';\nimport {UploadFileResponse} from '@common/uploads/uploads-api.service';\nimport {Album} from '../../models/Album';\nimport {Settings} from '@common/core/config/settings.service';\nimport {isAbsoluteUrl} from '@common/core/utils/is-absolute-url';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {randomString} from '@common/core/utils/random-string';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {Search} from '../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {AppCurrentUser} from '../../app-current-user';\nimport {Artist} from '../../models/Artist';\nimport {TAG_MODEL} from '@common/core/types/models/Tag';\n\nexport interface ExtractedMetadata {\n    title?: string;\n    album?: Album;\n    album_name?: string;\n    artist?: Artist;\n    artist_name?: string;\n    genres?: string[];\n    duration?: number;\n    release_date?: string;\n    comment?: string;\n    image?: FileEntry;\n    lyrics?: string;\n}\n\nexport interface TrackUploadResponse extends UploadFileResponse {\n    metadata?: ExtractedMetadata;\n}\n\n@Component({\n    selector: 'track-form',\n    templateUrl: './track-form.component.html',\n    styleUrls: ['./track-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.bodyExpansion]\n})\nexport class TrackFormComponent implements OnInit, OnChanges {\n    // track that is being edited\n    @Input() track: Track;\n\n    // creating a new track for this upload\n    @Input() uploadQueueItem: UploadQueueItem;\n\n    // track will be saved along with this album\n    @Input() albumForm: FormGroup;\n\n    // number of this track inside parent album\n    @Input() number: number;\n\n    @Output() canceled = new EventEmitter<UploadQueueItem|Track>();\n    @Output() saved = new EventEmitter<Track>();\n\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<Track>]: string}>({});\n    public defaultImage$ = new BehaviorSubject<string>(DefaultImagePaths.album);\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public readonly uniqueId = randomString(5);\n\n    public form = this.fb.group({\n        id: [null],\n        name: [''],\n        image: [''],\n        description: [''],\n        number: [1],\n        tags: [[]],\n        genres: [[]],\n        duration: [null],\n        url: [''],\n        youtube_id: [''],\n        spotify_id: [''],\n        spotify_popularity: [''],\n        album: [null],\n        artists: [[]],\n        waveData: [null],\n        lyrics: [''],\n    });\n    public expanded = false;\n\n    constructor(\n        private fb: FormBuilder,\n        public currentUser: AppCurrentUser,\n        private tracks: Tracks,\n        private toast: Toast,\n        private modal: Modal,\n        private audioValidator: AudioUploadValidator,\n        private uploadQueue: UploadQueueService,\n        private waveGenerator: WaveformGenerator,\n        private router: Router,\n        public settings: Settings,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.number && changes.number.currentValue != null) {\n            this.form.patchValue({number: changes.number.currentValue});\n        }\n    }\n\n    ngOnInit() {\n        this.expanded = !this.albumForm;\n\n        if (this.track) {\n            const formValue = {...this.track};\n            formValue.tags = (this.track.tags || []).map(t => t.name) as any;\n            formValue.genres = (this.track.genres || []).map(t => t.display_name || t.name) as any;\n            this.form.patchValue(formValue);\n\n            if (this.track.album) {\n                this.defaultImage$.next(this.track.album.image || DefaultImagePaths.album);\n            }\n        } else if ( ! this.currentUser.canAttachMusicToAnyArtist()) {\n            this.form.get('artists').setValue([\n                this.currentUser.get('artists')[0] || this.currentUser.artistPlaceholder(),\n            ]);\n        }\n\n        if (this.uploadQueueItem) {\n            this.uploadQueueItem.uploadedResponse$.subscribe((response: TrackUploadResponse) => {\n                this.patchFormUsingFileUpload(response);\n            });\n        }\n\n        if (this.albumForm) {\n            this.albumForm.get('image').valueChanges.subscribe(url => {\n                this.defaultImage$.next(url || DefaultImagePaths.album);\n            });\n        }\n    }\n\n    public getPayload(): Partial<Track> {\n        const customData = this.uploadQueueItem ? this.uploadQueueItem.customData : {};\n        const payload =  {...this.form.value, ...customData};\n        payload.artists = payload.artists.map(a => typeof a !== 'number' ? a.id : a);\n        return payload;\n    }\n\n    public isUploading() {\n        return this.uploadQueueItem && !this.uploadQueueItem.completed;\n    }\n\n    public submit() {\n        if (this.albumForm) return;\n        this.loading$.next(true);\n\n        const payload = this.getPayload();\n\n        const request = this.track ?\n            this.tracks.update(this.track.id, payload) :\n            this.tracks.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (this.uploadQueueItem) {\n                    this.uploadQueue.remove(this.uploadQueueItem.id);\n                }\n                this.toast.open('Track saved.');\n                this.form.markAsPristine();\n                this.saved.emit(response.track);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors$.next(errResponse.errors);\n                scrollInvalidInputIntoView(this.errors$.value, `track-form-${this.uniqueId}`);\n            });\n    }\n\n    public toggleExpandedState() {\n        this.expanded = !this.expanded;\n    }\n\n    public getExpandedState(): MatExpansionPanelState {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n\n    public maybeCancel() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Remove Track',\n            body:  'Are you sure you want to cancel the upload and remove this track?',\n            ok:    'Remove'\n        }).beforeClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            if (this.uploadQueueItem) {\n                this.uploadQueue.remove(this.uploadQueueItem.id);\n                this.canceled.emit(this.uploadQueueItem);\n                this.toast.open('Upload canceled.');\n            } else if (this.track) {\n                this.tracks.delete([this.track.id]).subscribe(() => {\n                    this.canceled.emit(this.track);\n                    this.toast.open('Track deleted.');\n                });\n            }\n        });\n    }\n\n    public openUploadMusicModal() {\n        const params = {\n            uri: 'uploads',\n            validator: this.audioValidator,\n            httpParams: {diskPrefix: 'track_media', disk: 'public'},\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        openUploadWindow({types: [UploadInputTypes.audio, UploadInputTypes.video]}).then(uploadedFiles => {\n            if ( ! uploadedFiles) return;\n            // if this track form is already attached to existing upload queue item\n            // replace that item in queue service instead of creating a new item\n            const replacements = this.uploadQueueItem ? {[this.uploadQueueItem.id]: uploadedFiles[0]} : uploadedFiles;\n            this.uploadQueue.start(replacements, params).subscribe(response => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                    this.form.patchValue({waveData});\n                    queueItem.finishProcessing();\n                });\n                this.patchFormUsingFileUpload(response);\n                this.toast.open('Track uploaded.');\n            }, () => this.toast.open('Could not upload track'));\n            // make sure progress bar is shown if we're editing track from admin\n            if ( ! this.uploadQueueItem) {\n                this.uploadQueueItem = this.uploadQueue.uploads$.value[0];\n                this.cd.markForCheck();\n            }\n        });\n    }\n\n    private patchFormUsingFileUpload(response: TrackUploadResponse) {\n        const values: {[K in keyof Partial<Track>]: any} & {lyrics?: string} = {\n            name: response.metadata.title,\n            duration: response.metadata.duration,\n            url: response.fileEntry.url,\n            genres: response.metadata.genres || [],\n            description: response.metadata.comment,\n            lyrics: response.metadata.lyrics,\n        };\n        if (response.metadata.album) {\n            values.album = response.metadata.album;\n        }\n        if (response.metadata.artist) {\n            values.artists = [response.metadata.artist];\n\n            // set artist on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.artist) {\n                this.albumForm.patchValue({artist: response.metadata.artist});\n            }\n        }\n        if (response.metadata.image) {\n            values.image = response.metadata.image.url;\n\n            // set image on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.image) {\n                this.albumForm.patchValue({image: response.metadata.image.url});\n            }\n        }\n        if (response.metadata.release_date && this.albumForm && !this.albumForm.value.release_date) {\n            this.albumForm.patchValue({release_date: response.metadata.release_date});\n        }\n        this.form.patchValue(values);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public shouldShowDurationField() {\n        const trackUrl = this.form.get('url').value;\n        return !trackUrl || isAbsoluteUrl(trackUrl);\n    }\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {types: [TAG_MODEL], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","export const TAG_MODEL = 'tag';\n\nexport interface Tag {\n    id: number;\n    name: string;\n    display_name: string;\n    type: string;\n    updated_at: string;\n    created_at: string;\n}\n","<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\n    <div class=\"main-info-fields\">\n        <div class=\"left-column\">\n            <upload-image-control formControlName=\"image\" diskPrefix=\"album\"></upload-image-control>\n            <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-tracks-button\" [uploadButton]=\"uploadButtonConfig\" (filesSelected)=\"uploadFiles($event)\" trans>Upload Tracks</button>\n        </div>\n        <div class=\"text-fields-container many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"album-form-name\" trans>Name</label>\n                <input type=\"text\" id=\"album-form-name\" formControlName=\"name\" [readOnly]=\"album && !currentUser.hasPermissions(['music.update'])\" required>\n                <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-release_date\" trans>Release Date</label>\n                <input type=\"date\" placeholder=\"YYYY-MM-DD\" id=\"album-form-release_date\" formControlName=\"release_date\" required>\n                <div class=\"error\" *ngIf=\"errors.release_date\">{{errors.release_date}}</div>\n            </div>\n\n            <track-artist-control [error]=\"errors.artists\" id=\"album-form-artists\" formControlName=\"artists\"></track-artist-control>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-description\" trans>Description</label>\n                <textarea type=\"text\" id=\"album-form-description\" formControlName=\"description\" minlength=\"10\" maxlength=\"250\" rows=\"5\"></textarea>\n                <div class=\"error\" *ngIf=\"errors.description\">{{errors.description}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-genres\" trans>Genres</label>\n                <chip-input placeholder=\"+Add genre\" id=\"album-form-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-tags\" trans>Tags</label>\n                <chip-input placeholder=\"+Add tag\" id=\"album-form-tags\" formControlName=\"tags\" [suggestFn]=\"suggestTagFn\"></chip-input>\n                <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n            </div>\n\n            <div class=\"input-container\" *ngIf=\"insideAdmin && settings.get('spotify_is_setup')\">\n                <label for=\"album-spotify-id\" trans>Spotify ID</label>\n                <input type=\"text\" id=\"album-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n            </div>\n\n            <button type=\"submit\" [disabled]=\"loading$ | async\" mat-raised-button color=\"accent\" trans>Save</button>\n            <button type=\"button\" mat-button (click)=\"maybeCancel()\" trans>Cancel</button>\n        </div>\n    </div>\n</form>\n\n<ul class=\"track-list unstyled-list\" cdkDropList (cdkDropListDropped)=\"reorderTracks($event)\">\n    <li class=\"track-list-item\" *ngFor=\"let track of allTracks$ | async; trackBy: trackByFn; index as index\" cdkDrag>\n        <track-form [albumForm]=\"form\" [track]=\"track\" *ngIf=\"track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\n            <button mat-icon-button cdkDragHandle type=\"button\">\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n            </button>\n        </track-form>\n        <track-form [albumForm]=\"form\" [uploadQueueItem]=\"track\" *ngIf=\"!track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\n            <button mat-icon-button cdkDragHandle type=\"button\">\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n            </button>\n        </track-form>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Track} from '../../../models/Track';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {TrackFormComponent} from '../../../uploading/track-form/track-form.component';\nimport {Settings} from '@common/core/config/settings.service';\n\n@Component({\n    selector: 'crupdate-track-page',\n    templateUrl: './crupdate-track-page.component.html',\n    styleUrls: ['./crupdate-track-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTrackPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(TrackFormComponent, {static: true}) trackForm: AlbumFormComponent;\n    public track: Track;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.track = data.api.track;\n            }\n        });\n    }\n\n    public toTracksPage() {\n        if (this.insideAdmin()) {\n            this.router.navigate(['/admin/tracks']);\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.trackForm.form.dirty;\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.includes('admin');\n    }\n}\n","import { CanDeactivate } from '@angular/router';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {Observable} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n    constructor(private modal: Modal) {}\n\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n        if (component.canDeactivate()) {\n            return true;\n        } else {\n            return this.modal.show(ConfirmModalComponent, {\n                title: 'Unsaved Changes',\n                body:  'You have unsaved changes. Do you want to discard them?',\n                ok:    'Discard'\n            }).beforeClosed();\n        }\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Album} from '../../../models/Album';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../../web-player/web-player-urls.service';\nimport {Artist} from '../../../models/Artist';\n\n@Component({\n    selector: 'crupdate-album-page',\n    templateUrl: './crupdate-album-page.component.html',\n    styleUrls: ['./crupdate-album-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateAlbumPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(AlbumFormComponent, {static: true}) albumForm: AlbumFormComponent;\n    public album: Album;\n    public artist: Artist;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n        public urls: WebPlayerUrls,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.album = data.api.album;\n            }\n        });\n        this.route.queryParams.subscribe(params => {\n            if (params.artist) {\n                this.artist = JSON.parse(atob(params.artist));\n            }\n        });\n    }\n\n    public toAlbumsPage() {\n        if (this.router.url.includes('admin')) {\n            if (this.artist) {\n                this.router.navigate(this.urls.editArtist(this.artist.id, true));\n            } else {\n                this.router.navigate(['/admin/albums']);\n            }\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    public canDeactivate() {\n        if (this.albumForm.form.dirty) {\n            return false;\n        } else if (this.albumForm.trackForms.some(tf => tf.form.dirty)) {\n            return false;\n        }\n        return true;\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Albums} from '../../web-player/albums/albums.service';\nimport {\n    TrackFormComponent,\n    TrackUploadResponse,\n} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {Track} from '../../models/Track';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {\n    UploadInputConfig,\n    UploadInputTypes,\n} from '@common/uploads/upload-input-config';\nimport {Settings} from '@common/core/config/settings.service';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {Search} from '../../web-player/search/search.service';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {AppCurrentUser} from '../../app-current-user';\nimport {TAG_MODEL} from '@common/core/types/models/Tag';\nimport {Artist} from '../../models/Artist';\nimport {Router} from '@angular/router';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\n\n@Component({\n    selector: 'album-form',\n    templateUrl: './album-form.component.html',\n    styleUrls: ['./album-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumFormComponent implements OnInit {\n    public uploadButtonConfig: UploadInputConfig = {\n        multiple: true,\n        types: [UploadInputTypes.audio, UploadInputTypes.video],\n    };\n    public insideAdmin: boolean;\n    // album that is being edited\n    @Input() album: Album;\n    @Input() artist: Artist;\n    @Input() confirmCancel = true;\n    @Output() canceled = new EventEmitter();\n    @Output() saved = new EventEmitter<Album>();\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n\n    public errors: {[K in keyof Partial<Album>]: string} = {};\n    public loading$ = new BehaviorSubject(false);\n    public allTracks$ = new BehaviorSubject<(UploadQueueItem | Track)[]>([]);\n\n    public form = this.fb.group({\n        name: [''],\n        image: [''],\n        artists: [[]],\n        release_date: [new Date().toISOString().slice(0, 10)],\n        description: [''],\n        spotify_id: [''],\n        tags: [[]],\n        genres: [[]],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public uploadQueue: UploadQueueService,\n        private albums: Albums,\n        private cd: ChangeDetectorRef,\n        public currentUser: AppCurrentUser,\n        private modal: Modal,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        public settings: Settings,\n        private search: Search,\n        private router: Router,\n        private waveform: WaveformGenerator\n    ) {}\n\n    ngOnInit() {\n        this.insideAdmin = this.router.url.includes('admin');\n        this.allTracks$ = new BehaviorSubject([\n            ...(this.album ? this.album.tracks : []),\n            ...this.onlyValidUploads(this.uploadQueue.uploads$.value),\n        ]);\n        this.uploadQueue.uploadsAdded$.subscribe(uploads => {\n            this.allTracks$.next([\n                ...this.allTracks$.value,\n                ...this.onlyValidUploads(uploads),\n            ]);\n        });\n\n        // if we are editing an album, hydrate the form\n        if (this.album) {\n            const value = {\n                ...this.album,\n                tags: this.album.tags.map(t => t.name),\n                genres: this.album.genres.map(g => g.display_name || g.name),\n            };\n            this.form.patchValue(value);\n        } else if (this.artist) {\n            this.form.get('artists').setValue([this.artist]);\n            // set album artist as primary artist of current user\n        } else if (!this.currentUser.canAttachMusicToAnyArtist()) {\n            this.form\n                .get('artists')\n                .setValue([\n                    this.currentUser.get('artists')[0] ||\n                        this.currentUser.artistPlaceholder(),\n                ]);\n        }\n    }\n\n    private onlyValidUploads(uploads: UploadQueueItem[]) {\n        return uploads.filter(upload => !upload.error$.value);\n    }\n\n    public reorderTracks(e: CdkDragDrop<never>) {\n        const sortedTracks = this.allTracks$.value;\n        moveItemInArray(sortedTracks, e.previousIndex, e.currentIndex);\n        this.allTracks$.next(sortedTracks);\n    }\n\n    public submit() {\n        if (this.trackForms.some(f => f.isUploading())) {\n            this.toast.open(\n                'Some tracks are still uploading or failed to upload.'\n            );\n            return;\n        }\n\n        this.loading$.next(true);\n\n        const payload = {\n            ...this.form.value,\n            tracks: this.trackForms.map(f => f.getPayload()),\n        };\n        payload.artists = payload.artists.map(a =>\n            typeof a !== 'number' ? a.id : a\n        );\n\n        const request = this.album\n            ? this.albums.update(this.album.id, payload)\n            : this.albums.create(payload);\n\n        request.pipe(finalize(() => this.loading$.next(false))).subscribe(\n            response => {\n                this.form.markAsPristine();\n                this.trackForms.forEach(tf => tf.form.markAsPristine());\n                this.toast.open('Album saved.');\n                this.uploadQueue.reset();\n                this.saved.emit(response.album);\n            },\n            (errResponse: BackendErrorResponse) => {\n                this.errors = errResponse.errors;\n                scrollInvalidInputIntoView(this.errors, 'track-form');\n                this.cd.markForCheck();\n            }\n        );\n    }\n\n    public maybeCancel() {\n        if (!this.confirmCancel) {\n            this.canceled.emit();\n            return;\n        }\n        this.modal\n            .show(ConfirmModalComponent, {\n                title: 'Delete Album',\n                body: 'Are you sure you want to cancel all uploads and delete this album?',\n                ok: 'Delete',\n            })\n            .beforeClosed()\n            .subscribe(confirmed => {\n                if (confirmed) {\n                    this.form.reset();\n                    this.uploadQueue.reset();\n                    this.canceled.emit();\n                }\n            });\n    }\n\n    public uploadFiles(uploadedFiles: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {\n                autoMatchAlbum: false,\n                diskPrefix: 'track_media',\n                disk: 'public',\n            },\n            validator: this.audioValidator,\n        } as UploadApiConfig;\n        this.uploadQueue.start(uploadedFiles, params).subscribe(\n            (response: TrackUploadResponse) => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                const trackForm = this.trackForms.find(\n                    tf => tf.uploadQueueItem?.id === response.queueItemId\n                ).form;\n                this.waveform\n                    .generate(queueItem.uploadedFile.native)\n                    .then(waveData => {\n                        trackForm.patchValue({waveData});\n                        queueItem.finishProcessing();\n                    });\n                trackForm.markAsDirty();\n            },\n            () => this.toast.open('Could not upload tracks.')\n        );\n    }\n\n    public trackRemoved(track: UploadQueueItem | Track) {\n        const newTracks = this.allTracks$.value.filter(t => t.id !== track.id);\n        this.allTracks$.next(newTracks);\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem | Track) =>\n        upload.id;\n\n    public suggestTagFn = (query: string) => {\n        return this.search\n            .media(query, {types: [TAG_MODEL], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    };\n\n    public suggestGenreFn = (query: string) => {\n        return this.search\n            .media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(\n                map(response =>\n                    response.results.genres.map(genre => genre.name)\n                )\n            );\n    };\n}\n","<album-form [album]=\"album\" [artist]=\"artist\" class=\"material-panel\" (canceled)=\"toAlbumsPage()\" [confirmCancel]=\"false\" (saved)=\"toAlbumsPage()\"></album-form>\n","<track-form [track]=\"track\" class=\"material-panel\" (canceled)=\"toTracksPage()\" (saved)=\"toTracksPage()\"></track-form>\n","import { UploadedFile } from '../uploaded-file';\n\nexport async function readUploadedFolders(entries: WebKitEntry[]): Promise<UploadedFile[]> {\n    let files = [];\n\n    for (const key in entries) {\n        const entry = entries[key];\n\n        if ( ! entry.isDirectory) {\n            files.push(await transformFileEntry(entry as WebKitFileEntry));\n        } else {\n            files = files.concat(await readDirRecursive(entry as WebKitDirectoryEntry));\n        }\n    }\n\n    return files;\n}\n\nasync function readDirRecursive(entry: WebKitDirectoryEntry, files = []) {\n    const entries = await readEntries(entry);\n\n    for (const key in entries) {\n        const childEntry = entries[key];\n\n        if (childEntry.isDirectory) {\n            await readDirRecursive(childEntry as WebKitDirectoryEntry, files);\n        } else {\n            files.push(await transformFileEntry(childEntry as WebKitFileEntry));\n        }\n    }\n\n    return files;\n}\n\nfunction readEntries(dir: WebKitDirectoryEntry): Promise<WebKitEntry[]> {\n    return new Promise(resolve => {\n       readEntriesRecursive(dir.createReader(), resolve);\n    });\n}\n\nfunction readEntriesRecursive(reader: WebKitDirectoryReader, resolve, allEntries: WebKitEntry[] = []) {\n    reader.readEntries(entries => {\n        if (entries.length) {\n            allEntries = allEntries.concat(entries);\n            readEntriesRecursive(reader, resolve, allEntries);\n        } else {\n            resolve(allEntries);\n        }\n    });\n}\n\nfunction transformFileEntry(entry: WebKitFileEntry) {\n    return new Promise(resolve => {\n        entry.file((file: any) => {\n            resolve(new UploadedFile(file as File, entry.fullPath));\n        });\n    });\n}\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { openUploadWindow } from '../utils/open-upload-window';\nimport { UploadedFile } from '../uploaded-file';\nimport { readUploadedFolders } from '../utils/read-uploaded-folders';\nimport { UploadInputConfig } from '@common/uploads/upload-input-config';\n\n@Directive({\n    selector: '[fileDropzone]',\n})\nexport class UploadDropzoneDirective implements OnInit, OnDestroy {\n    @Input() disableDropzoneClick = false;\n    @Input() disableDropzone = false;\n    @Input() clickButton: ElementRef;\n    @Input('fileDropzone') uploadConfig: UploadInputConfig = {};\n    @Output() filesDropped: EventEmitter<UploadedFile[]> = new EventEmitter();\n\n    constructor(protected el: ElementRef) {}\n\n    ngOnInit() {\n        const el = this.el.nativeElement;\n        el.addEventListener('dragenter', (e) => this.handleDragEnter(e));\n        el.addEventListener('dragover', (e) => this.handleDragOver(e));\n        el.addEventListener('dragleave', (e) => this.handleDragLeave(e));\n        el.addEventListener('drop', (e) => this.handleDrop(e));\n\n        if ( ! this.disableDropzoneClick) {\n            const trigger = this.clickButton ? this.clickButton.nativeElement : el;\n            trigger.addEventListener('click', () => this.handleClick());\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeClassesFromDropzone();\n    }\n\n    protected handleClick() {\n        if (this.disableDropzone) return;\n        openUploadWindow(this.uploadConfig).then(files => {\n            this.emitUploadEvent(files);\n        });\n    }\n\n    public handleDragEnter(e) {\n        if (this.dropzoneDisabled(e)) return;\n        this.el.nativeElement.classList.add('file-over-dropzone');\n    }\n\n    public handleDragOver(e) {\n        if (e.preventDefault) e.preventDefault();\n        e.dataTransfer.dropEffect = this.dropzoneDisabled(e) ? 'none' : 'move';\n        return false;\n    }\n\n    public handleDragLeave(e: MouseEvent) {\n        const newEl = document.elementFromPoint(e.clientX, e.clientY);\n        if (this.el.nativeElement.contains(newEl)) return;\n        this.removeClassesFromDropzone();\n    }\n\n    public async handleDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        this.removeClassesFromDropzone();\n        if (this.dropzoneDisabled(e) || !e.dataTransfer.items) return;\n\n        const items = Array.from(e.dataTransfer.items)\n            .filter((item: DataTransferItem) => item.kind === 'file')\n            .map((item: DataTransferItem) => {\n                return item.webkitGetAsEntry();\n            });\n\n        if (items.length) {\n            this.emitUploadEvent(await readUploadedFolders(items));\n        }\n    }\n\n    protected emitUploadEvent(files: UploadedFile[]) {\n        this.filesDropped.emit(files);\n    }\n\n    protected removeClassesFromDropzone() {\n        this.el.nativeElement.classList.remove('file-over-dropzone');\n    }\n\n    protected dropzoneDisabled(e: DragEvent) {\n        const hasFiles = e.dataTransfer.types.find(type => type.toLowerCase() === 'files');\n        return this.disableDropzone || ! hasFiles;\n    }\n}\n","<div class=\"media-image-container\" [class.show-album-border]=\"!isTrack(media)\">\n    <media-image [media]=\"media\"></media-image>\n    <img class=\"album-border-image\" [src]=\"settings.getAssetUrl('images/album-border.png')\" alt=\"album border image\">\n</div>\n<div class=\"middle-column\">\n    <div class=\"artist-name\">{{media.artists[0].name}}</div>\n    <div class=\"track-name\">{{media.name}}</div>\n    <div class=\"genre-row\">\n        <mat-chip class=\"track-genre\" *ngIf=\"media.genres.length\">{{media.genres[0].name}}</mat-chip>\n    </div>\n    <div class=\"message\">\n        <span trans>Upload complete.</span> <a [routerLink]=\"mediaLink()\" trans> View now.</a>\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"title\" trans>Share your new {{isTrack(media) ? 'track' : 'album' }}</div>\n    <div class=\"share-icons\">\n        <button mat-icon-button (click)=\"shareUsing('facebook')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/facebook.png')}}\" alt=\"facebook-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('twitter')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/twitter.png')}}\" alt=\"twitter-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('tumblr')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/tumblr.png')}}\" alt=\"tumblr-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('blogger')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/bloggr.png')}}\" alt=\"blogger-icon\">\n        </button>\n    </div>\n    <div class=\"track-link-input input-container\">\n        <label for=\"media-item-link\" class=\"hidden\" trans>Media link</label>\n        <input #trackLinkInput id=\"media-item-link\" type=\"text\" readonly [value]=\"mediaUrl()\" (click)=\"$event.target.select()\">\n    </div>\n</div>\n","import {Component, OnInit, ChangeDetectionStrategy, Input, ViewChild, ElementRef} from '@angular/core';\nimport {Track, TRACK_MODEL} from '../../models/Track';\nimport {ShareableNetworks, shareLinkSocially} from '@common/core/utils/share-link-socially';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../web-player/web-player-urls.service';\nimport {Album} from '../../models/Album';\n\n@Component({\n    selector: 'uploaded-media-preview',\n    templateUrl: './uploaded-media-preview.component.html',\n    styleUrls: ['./uploaded-media-preview.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'material-panel'},\n})\nexport class UploadedMediaPreviewComponent implements OnInit {\n    @ViewChild('trackLinkInput', {static: true}) trackLinkInput: ElementRef<HTMLInputElement>;\n    @Input() media: Track|Album;\n\n    constructor(\n        public settings: Settings,\n        public urls: WebPlayerUrls\n    ) {}\n\n    ngOnInit() {\n        setTimeout(() => {\n            this.trackLinkInput.nativeElement.focus();\n            this.trackLinkInput.nativeElement.select();\n        });\n    }\n\n    public mediaLink() {\n        if (this.isTrack(this.media)) {\n            return this.urls.track(this.media);\n        } else {\n            return this.urls.album(this.media);\n        }\n    }\n\n    public mediaUrl() {\n        return this.urls.routerLinkToUrl(this.mediaLink());\n    }\n\n    public shareUsing(network: ShareableNetworks) {\n        shareLinkSocially(network, this.mediaUrl());\n    }\n\n    public isTrack(media: Track|Album): media is Track {\n        return media.model_type === TRACK_MODEL;\n    }\n}\n","<div\n    class=\"dropzone\"\n    [fileDropzone]=\"uploadConfig\"\n    [clickButton]=\"clickButton\"\n    (filesDropped)=\"uploadTracks($event)\"\n>\n    <div class=\"title\" trans>Drag and drop your tracks, videos & albums here.</div>\n    <div class=\"action-button\">\n        <button\n            mat-flat-button\n            color=\"accent\"\n            type=\"button\"\n            class=\"upload-button\"\n            #clickMatButton\n            trans\n        >\n            or choose files to upload\n        </button>\n    </div>\n    <div class=\"setting-toggle-container\" *ngIf=\"uploadQueue.isEmpty()\">\n        <mat-slide-toggle (change)=\"createAlbum$.next($event.checked)\" trans\n            >Make an album when multiple files are selected</mat-slide-toggle\n        >\n    </div>\n</div>\n\n<div\n    class=\"minutes-container\"\n    *ngIf=\"currentUser.getRestrictionValue('tracks.create', 'minutes') as minuteLimit\"\n>\n    <span\n        >You have {{ minuteLimit }} minutes left. Try\n        <a class=\"hover-underline\" routerLink=\"/billing/upgrade\" target=\"_blank\">Pro accounts</a> to\n        get more time and access to advanced features.</span\n    >\n</div>\n\n<div class=\"track-upload-queue\" *ngIf=\"uploadQueue.uploads$ | async as uploads\">\n    <ng-container *ngIf=\"uploads.length\">\n        <album-form\n            class=\"material-panel\"\n            *ngIf=\"createAlbum$ | async; else createTracks\"\n            (saved)=\"addSavedMedia($event)\"\n        ></album-form>\n        <ng-template #createTracks>\n            <ng-container *ngIf=\"errors$ | async as errors\">\n                <div\n                    class=\"track-panel material-panel\"\n                    *ngFor=\"let upload of uploads; trackBy: trackByFn\"\n                >\n                    <track-form\n                        [uploadQueueItem]=\"upload\"\n                        (saved)=\"addSavedMedia($event)\"\n                    ></track-form>\n                </div>\n            </ng-container>\n        </ng-template>\n    </ng-container>\n</div>\n\n<div class=\"saved-tracks\">\n    <uploaded-media-preview\n        [media]=\"media\"\n        *ngFor=\"let media of savedMedia$ | async\"\n    ></uploaded-media-preview>\n</div>\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {BackstageRequestFormComponent} from './requests/backstage-request-form/backstage-request-form.component';\nimport {BackstageRequestSubmittedComponent} from './requests/backstage-request-submitted/backstage-request-submitted.component';\nimport {BackstageTypeSelectorComponent} from './requests/backstage-type-selector/backstage-type-selector.component';\nimport {CrupdateArtistPageComponent} from './editing/crupdate-artist-page/crupdate-artist-page.component';\nimport {EditArtistPageResolver} from './editing/crupdate-artist-page/crupdate-artist-page-resolver.service';\nimport {CrupdateAlbumPageComponent} from './editing/crupdate-album-page/crupdate-album-page.component';\nimport {PendingChangesGuard} from '@common/guards/pending-changes/pending-changes-guard.service';\nimport {CrupdateTrackPageComponent} from './editing/crupdate-track-page/crupdate-track-page.component';\nimport {TrackPageResolver} from '../web-player/tracks/track-page/track-page-resolver.service';\nimport {UploadPageComponent} from '../uploading/upload-page/upload-page.component';\nimport {CrupdateAlbumPageResolverService} from './editing/crupdate-album-page/crupdate-album-page-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        redirectTo: '/',\n        pathMatch: 'full',\n    },\n    {\n        path: 'requests',\n        component: BackstageTypeSelectorComponent,\n    },\n    {\n        path: 'requests/verify-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/become-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/claim-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/:requestId/request-submitted',\n        component: BackstageRequestSubmittedComponent,\n    },\n\n    //\n    {\n        path: 'upload',\n        component: UploadPageComponent,\n    },\n    {\n        path: 'artists/new',\n        component: CrupdateArtistPageComponent,\n    },\n    {\n        path: 'artists/:id/edit',\n        component: CrupdateArtistPageComponent,\n        resolve: {api: EditArtistPageResolver},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'albums/:id/edit',\n        component: CrupdateAlbumPageComponent,\n        resolve: {api: CrupdateAlbumPageResolverService},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'albums/new',\n        component: CrupdateAlbumPageComponent,\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'tracks/:id/edit',\n        component: CrupdateTrackPageComponent,\n        resolve: {api: TrackPageResolver},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'tracks/new',\n        component: CrupdateTrackPageComponent,\n        canDeactivate: [PendingChangesGuard],\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class BackstageRoutingModule {\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, of} from 'rxjs';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {Albums} from '../../../web-player/albums/albums.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CrupdateAlbumPageResolverService implements Resolve<any> {\n\n    constructor(\n        private albums: Albums,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<any> {\n        const params = {\n            with: ['tags', 'genres', 'artists', 'fullTracks'],\n            albumsPerPage: 50,\n            forEditing: true,\n        };\n        const id = +route.paramMap.get('id');\n        return this.albums.get(id, params).pipe(\n            catchError(() => {\n                this.router.navigate(['/']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response.album) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {\n    UploadInputConfig,\n    UploadInputTypes,\n} from '@common/uploads/upload-input-config';\nimport {Track} from '../../models/Track';\nimport {\n    TrackFormComponent,\n    TrackUploadResponse,\n} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {AlbumFormComponent} from '../album-form/album-form.component';\n\n@Component({\n    selector: 'upload-page',\n    templateUrl: './upload-page.component.html',\n    styleUrls: ['./upload-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class UploadPageComponent {\n    @ViewChild('clickMatButton', {read: ElementRef, static: true})\n    clickButton: ElementRef<HTMLButtonElement>;\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n    @ViewChild(AlbumFormComponent) albumForm: AlbumFormComponent;\n    errors$ = new BehaviorSubject<{\n        [key: string]: {[K in keyof Partial<Track>]: string};\n    }>({});\n    uploadConfig: UploadInputConfig = {\n        types: [UploadInputTypes.video, UploadInputTypes.audio],\n        multiple: true,\n    };\n    savedMedia$ = new BehaviorSubject<(Track | Album)[]>([]);\n    createAlbum$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private track: Tracks,\n        public currentUser: CurrentUser,\n        public uploadQueue: UploadQueueService,\n        public settings: Settings,\n        protected tracks: Tracks,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        private waveGenerator: WaveformGenerator\n    ) {}\n\n    uploadTracks(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {\n                diskPrefix: 'track_media',\n                disk: 'public',\n            },\n            validator: this.audioValidator,\n            willProcessFiles: true,\n            autoMatchAlbum: !this.createAlbum$.value,\n        } as UploadApiConfig;\n        this.uploadQueue\n            .start(files, params)\n            .subscribe((response: TrackUploadResponse) => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator\n                    .generate(queueItem.uploadedFile.native)\n                    .then(waveData => {\n                        queueItem.customData = {waveData};\n                        queueItem.finishProcessing();\n                    });\n\n                if (\n                    this.albumForm &&\n                    !this.albumForm.form.get('name').value &&\n                    response.metadata.album_name\n                ) {\n                    this.albumForm.form.patchValue({\n                        name: response.metadata.album_name,\n                    });\n                }\n            });\n    }\n\n    addSavedMedia(newMedia: Track | Album) {\n        this.savedMedia$.next([...this.savedMedia$.value, newMedia]);\n    }\n\n    trackByFn = (i: number, upload: UploadQueueItem) => upload.id;\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectArtistControlComponent} from './select-artist-control.component';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MediaImageModule} from '../../web-player/shared/media-image/media-image.module';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatButtonModule} from '@angular/material/button';\n\n\n@NgModule({\n    declarations: [\n        SelectArtistControlComponent,\n    ],\n    exports: [\n        SelectArtistControlComponent,\n    ],\n    imports: [\n        CommonModule,\n\n        MatMenuModule,\n        MediaImageModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        LoadingIndicatorModule,\n        MatButtonModule,\n    ]\n})\nexport class SelectArtistControlModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UploadPageComponent} from './upload-page/upload-page.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TrackFormComponent} from './track-form/track-form.component';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {AlbumFormComponent} from './album-form/album-form.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {TrackUploadHeaderComponent} from './track-upload-header/track-upload-header.component';\nimport {TrackArtistControlComponent} from './track-form/track-artist-control/track-artist-control.component';\nimport {AlbumControlComponent} from './track-form/album-control/album-control.component';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {UploadedMediaPreviewComponent} from './uploaded-media-preview/uploaded-media-preview.component';\nimport {UploadingHostComponent} from './uploading-host/uploading-host.component';\nimport {ChipsModule} from '@common/core/ui/chips/chips.module';\nimport {SelectArtistControlModule} from '../shared/select-artist-control/select-artist-control.module';\nimport {ArtistsLinksListModule} from '../web-player/artists/artists-links-list/artists-links-list.module';\n\n@NgModule({\n    declarations: [\n        UploadPageComponent,\n        TrackFormComponent,\n        AlbumFormComponent,\n        TrackUploadHeaderComponent,\n        TrackArtistControlComponent,\n        AlbumControlComponent,\n        UploadedMediaPreviewComponent,\n        UploadingHostComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MediaImageModule,\n        SelectArtistControlModule,\n\n        MatIconModule,\n        MatProgressBarModule,\n        TranslationsModule,\n        UploadsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatButtonModule,\n        ChipsModule,\n        MatChipsModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        UploadImageControlModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatMenuModule,\n        LoadingIndicatorModule,\n        ArtistsLinksListModule,\n    ],\n    exports: [\n        TrackFormComponent,\n        AlbumFormComponent,\n    ]\n})\nexport class UploadingModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BackstageRoutingModule} from './backstage-routing.module';\nimport {MaterialNavbarModule} from '@common/core/ui/material-navbar/material-navbar.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {BackstageRequestFormComponent} from './requests/backstage-request-form/backstage-request-form.component';\nimport {BackstageRequestSubmittedComponent} from './requests/backstage-request-submitted/backstage-request-submitted.component';\nimport {BackstageTypeSelectorComponent} from './requests/backstage-type-selector/backstage-type-selector.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {SelectArtistControlModule} from '../shared/select-artist-control/select-artist-control.module';\nimport {CrupdateArtistPageComponent} from './editing/crupdate-artist-page/crupdate-artist-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ChipsModule} from '@common/core/ui/chips/chips.module';\nimport {ArtistAlbumsTableComponent} from './editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component';\nimport {DatatableModule} from '@common/datatable/datatable.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {ProfileLinksFormControlModule} from '../web-player/shared/profile-links-form-control/profile-links-form-control.module';\nimport {CrupdateTrackPageComponent} from './editing/crupdate-track-page/crupdate-track-page.component';\nimport {CrupdateAlbumPageComponent} from './editing/crupdate-album-page/crupdate-album-page.component';\nimport {UploadingModule} from '../uploading/uploading.module';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n    declarations: [\n        BackstageRequestFormComponent,\n        BackstageRequestSubmittedComponent,\n        BackstageTypeSelectorComponent,\n\n        //\n        CrupdateArtistPageComponent,\n        ArtistAlbumsTableComponent,\n        CrupdateAlbumPageComponent,\n        CrupdateTrackPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        BackstageRoutingModule,\n        UploadingModule,\n        ReactiveFormsModule,\n        FormsModule,\n        SelectArtistControlModule,\n        TranslationsModule,\n        MaterialNavbarModule,\n        MatButtonModule,\n        MatIconModule,\n        MatSlideToggleModule,\n        UploadsModule,\n        UploadImageControlModule,\n        FormatPipesModule,\n        ProfileLinksFormControlModule,\n        LoadingIndicatorModule,\n\n        //\n        MatDialogModule,\n        MatTabsModule,\n        ChipsModule,\n        DatatableModule,\n        MediaImageModule,\n        MatTooltipModule,\n    ]\n})\nexport class BackstageModule {\n}\n"]}