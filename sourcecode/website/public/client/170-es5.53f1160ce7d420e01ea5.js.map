{"version":3,"mappings":"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","names":["t","n","Vt","constructor","e","this","m","l","ngOnInit","bindToSearchControl","writeValue","selectedArtist$","next","registerOnChange","propagateChange","registerOnTouched","setDisabledState","isDisabled$","searchFormControl","valueChanges","pipe","K","tt","ht","searchArtists","$","I","subscribe","searchedOnce","artists$","loading$","search","suggestArtists","query","limit","listAll","M","y","o","artists","onMenuOpened","document","querySelector","style","width","fakeInput","nativeElement","getBoundingClientRect","clearSearchInput","selectArtist","setValue","onMenuClosed","selectors","provide","useExisting","multi","decls","s","jt","et","a","c","d","f","C","k","fb","group","artist","artist_name","currentUser","get","image","b","primaryArtist","image_small","first_name","last_name","role","company","requestType$","route","routeConfig","path","replace","value","Y","form","disable","artistPlaceholder","requestAccess","artist_id","id","type","data","Object","passportScanEntryId","uploadedPassportEntry$","socialProfiles","socialProfiles$","backstage","submitRequest","router","navigate","request","replaceUrl","errors$","errors","retrieveSocialProfile","socialAuth","retrieveProfile","then","uploadPassportScan","uploadQueue","start","uri","httpParams","diskPrefix","disk","validator","imageValidator","fileEntry","removePassportUpload","removeSocialProfile","pe","he","currentUserIsArtist","Ue","datatable","data$","ngOnChanges","encodedArtist","btoa","JSON","stringify","name","insideAdmin","url","includes","init","initialData","albums","maybeDeleteAlbum","modal","show","R","title","body","ok","beforeClosed","z","albumsApi","filter","xt","Ct","verified","spotify_id","genres","description","country","city","profile_images","array","links","J","media","types","nt","N","results","map","v","bindToRouteData","createOrUpdate","update","create","markAsPristine","toast","open","urls","editArtist","cd","detectChanges","profileImagesArray","api","patchValue","profile","forEach","addProfileImage","arguments","push","removeProfileImage","removeAt","canDeactivate","dirty","Z","Se","resolve","paramMap","with","albumsPerPage","forEditing","X","At","factory","ɵfac","ct","i","initValidations","Ee","maxSize","getMaxFileSize","i18n","Re","validations","settings","ze","DEFAULT_MAX_SIZE_MB","Le","Pt","bindSearchControl","ngAfterViewInit","He","searchInput","Ge","findMatches","value$","deselectArtist","findIndex","blur","searchControl","searchResults$","displayFn","oxw","upload","cn","subscription","unsubscribe","progress$","tn","en","leading","trailing","progress","ngOnDestroy","bn","selectedAlbum$","searchAlbums","results$","suggestAlbums","selectAlbum","focus","O","st","Be","number","tags","duration","youtube_id","spotify_popularity","album","waveData","lyrics","A","P","currentValue","expanded","albumForm","track","display_name","defaultImage$","canAttachMusicToAnyArtist","uploadQueueItem","uploadedResponse$","patchFormUsingFileUpload","getPayload","customData","isUploading","completed","submit","tracks","remove","saved","emit","kt","uniqueId","toggleExpandedState","getExpandedState","maybeCancel","canceled","openUploadMusicModal","audioValidator","willProcessFiles","Tt","q","find","queueItemId","waveGenerator","generate","uploadedFile","finishProcessing","uploads$","markForCheck","metadata","comment","release_date","indexOf","shouldShowDurationField","$e","De","changeDetection","W","multiple","Date","toISOString","slice","allTracks$","_toConsumableArray","onlyValidUploads","uploadsAdded$","error$","reorderTracks","F","previousIndex","currentIndex","trackForms","some","reset","confirmCancel","uploadFiles","autoMatchAlbum","waveform","markAsDirty","trackRemoved","qt","queryParams","parse","atob","toAlbumsPage","Q","Ot","toTracksPage","trackForm","_context2","Promise","It","createReader","isDirectory","Mt","Ft","call","readEntries","length","concat","file","Vn","fullPath","Wn","el","addEventListener","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","disableDropzoneClick","clickButton","handleClick","removeClassesFromDropzone","disableDropzone","uploadConfig","emitUploadEvent","dropzoneDisabled","classList","add","preventDefault","dataTransfer","dropEffect","elementFromPoint","clientX","clientY","contains","stopPropagation","items","Array","from","kind","webkitGetAsEntry","filesDropped","toLowerCase","oo","setTimeout","trackLinkInput","select","mediaLink","isTrack","mediaUrl","routerLinkToUrl","shareUsing","to","model_type","Kn","createAlbum$","fo","redirectTo","pathMatch","component","uploadTracks","album_name","addSavedMedia","savedMedia$","Gn","_o","p","Jt","u","T","dt","pt","h","gt","g","Co","Ut","Qt","Nt","w","j","V","wt","mt","Zo","To","ho","bo","xo","Ao","ot","vo"],"sources":["webpack:///src/app/shared/select-artist-control/select-artist-control.component.html","webpack:///src/app/shared/select-artist-control/select-artist-control.component.ts","webpack:///src/app/backstage/requests/backstage-request-form/backstage-request-form.component.html","webpack:///src/app/backstage/requests/backstage-request-form/backstage-request-form.component.ts","webpack:///src/app/backstage/requests/backstage-request-submitted/backstage-request-submitted.component.ts","webpack:///src/app/backstage/requests/backstage-request-submitted/backstage-request-submitted.component.html","webpack:///src/app/backstage/requests/backstage-type-selector/backstage-type-selector.component.html","webpack:///src/app/backstage/requests/backstage-type-selector/backstage-type-selector.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component.html","webpack:///src/app/backstage/editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page.component.html","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page-resolver.service.ts","webpack:///src/app/web-player/audio-upload-validator.ts","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.html","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.ts","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.html","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.ts","webpack:///src/app/uploading/track-form/album-control/album-control.component.html","webpack:///src/app/uploading/track-form/album-control/album-control.component.ts","webpack:///src/app/uploading/track-form/track-form.component.html","webpack:///src/app/uploading/track-form/track-form.component.ts","webpack:///src/common/core/types/models/Tag.ts","webpack:///src/app/uploading/album-form/album-form.component.html","webpack:///src/app/uploading/album-form/album-form.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page.component.html","webpack:///src/common/guards/pending-changes/pending-changes-guard.service.ts","webpack:///src/app/backstage/editing/crupdate-track-page/crupdate-track-page.component.ts","webpack:///src/app/backstage/editing/crupdate-track-page/crupdate-track-page.component.html","webpack:///src/common/uploads/utils/read-uploaded-folders.ts","webpack:///src/common/uploads/directives/upload-dropzone.directive.ts","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.html","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.ts","webpack:///src/app/uploading/upload-page/upload-page.component.html","webpack:///src/app/backstage/backstage-routing.module.ts","webpack:///src/app/uploading/upload-page/upload-page.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page-resolver.service.ts","webpack:///src/app/shared/select-artist-control/select-artist-control.module.ts","webpack:///src/app/uploading/uploading.module.ts","webpack:///src/app/backstage/backstage.module.ts"],"sourcesContent":["<div class=\"fake-input\" #fakeInput [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\" [class.disabled]=\"isDisabled$ | async\">\n        <span *ngIf=\"selectedArtist$ | async as selectedArtist; else anyArtist\">\n            <media-image class=\"result-image\" [media]=\"selectedArtist\"></media-image>\n            {{selectedArtist.name}}\n        </span>\n    <ng-template #anyArtist>\n        <span trans>Select an artist</span>\n    </ng-template>\n    <div class=\"arrow-container\">\n        <div class=\"arrow\"></div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"select-artist-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button type=\"button\" mat-menu-item *ngFor=\"let artist of artists$ | async\" (click)=\"selectArtist(artist)\">\n        <media-image class=\"result-image\" [media]=\"artist\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{artist.name}}</div>\n            <div class=\"email\" trans>Artist</div>\n        </div>\n    </button>\n    <div mat-menu-item disabled *ngIf=\"searchedOnce && !(artists$ | async).length\" trans>No artists found.</div>\n</mat-menu>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    finalize,\n    map,\n    switchMap\n} from 'rxjs/operators';\nimport {Search} from '../../web-player/search/search.service';\nimport {Artist} from '../../models/Artist';\n\n@Component({\n    selector: 'select-artist-control',\n    templateUrl: './select-artist-control.component.html',\n    styleUrls: ['./select-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'tabindex': '0'},\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: SelectArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class SelectArtistControlComponent implements OnInit, ControlValueAccessor {\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild('fakeInput') fakeInput: ElementRef<HTMLDivElement>;\n    @Input() listAll = false;\n    public isDisabled$ = new BehaviorSubject<boolean>(false);\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public artists$ = new BehaviorSubject<Artist[]>([]);\n    public selectedArtist$ = new BehaviorSubject<Artist>(null);\n    private propagateChange: (artist: Artist) => void;\n    public searchedOnce = false;\n\n    constructor(private search: Search) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Artist) {\n        this.selectedArtist$.next(value);\n    }\n\n    public registerOnChange(fn: (artist: Artist) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {\n    }\n\n    public setDisabledState(isDisabled: boolean) {\n        this.isDisabled$.next(isDisabled);\n    }\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchArtists(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.artists$.next(users);\n        });\n    }\n\n    private searchArtists(query: string): Observable<Artist[]> {\n        this.loading$.next(true);\n        return this.search.suggestArtists({\n            query,\n            limit: 7,\n            listAll: this.listAll,\n        }).pipe(\n            finalize(() => this.loading$.next(false)),\n            map(response => response.artists),\n        );\n    }\n\n    public onMenuOpened() {\n        const menu = (document.querySelector('.select-artist-control-menu') as HTMLElement);\n        menu.style.width = this.fakeInput.nativeElement.getBoundingClientRect().width + 'px';\n\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectArtist(artist: Artist) {\n        this.selectedArtist$.next(artist);\n        this.propagateChange(artist);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<h1 trans>Tell us about yourself</h1>\n\n<form (ngSubmit)=\"requestAccess()\" ngNativeValidate [formGroup]=\"form\" class=\"many-inputs\" *ngIf=\"errors$ | async as errors\">\n    <ng-container *ngIf=\"requestType$ | async as requestType\">\n        <upload-image-control formControlName=\"image\" [compact]=\"true\"></upload-image-control>\n\n        <div class=\"input-container\" *ngIf=\"requestType !== 'become-artist'\">\n            <label for=\"backstage-artist\" trans>Select Artist</label>\n            <select-artist-control [listAll]=\"true\" id=\"backstage-artist\" formControlName=\"artist\"></select-artist-control>\n            <div class=\"error\" *ngIf=\"errors.artist_id\">{{errors.artist_id}}</div>\n        </div>\n\n        <div class=\"input-container\" *ngIf=\"requestType === 'become-artist'\">\n            <label for=\"backstage-name\" trans>Your artist name</label>\n            <input type=\"text\" id=\"backstage-name\" formControlName=\"artist_name\" required>\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n        <div class=\"inline-inputs-container many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"backstage-first-name\" trans>First name</label>\n                <input type=\"text\" id=\"backstage-first-name\" formControlName=\"first_name\" required>\n                <div class=\"error\" *ngIf=\"errors.first_name\">{{errors.first_name}}</div>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"backstage-last-name\" trans>Last name</label>\n                <input type=\"text\" id=\"backstage-last-name\" formControlName=\"last_name\" required>\n                <div class=\"error\" *ngIf=\"errors.last_name\">{{errors.last_name}}</div>\n            </div>\n        </div>\n        <div class=\"input-container\" *ngIf=\"requestType === 'claim-artist'\">\n            <label for=\"backstage-role\" trans>Role</label>\n            <select type=\"text\" id=\"backstage-role\" formControlName=\"role\" required>\n                <option [value]=\"null\" disabled trans>Select role</option>\n                <option value=\"artist\" trans>Artist</option>\n                <option value=\"agent\" trans>Agent</option>\n                <option value=\"composer\" trans>Composer</option>\n                <option value=\"label\" trans>Label</option>\n                <option value=\"manager\" trans>Manager</option>\n                <option value=\"musician\" trans>Musician</option>\n                <option value=\"producer\" trans>Producer</option>\n                <option value=\"publisher\" trans>Publisher</option>\n                <option value=\"songwriter\" trans>Songwriter</option>\n            </select>\n            <div class=\"error\" *ngIf=\"errors.role\">{{errors.role}}</div>\n        </div>\n        <div class=\"input-container\">\n            <label for=\"backstage-company\" trans>Company (optional)</label>\n            <input type=\"text\" id=\"backstage-company\" formControlName=\"company\">\n            <div class=\"error\" *ngIf=\"errors.company\">{{errors.company}}</div>\n        </div>\n\n        <div class=\"speed-up-container\">\n            <div class=\"speed-up-title\" trans>Speed up the process by connecting artist social media accounts or uploading your passport scan.</div>\n            <div class=\"speed-up-buttons\">\n                <button type=\"button\" class=\"twitter-btn speed-up-button\" mat-flat-button color=\"accent\" (click)=\"retrieveSocialProfile('twitter')\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"twitter\"></mat-icon>\n                    <span trans>Connect to Twitter</span>\n                </button>\n                <button type=\"button\" mat-flat-button class=\"facebook-btn speed-up-button\" color=\"accent\" (click)=\"retrieveSocialProfile('facebook')\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"facebook\"></mat-icon>\n                    <span trans>Connect to Facebook</span>\n                </button>\n                <button type=\"button\" mat-flat-button color=\"accent\" class=\"passport-btn speed-up-button\" [uploadButton]=\"{types: ['image/*']}\" (filesSelected)=\"uploadPassportScan($event)\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"document-scanner\"></mat-icon>\n                    <span trans>Upload Passport Scan</span>\n                </button>\n            </div>\n            <div class=\"attached-verifications\">\n                <div class=\"facebook-profile verification\" *ngFor=\"let profile of socialProfiles$ | async | keyvalue\">\n                    <img class=\"verification-img\" [src]=\"profile.value.avatar\" alt=\"\">\n                    <div class=\"verification-details\">\n                        <div class=\"verification-name\" trans>{{profile.key}} Profile</div>\n                        <a [href]=\"profile.value.profileUrl\" target=\"_blank\" class=\"verification-url\">{{profile.value.profileUrl}}</a>\n                    </div>\n                    <button class=\"remove-verification\" type=\"button\" mat-icon-button (click)=\"removeSocialProfile(profile.key)\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                </div>\n                <div class=\"passport-attachment verification\" *ngIf=\"uploadedPassportEntry$ | async as entry\">\n                    <mat-icon class=\"verification-img\" svgIcon=\"document-scanner\"></mat-icon>\n                    <div class=\"verification-details\">\n                        <div class=\"verification-name\" trans>Passport Scan</div>\n                        <div>{{entry.name}} ({{entry.file_size | formattedFileSize}})</div>\n                    </div>\n                    <button class=\"remove-verification\" type=\"button\" mat-icon-button (click)=\"removePassportUpload()\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                </div>\n                <upload-progress-bar></upload-progress-bar>\n            </div>\n        </div>\n\n        <div class=\"backstage-action-buttons\">\n            <a class=\"backstage-action-button\" type=\"button\" routerLink=\"/backstage/requests\" mat-raised-button trans>Go Back</a>\n            <button class=\"backstage-action-button\" type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Submit Request</button>\n        </div>\n    </ng-container>\n</form>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BackstagRequestService} from '../backstag-request.service';\nimport {FormBuilder} from '@angular/forms';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {SocialAuthService} from '@common/auth/social-auth.service';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {ImageUploadValidator} from '../../../web-player/image-upload-validator';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {ExternalSocialProfile} from '@common/auth/external-social-profile';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {finalize} from 'rxjs/operators';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BackstageRequestType} from '../backstage-request-type';\nimport {AppCurrentUser} from '../../../app-current-user';\n\n@Component({\n    selector: 'backstage-request-form',\n    templateUrl: './backstage-request-form.component.html',\n    styleUrls: ['./backstage-request-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageRequestFormComponent {\n    public uploadedPassportEntry$ = new BehaviorSubject<FileEntry>(null);\n    public socialProfiles$ = new BehaviorSubject<{[key: string]: ExternalSocialProfile}>(null);\n    public errors$ = new BehaviorSubject<object>({});\n    public loading$ = new BehaviorSubject(false);\n    public requestType$ = new BehaviorSubject<BackstageRequestType>(null);\n    public form = this.fb.group({\n        artist: [],\n        artist_name: [this.currentUser.get('display_name')],\n        image: [this.currentUser.primaryArtist()?.image_small || this.currentUser.get('avatar')],\n        first_name: [this.currentUser.get('first_name')],\n        last_name: [this.currentUser.get('last_name')],\n        role: [],\n        company: [''],\n    });\n\n    constructor(\n        private backstage: BackstagRequestService,\n        private fb: FormBuilder,\n        public settings: Settings,\n        private currentUser: AppCurrentUser,\n        private socialAuth: SocialAuthService,\n        private uploadQueue: UploadQueueService,\n        private imageValidator: ImageUploadValidator,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {\n        this.requestType$.next(this.route.routeConfig.path.replace('requests/', '') as BackstageRequestType);\n        if (this.requestType$.value === BackstageRequestType.verifyArtist) {\n            this.form.get('artist').setValue(this.currentUser.primaryArtist());\n            this.form.get('artist').disable();\n        }\n        if (this.requestType$.value === BackstageRequestType.becomeArtist) {\n            this.form.get('artist').setValue(this.currentUser.artistPlaceholder());\n            this.form.get('artist').disable();\n        }\n        if (this.requestType$.value !== BackstageRequestType.claimArtist) {\n            this.form.get('role').setValue('artist');\n        }\n        if (this.requestType$.value !== BackstageRequestType.becomeArtist) {\n            this.form.get('image').disable();\n        }\n    }\n\n    public requestAccess() {\n        this.loading$.next(true);\n        const payload = {\n            artist_name: this.form.value.artist_name,\n            artist_id: this.form.value.artist?.id,\n            type: this.requestType$.value,\n            data: {\n                ...this.form.value,\n                passportScanEntryId: this.uploadedPassportEntry$.value?.id,\n                socialProfiles: this.socialProfiles$.value,\n            }\n        };\n        this.backstage.submitRequest(payload)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.router.navigate(['/backstage/requests', response.request.id, 'request-submitted'], {replaceUrl: true});\n            }, (err: BackendErrorResponse) => this.errors$.next(err.errors));\n    }\n\n    public retrieveSocialProfile(serviceName: string) {\n        this.socialAuth.retrieveProfile(serviceName).then(profile => {\n            this.socialProfiles$.next({\n                ...this.socialProfiles$.value,\n                [serviceName]: profile,\n            });\n        });\n    }\n\n    public uploadPassportScan(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads/images',\n            httpParams: {diskPrefix: 'test', disk: 'private'},\n            validator: this.imageValidator\n        } as UploadApiConfig;\n        this.uploadQueue.start(files, params).subscribe(response => {\n            this.uploadedPassportEntry$.next(response.fileEntry);\n        });\n    }\n\n    public removePassportUpload() {\n        this.uploadedPassportEntry$.next(null);\n    }\n\n    public removeSocialProfile(serviceName: string) {\n        const profiles = {...this.socialProfiles$.value};\n        delete profiles[serviceName];\n        this.socialProfiles$.next(profiles);\n    }\n}\n","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\n\n@Component({\n    selector: 'backstage-request-submitted',\n    templateUrl: './backstage-request-submitted.component.html',\n    styleUrls: ['./backstage-request-submitted.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageRequestSubmittedComponent {\n}\n","<div class=\"text-align-center\">\n    <mat-icon class=\"check-icon\" svgIcon=\"check\"></mat-icon>\n</div>\n\n<h1 trans>We've got your request</h1>\n\n<ul>\n    <li>Our support team will review it and send you an email within 3 days!</li>\n    <li>Don't submit another request until you hear from us.</li>\n    <li>If this artist profile is already claimed, ask an admin on your team to invite you.</li>\n</ul>\n\n<div class=\"backstage-action-buttons\">\n    <a routerLink=\"/\" class=\"backstage-action-button\" mat-flat-button color=\"accent\" trans>Got It</a>\n</div>\n","<h1 trans [transValues]=\"{sitename: settings.get('branding.site_name')}\">Get Access to :sitename for Artists</h1>\n<h2 trans>First, select the type of your request.</h2>\n\n<div class=\"claim-row\">\n    <a class=\"claim-col\" [routerLink]=\"[currentUserIsArtist ? 'verify-artist' : 'become-artist']\">\n        <div class=\"title\" trans>\n            <ng-container *ngIf=\"currentUserIsArtist\">Get verified</ng-container>\n            <ng-container *ngIf=\"!currentUserIsArtist\">Become an artist</ng-container>\n        </div>\n        <img src=\"client/assets/images/backstage/claim-artist.jpg\" alt=\"\">\n    </a>\n    <a class=\"claim-col\" routerLink=\"claim-artist\">\n        <div class=\"title\" trans>Claim existing artist</div>\n        <img src=\"client/assets/images/backstage/claim-label.jpg\" alt=\"\">\n    </a>\n</div>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {AppCurrentUser} from '../../../app-current-user';\n\n@Component({\n    selector: 'backstage-type-selector',\n    templateUrl: './backstage-type-selector.component.html',\n    styleUrls: ['./backstage-type-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageTypeSelectorComponent {\n    public currentUserIsArtist = false;\n\n    constructor(\n        public settings: Settings,\n        private currentUser: AppCurrentUser,\n    ) {\n        this.currentUserIsArtist = !!this.currentUser.primaryArtist();\n    }\n}\n","<div class=\"datatable\">\n    <datatable-header pluralResourceName=\"albums\">\n        <ng-container leftContent>\n            <div class=\"new-album-container\">\n                <a mat-raised-button color=\"accent\" [routerLink]=\"urls.createAlbum(insideAdmin)\" [queryParams]=\"{artist: encodedArtist}\" *ngIf=\"currentUser.hasPermission('music.create')\" [disabled]=\"!artist\" trans>New Album</a>\n                <p class=\"save-message\" *ngIf=\"!artist\">\n                    <mat-icon svgIcon=\"warning\"></mat-icon>\n                    <span trans>Save artist first to enable album creation.</span>\n                </p>\n            </div>\n        </ng-container>\n    </datatable-header>\n    <table class=\"material-table\">\n        <thead>\n        <tr>\n            <th table-sort-header=\"name\" trans>Album</th>\n            <th table-sort-header trans>Release Date</th>\n            <th table-sort-header=\"views\" trans>Views</th>\n            <th table-sort-header=\"tracks_count\" trans>Number Of Tracks</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let album of albums$ | async\">\n            <td>\n                <div class=\"column-with-image\">\n                    <media-image [media]=\"album\" default=\"album\"></media-image>\n                    <span>{{album.name}}</span>\n                </div>\n            </td>\n            <td data-label=\"Release Date\">{{album.release_date ? album.release_date: '&ndash;'}}</td>\n            <td data-label=\"Views\">{{album.views}}</td>\n            <td data-label=\"Number of Tracks\">{{album.tracks_count ? album.tracks_count : '&ndash;'}}</td>\n            <td class=\"edit-column\">\n                <a [routerLink]=\"urls.editAlbum(album, insideAdmin)\" [queryParams]=\"{artist: encodedArtist}\" mat-icon-button [matTooltip]=\"'Edit album' | trans\">\n                    <mat-icon svgIcon=\"edit\"></mat-icon>\n                </a>\n                <button mat-icon-button (click)=\"maybeDeleteAlbum(album)\" [matTooltip]=\"'Delete album' | trans\" *ngIf=\"currentUser.hasPermission('albums.delete')\" trans>\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\n                </button>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <no-results-message svgImage=\"music.svg\" *ngIf=\"!datatable.data.length\">\n        <span primary-text trans>This artist has no albums yet</span>\n    </no-results-message>\n</div>\n","import {\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {WebPlayerImagesService} from '../../../../web-player/web-player-images.service';\nimport {Artist} from '../../../../models/Artist';\nimport {Album} from '../../../../models/Album';\nimport {Albums} from '../../../../web-player/albums/albums.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\nimport {Observable} from 'rxjs';\nimport {WebPlayerUrls} from '../../../../web-player/web-player-urls.service';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'artist-albums-table',\n    templateUrl: './artist-albums-table.component.html',\n    styleUrls: ['./artist-albums-table.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DatatableService],\n})\nexport class ArtistAlbumsTableComponent implements OnInit, OnChanges {\n    @Input() artist: Artist;\n    @Input() albums: Album[] = [];\n    albums$ = this.datatable.data$ as Observable<Album[]>;\n    encodedArtist: string;\n    insideAdmin: boolean;\n    constructor(\n        private modal: Modal,\n        private albumsApi: Albums,\n        public currentUser: CurrentUser,\n        public images: WebPlayerImagesService,\n        public datatable: DatatableService<Album>,\n        public urls: WebPlayerUrls,\n        private router: Router,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.artist) {\n            this.encodedArtist = btoa(JSON.stringify({\n                id: this.artist.id,\n                name: this.artist.name,\n                image_small: this.artist.image_small\n            }));\n        }\n    }\n\n    ngOnInit() {\n        this.insideAdmin = this.router.url.includes('admin');\n        this.datatable.init({\n            initialData: this.albums ? this.albums : []\n        });\n    }\n\n    public maybeDeleteAlbum(album: Album) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Album',\n            body: 'Are you sure you want to delete this album?',\n            ok: 'Delete'\n        }).beforeClosed().subscribe(async (confirmed) => {\n            if ( ! confirmed) return;\n            this.albumsApi.delete([album.id]).subscribe(() => {\n                this.datatable.data = this.datatable.data.filter(a => a.id !== album.id);\n            });\n        });\n    }\n}\n","<div class=\"material-panel\">\n    <form class=\"edit-main-info\" (ngSubmit)=\"createOrUpdate()\" [formGroup]=\"form\" ngNativeValidate>\n        <div class=\"left-col\">\n            <upload-image-control formControlName=\"image_small\" diskPrefix=\"artist\"></upload-image-control>\n            <button type=\"submit\" mat-raised-button color=\"accent\" class=\"main-button\" *ngIf=\"artist\" trans>Update</button>\n            <button type=\"submit\" mat-raised-button color=\"accent\" class=\"main-button\" *ngIf=\"!artist\" trans>Create</button>\n        </div>\n        <div class=\"right-col many-inputs admin-artist-edit-inputs\">\n\n            <mat-tab-group color=\"accent\" animationDuration=\"0ms\">\n                <mat-tab [label]=\"'Details' | trans\">\n                    <div class=\"many-inputs tab\">\n                        <div class=\"input-container\">\n                            <label for=\"artist-name\" trans>Name</label>\n                            <input type=\"text\" formControlName=\"name\" id=\"artist-name\" [readOnly]=\"!insideAdmin\" required>\n                            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-genres\" trans>Genres</label>\n                            <chip-input placeholder=\"+Add genre\" id=\"artist-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                            <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                        </div>\n                        <ng-container *ngIf=\"insideAdmin\">\n                            <div class=\"input-container\" *ngIf=\"settings.get('spotify_is_setup')\">\n                                <label for=\"artist-spotify-id\" trans>Spotify ID</label>\n                                <input type=\"text\" id=\"artist-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n                            </div>\n                            <div class=\"setting-toggle-container\">\n                                <mat-slide-toggle formControlName=\"verified\" trans>Verified</mat-slide-toggle>\n                                <div class=\"error\" *ngIf=\"errors.verified\">{{errors.verified}}</div>\n                            </div>\n                        </ng-container>\n                    </div>\n                </mat-tab>\n                <mat-tab [label]=\"'Links' | trans\">\n                    <profile-links-form-control formControlName=\"links\"></profile-links-form-control>\n                </mat-tab>\n                <mat-tab [label]=\"'Biography' | trans\">\n                    <div class=\"many-inputs tab\">\n                        <div class=\"input-container\">\n                            <label for=\"artist-country\" trans>Country</label>\n                            <input formControlName=\"country\" id=\"artist-country\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-city\" trans>City</label>\n                            <input formControlName=\"city\" id=\"artist-city\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-bio\" trans>Biography</label>\n                            <textarea formControlName=\"description\" id=\"artist-bio\" rows=\"8\"></textarea>\n                        </div>\n                        <div class=\"profile-images\">\n                            <div class=\"profile-images-title\" trans>Biography Images</div>\n                            <div class=\"profile-images-wrapper\" formArrayName=\"profile_images\">\n                                <upload-image-control\n                                    *ngFor=\"let image of profileImagesArray().controls; index as i\"\n                                    [formControlName]=\"i\"\n                                    (fileDeleted)=\"removeProfileImage(i)\"\n                                    [uploadConfig]=\"{httpParams: {diskPrefix: 'bio'}}\"\n                                    [buttonText]=\"image.value ? 'Replace Image' : 'Upload Image'\"\n                                ></upload-image-control>\n                            </div>\n                        </div>\n                    </div>\n                </mat-tab>\n            </mat-tab-group>\n        </div>\n    </form>\n\n    <artist-albums-table [albums]=\"albums\" [artist]=\"artist\"></artist-albums-table>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit\n} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Artists} from '../../../web-player/artists/artists.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Artist} from '../../../models/Artist';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {FormArray, FormBuilder, FormControl} from '@angular/forms';\nimport {GENRE_MODEL} from '../../../models/Genre';\nimport {map} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {Album} from '../../../models/Album';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {WebPlayerUrls} from '../../../web-player/web-player-urls.service';\n\n@Component({\n    selector: 'crupdate-artist-page',\n    templateUrl: './crupdate-artist-page.component.html',\n    styleUrls: ['./crupdate-artist-page.component.scss'],\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CrupdateArtistPageComponent implements OnInit, ComponentCanDeactivate {\n    public insideAdmin = false;\n    public errors: {[K in keyof Partial<Artist>]: string} = {};\n    public artist: Artist;\n    public albums: Album[] = [];\n\n    public form = this.fb.group({\n        name: [''],\n        verified: [''],\n        image_small: [''],\n        spotify_id: [''],\n        genres: [[]],\n        description: [''],\n        country: [''],\n        city: [''],\n        profile_images: this.fb.array([]),\n        links: [[]],\n    });\n\n    constructor(\n        public settings: Settings,\n        private uploadQueue: UploadQueueService,\n        private artists: Artists,\n        private route: ActivatedRoute,\n        private toast: Toast,\n        private router: Router,\n        private fb: FormBuilder,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n        private urls: WebPlayerUrls,\n    ) {}\n\n    ngOnInit() {\n        this.bindToRouteData();\n        this.insideAdmin = this.router.url.includes('admin');\n    }\n\n    public createOrUpdate() {\n        this.artist ? this.update() : this.create();\n    }\n\n    public create() {\n        return this.artists.create(this.form.value).subscribe(response => {\n            this.form.markAsPristine();\n            this.artist = response.artist;\n            this.toast.open('Artist created.');\n            this.router.navigate(this.urls.editArtist(this.artist.id, true), {replaceUrl: true});\n            this.errors = {};\n        }, (errResponse: BackendErrorResponse) => {\n            this.errors = errResponse.errors;\n            this.cd.detectChanges();\n        });\n    }\n\n    public update() {\n        return this.artists.update(this.artist.id, this.form.value).subscribe(() => {\n            this.form.markAsPristine();\n            this.toast.open('Artist updated.');\n            this.router.navigate(['/admin/artists']);\n        }, (errResponse: BackendErrorResponse) => {\n            this.errors = errResponse.errors;\n            this.cd.detectChanges();\n        });\n    }\n\n    public profileImagesArray() {\n        return this.form.get('profile_images') as FormArray;\n    }\n\n    private bindToRouteData() {\n        this.route.data.subscribe((data: {api: {artist?: Artist, albums?: Album[]}}) => {\n            if (data.api) {\n                this.artist = data.api.artist;\n                this.albums = data.api.albums;\n                this.form.patchValue({\n                    name: data.api.artist.name,\n                    verified: data.api.artist.verified,\n                    image_small: data.api.artist.image_small,\n                    spotify_id: data.api.artist.spotify_id,\n                    genres: (data.api.artist.genres || []).map(g => g.name),\n                    description: data.api.artist.profile?.description,\n                    country: data.api.artist.profile?.country,\n                    city: data.api.artist.profile?.city,\n                    profile_images: [],\n                    links: data.api.artist.links,\n                });\n                (data.api.artist.profile_images || []).forEach(img => {\n                    this.addProfileImage(img.url);\n                });\n            }\n        });\n        this.addProfileImage();\n    }\n\n    public addProfileImage(url = '') {\n        this.profileImagesArray().push(new FormControl(url));\n    }\n\n    public removeProfileImage(index: number) {\n        this.profileImagesArray().removeAt(index);\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n\n    public canDeactivate(): boolean {\n        return !this.form.dirty;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {Artists, GetArtistResponse} from '../../../web-player/artists/artists.service';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, of} from 'rxjs';\nimport {BackendResponse} from '@common/core/types/backend-response';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EditArtistPageResolver implements Resolve<GetArtistResponse> {\n\n    constructor(\n        private artists: Artists,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<GetArtistResponse> {\n        const params = {\n            with: ['simplifiedAlbums', 'genres', 'profile'],\n            albumsPerPage: 50,\n            forEditing: true,\n        };\n        const id = +route.paramMap.get('id');\n        return this.artists.get(id, params).pipe(\n            catchError(() => {\n                this.router.navigate(['/']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response.artist) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AudioUploadValidator extends UploadValidator {\n    protected readonly DEFAULT_MAX_SIZE_MB = 50;\n    public showToast = true;\n\n    protected initValidations() {\n        const validations = [\n            new FileSizeValidation(\n                {maxSize: this.getMaxFileSize()},\n                this.i18n\n            ),\n            new FileTypeValidation({types: ['audio', 'video']}, this.i18n),\n        ];\n\n        this.validations.push(...validations);\n    }\n\n    protected getMaxFileSize(): number {\n        return this.settings.get(\n            'uploads.max_size',\n            convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')\n        );\n    }\n}\n","<div class=\"input-container\">\n    <label [for]=\"id\" trans>Artists</label>\n    <input\n        type=\"text\"\n        [id]=\"id\"\n        [formControl]=\"searchControl\"\n        [matAutocomplete]=\"artistAuto\"\n        placeholder=\"Search artists...\"\n        trans-placeholder\n        #searchInput\n    >\n\n    <mat-chip-list [selectable]=\"false\">\n        <mat-chip class=\"chip-with-image\" *ngFor=\"let artist of value$ | async\" [removable]=\"true\" (removed)=\"deselectArtist(artist)\">\n            <img [src]=\"artist.image_small\" [alt]=\"artist.name\">\n            {{artist.name}}\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n    <mat-autocomplete #artistAuto=\"matAutocomplete\" class=\"media-autocomplete-panel\" (optionSelected)=\"selectArtist($event.option.value)\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let artist of searchResults$ | async\" [value]=\"artist\">\n            <img [src]=\"artist.image_small\" [alt]=\"artist.name + ' image'\">\n            <span>{{artist.name}}</span>\n        </mat-option>\n    </mat-autocomplete>\n\n    <div class=\"error\" *ngIf=\"error\">{{error}}</div>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, fromEvent, of as observableOf} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {debounceTime, distinctUntilChanged, take} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {Artist} from '../../../models/Artist';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'track-artist-control',\n    templateUrl: './track-artist-control.component.html',\n    styleUrls: ['./track-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'custom-control'},\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TrackArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class TrackArtistControlComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @Input() error: string;\n    @Input() id: string;\n\n    public searchControl = new FormControl();\n    public value$ = new BehaviorSubject<Artist[]>([]);\n    public searchResults$ = new BehaviorSubject<Artist[]>([]);\n    private propagateChange: (artists: Artist[]) => void;\n\n    constructor(\n        private search: Search,\n        public currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.bindSearchControl();\n    }\n\n    ngAfterViewInit() {\n        fromEvent(this.searchInput.nativeElement, 'focus')\n            .pipe(take(1))\n            .subscribe(() => {\n                this.findMatches();\n            });\n    }\n\n    public writeValue(value: Artist[]) {\n        this.value$.next(value);\n    }\n\n    public registerOnChange(fn: (artists: Artist[]) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public deselectArtist(artist: Artist) {\n        const newArtists = this.value$.value.filter(a => a.id !== artist.id);\n        this.value$.next(newArtists);\n        this.propagateChange(this.value$.value);\n    }\n\n    public selectArtist(artist: Artist) {\n        if (this.value$.value.findIndex(a => a.id === artist.id) === -1) {\n            this.value$.next([...this.value$.value, artist]);\n            this.propagateChange(this.value$.value);\n        }\n        this.searchInput.nativeElement.blur();\n    }\n\n    private bindSearchControl() {\n        this.searchControl.valueChanges\n            .pipe(\n                distinctUntilChanged(),\n                debounceTime(250),\n            ).subscribe(query => {\n                if (typeof query !== 'string') {\n                    return observableOf([]);\n                }\n                this.findMatches(query);\n            });\n    }\n\n    public findMatches(query?: string) {\n        this.search.suggestArtists({query, limit: 7})\n            .subscribe(r => this.searchResults$.next(r.artists));\n    }\n\n    public displayFn(_) {\n        return null;\n    }\n}\n","<div class=\"meta\">\n    <div class=\"name\">{{upload.uploadedFile.name}}</div>\n    <div class=\"time-left\" *ngIf=\"(progress.percentage && progress.percentage < 100) && !upload.error$.value\">\n        {{progress.eta}}\n        <span trans>left</span>\n    </div>\n    <div class=\"actions\">\n        <mat-icon\n                class=\"error-icon action-icon\"\n                svgIcon=\"error-outline\"\n                *ngIf=\"upload.error$ | async as error; else noError\"\n                [matTooltip]=\"error | trans\"\n                matTooltipPosition=\"left\"\n        ></mat-icon>\n        <ng-template #noError>\n            <span *ngIf=\"upload.completed\" trans>Upload complete.</span>\n            <span *ngIf=\"upload.processing$ | async\" trans>We are processing your track for playback…</span>\n            <span class=\"cancel-button\" *ngIf=\"!(upload.processing$ | async) && !upload.completed\" (click)=\"upload.cancel()\" trans>Cancel</span>\n        </ng-template>\n    </div>\n</div>\n<mat-progress-bar [mode]=\"(upload.processing$ | async) ? 'indeterminate' : 'determinate'\" color=\"accent\" [value]=\"progress.percentage\"></mat-progress-bar>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {UploadQueueItem, UploadQueueItemProgress} from '@common/uploads/upload-queue/upload-queue-item';\nimport {throttleTime} from 'rxjs/operators';\nimport {animationFrameScheduler, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'track-upload-header',\n    templateUrl: './track-upload-header.component.html',\n    styleUrls: ['./track-upload-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TrackUploadHeaderComponent implements OnChanges, OnDestroy {\n    @Input() upload: UploadQueueItem;\n    private subscription: Subscription;\n    public progress: UploadQueueItemProgress;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n\n    ngOnChanges() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.subscription = this.upload.progress$.pipe(\n            // material progress bar animation lasts 250ms\n            throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}),\n        ).subscribe(progress => {\n            this.progress = progress;\n            this.cd.detectChanges();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","<div class=\"many-inputs\">\n    <div class=\"input-container\">\n        <div class=\"fake-label\" trans>Album</div>\n        <div class=\"fake-input\" #fakeInput tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\n            <ng-container *ngIf=\"selectedAlbum$ | async as selectedAlbum; else anyAlbum\">\n                <media-image [media]=\"selectedAlbum\"></media-image>\n                <div class=\"title-name\">{{selectedAlbum.name}}</div>\n            </ng-container>\n            <ng-template #anyAlbum>\n                <div class=\"title-name\" trans>None</div>\n            </ng-template>\n            <div class=\"arrow-container\">\n                <div class=\"arrow\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"add-album-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button mat-menu-item (click)=\"selectAlbum(null)\">\n        <media-image default=\"album\"></media-image>\n        <div class=\"info any-user-info\">\n            <div class=\"name\" trans>No Album</div>\n        </div>\n    </button>\n    <button mat-menu-item *ngFor=\"let album of results$ | async\" (click)=\"selectAlbum(album)\">\n        <media-image [media]=\"album\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{album.name}}</div>\n            <artists-links-list class=\"email\" [artists]=\"album.artists\"></artists-links-list>\n        </div>\n    </button>\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(results$ | async).length\" trans>No albums found.</button>\n</mat-menu>\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, map, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Album, ALBUM_MODEL} from '../../../models/Album';\nimport {Search} from '../../../web-player/search/search.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'album-control',\n    templateUrl: './album-control.component.html',\n    styleUrls: ['./album-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumControlComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild('fakeInput') fakeInput: ElementRef<HTMLDivElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public results$ = new BehaviorSubject<Album[]>([]);\n    public selectedAlbum$ = new BehaviorSubject<Album>(null);\n    private propagateChange: (album: Album) => void;\n    public searchedOnce = false;\n\n    constructor(\n        private search: Search,\n        public currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Album) {\n        this.selectedAlbum$.next(value);\n    }\n\n    public registerOnChange(fn: (album: Album) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchAlbums(query)),\n            catchError(() => of([])),\n        ).subscribe(albums => {\n            this.searchedOnce = true;\n            this.results$.next(albums);\n        });\n    }\n\n    private searchAlbums(query: string): Observable<Album[]> {\n        this.loading$.next(true);\n        return this.search.suggestAlbums({query, limit: 7})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.albums),\n            );\n    }\n\n    public onMenuOpened() {\n        const menu = (document.querySelector('.add-album-control-menu') as HTMLElement);\n        menu.style.width = this.fakeInput.nativeElement.getBoundingClientRect().width + 'px';\n\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectAlbum(album: Album) {\n        this.selectedAlbum$.next(album);\n        this.propagateChange(album);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<form (ngSubmit)=\"submit()\" class=\"many-inputs\" [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <track-upload-header [upload]=\"uploadQueueItem\" *ngIf=\"uploadQueueItem\"></track-upload-header>\n    <div class=\"inline-form\" *ngIf=\"albumForm\" [formGroup]=\"form\">\n        <ng-content></ng-content>\n        <div class=\"input-container\">\n            <label [for]=\"'track-form-' + uniqueId + '-name'\" class=\"hidden\" trans>Title</label>\n            <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n        </div>\n        <div class=\"actions\">\n            <button type=\"button\" [class.active]=\"expanded\" mat-icon-button (click)=\"toggleExpandedState()\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" (click)=\"maybeCancel()\" mat-icon-button>\n                <mat-icon svgIcon=\"delete\"></mat-icon>\n            </button>\n        </div>\n    </div>\n    <div [@bodyExpansion]=\"getExpandedState()\" class=\"full-form\">\n        <div class=\"full-form-container\" [class.inside-album]=\"albumForm\">\n            <div class=\"left-column\">\n                <upload-image-control formControlName=\"image\" [defaultBackground]=\"defaultImage$ | async\" diskPrefix=\"track_image\"></upload-image-control>\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"left-column-action-button\" (click)=\"openUploadMusicModal()\">\n                    <span *ngIf=\"this.track\" trans>Replace File</span>\n                    <span *ngIf=\"!this.track\" trans>Upload Track</span>\n                </button>\n            </div>\n            <div class=\"many-inputs fields-container\">\n                <div class=\"input-container\" *ngIf=\"!albumForm\">\n                    <label [for]=\"'track-form-' + uniqueId + '-name'\" trans>Title</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n                    <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                </div>\n\n                <album-control formControlName=\"album\" [id]=\"'track-form-' + uniqueId + '-album_id'\" *ngIf=\"!albumForm\"></album-control>\n                <track-artist-control [error]=\"errors.artists\" [id]=\"'track-form-' + uniqueId + '-artists'\" formControlName=\"artists\"></track-artist-control>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-duration'\" trans>Duration (ms)</label>\n                    <input type=\"number\" [id]=\"'track-form-' + uniqueId + '-duration'\" formControlName=\"duration\" min=\"1\" required>\n                    <div class=\"error\" *ngIf=\"errors.duration\">{{errors.duration}}</div>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-youtube-id'\" trans>Youtube Video ID</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-youtube-id'\" formControlName=\"youtube_id\" minlength=\"1\" maxlength=\"30\">\n                    <div class=\"error\" *ngIf=\"errors.youtube_id\">{{errors.youtube_id}}</div>\n                    <p>ID only. https://www.youtube.com/embed?v=<strong>EPyh41zPg4Z</strong></p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-url'\" trans>Track Url</label>\n                    <input type=\"url\" [id]=\"'track-form-' + uniqueId + '-track-url'\" formControlName=\"url\" minlength=\"1\" maxlength=\"191\">\n                    <div class=\"error\" *ngIf=\"errors.url\">{{errors.url}}</div>\n                    <p>Remote or local url to music or video file for this track. If available, this will always play instead of youtube video.</p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin && settings.get('spotify_is_setup')\">\n                    <label for=\"track-spotify-id\" trans>Spotify ID</label>\n                    <input type=\"text\" id=\"track-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-genres'\" trans>Genres</label>\n                    <chip-input placeholder=\"+Add genre\" [id]=\"'track-form-' + uniqueId + '-track-genres'\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-tags'\" trans>Tags</label>\n                    <chip-input placeholder=\"+Add tag\" [id]=\"'track-form-' + uniqueId + '-track-tags'\" [suggestFn]=\"suggestTagFn\" formControlName=\"tags\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-description'\" trans>Description</label>\n                    <textarea type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-description'\" formControlName=\"description\" minlength=\"10\" maxlength=\"999\" rows=\"5\"></textarea>\n                </div>\n\n                <button type=\"submit\" mat-raised-button *ngIf=\"!albumForm\" color=\"accent\" [disabled]=\"(loading$ | async) || (uploadQueueItem && !uploadQueueItem.completed)\" trans>Save</button>\n                <button type=\"button\" mat-button (click)=\"maybeCancel()\" *ngIf=\"!albumForm && !track\" trans>Cancel</button>\n            </div>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {Track} from '../../models/Track';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {DefaultImagePaths} from '../../web-player/default-image-paths.enum';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {\n    matExpansionAnimations,\n    MatExpansionPanelState\n} from '@angular/material/expansion';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {finalize, map} from 'rxjs/operators';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {Router} from '@angular/router';\nimport {UploadFileResponse} from '@common/uploads/uploads-api.service';\nimport {Album} from '../../models/Album';\nimport {Settings} from '@common/core/config/settings.service';\nimport {isAbsoluteUrl} from '@common/core/utils/is-absolute-url';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {randomString} from '@common/core/utils/random-string';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {Search} from '../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {AppCurrentUser} from '../../app-current-user';\nimport {Artist} from '../../models/Artist';\nimport {TAG_MODEL} from '@common/core/types/models/Tag';\n\nexport interface ExtractedMetadata {\n    title?: string;\n    album?: Album;\n    album_name?: string;\n    artist?: Artist;\n    artist_name?: string;\n    genres?: string[];\n    duration?: number;\n    release_date?: string;\n    comment?: string;\n    image?: FileEntry;\n    lyrics?: string;\n}\n\nexport interface TrackUploadResponse extends UploadFileResponse {\n    metadata?: ExtractedMetadata;\n}\n\n@Component({\n    selector: 'track-form',\n    templateUrl: './track-form.component.html',\n    styleUrls: ['./track-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.bodyExpansion]\n})\nexport class TrackFormComponent implements OnInit, OnChanges {\n    // track that is being edited\n    @Input() track: Track;\n\n    // creating a new track for this upload\n    @Input() uploadQueueItem: UploadQueueItem;\n\n    // track will be saved along with this album\n    @Input() albumForm: FormGroup;\n\n    // number of this track inside parent album\n    @Input() number: number;\n\n    @Output() canceled = new EventEmitter<UploadQueueItem|Track>();\n    @Output() saved = new EventEmitter<Track>();\n\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<Track>]: string}>({});\n    public defaultImage$ = new BehaviorSubject<string>(DefaultImagePaths.album);\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public readonly uniqueId = randomString(5);\n\n    public form = this.fb.group({\n        id: [null],\n        name: [''],\n        image: [''],\n        description: [''],\n        number: [1],\n        tags: [[]],\n        genres: [[]],\n        duration: [null],\n        url: [''],\n        youtube_id: [''],\n        spotify_id: [''],\n        spotify_popularity: [''],\n        album: [null],\n        artists: [[]],\n        waveData: [null],\n        lyrics: [''],\n    });\n    public expanded = false;\n\n    constructor(\n        private fb: FormBuilder,\n        public currentUser: AppCurrentUser,\n        private tracks: Tracks,\n        private toast: Toast,\n        private modal: Modal,\n        private audioValidator: AudioUploadValidator,\n        private uploadQueue: UploadQueueService,\n        private waveGenerator: WaveformGenerator,\n        private router: Router,\n        public settings: Settings,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.number && changes.number.currentValue != null) {\n            this.form.patchValue({number: changes.number.currentValue});\n        }\n    }\n\n    ngOnInit() {\n        this.expanded = !this.albumForm;\n\n        if (this.track) {\n            const formValue = {...this.track};\n            formValue.tags = (this.track.tags || []).map(t => t.name) as any;\n            formValue.genres = (this.track.genres || []).map(t => t.display_name || t.name) as any;\n            this.form.patchValue(formValue);\n\n            if (this.track.album) {\n                this.defaultImage$.next(this.track.album.image || DefaultImagePaths.album);\n            }\n        } else if ( ! this.currentUser.canAttachMusicToAnyArtist()) {\n            this.form.get('artists').setValue([\n                this.currentUser.get('artists')[0] || this.currentUser.artistPlaceholder(),\n            ]);\n        }\n\n        if (this.uploadQueueItem) {\n            this.uploadQueueItem.uploadedResponse$.subscribe((response: TrackUploadResponse) => {\n                this.patchFormUsingFileUpload(response);\n            });\n        }\n\n        if (this.albumForm) {\n            this.albumForm.get('image').valueChanges.subscribe(url => {\n                this.defaultImage$.next(url || DefaultImagePaths.album);\n            });\n        }\n    }\n\n    public getPayload(): Partial<Track> {\n        const customData = this.uploadQueueItem ? this.uploadQueueItem.customData : {};\n        const payload =  {...this.form.value, ...customData};\n        payload.artists = payload.artists.map(a => typeof a !== 'number' ? a.id : a);\n        return payload;\n    }\n\n    public isUploading() {\n        return this.uploadQueueItem && !this.uploadQueueItem.completed;\n    }\n\n    public submit() {\n        if (this.albumForm) return;\n        this.loading$.next(true);\n\n        const payload = this.getPayload();\n\n        const request = this.track ?\n            this.tracks.update(this.track.id, payload) :\n            this.tracks.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (this.uploadQueueItem) {\n                    this.uploadQueue.remove(this.uploadQueueItem.id);\n                }\n                this.toast.open('Track saved.');\n                this.form.markAsPristine();\n                this.saved.emit(response.track);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors$.next(errResponse.errors);\n                scrollInvalidInputIntoView(this.errors$.value, `track-form-${this.uniqueId}`);\n            });\n    }\n\n    public toggleExpandedState() {\n        this.expanded = !this.expanded;\n    }\n\n    public getExpandedState(): MatExpansionPanelState {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n\n    public maybeCancel() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Remove Track',\n            body:  'Are you sure you want to cancel the upload and remove this track?',\n            ok:    'Remove'\n        }).beforeClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            if (this.uploadQueueItem) {\n                this.uploadQueue.remove(this.uploadQueueItem.id);\n                this.canceled.emit(this.uploadQueueItem);\n                this.toast.open('Upload canceled.');\n            } else if (this.track) {\n                this.tracks.delete([this.track.id]).subscribe(() => {\n                    this.canceled.emit(this.track);\n                    this.toast.open('Track deleted.');\n                });\n            }\n        });\n    }\n\n    public openUploadMusicModal() {\n        const params = {\n            uri: 'uploads',\n            validator: this.audioValidator,\n            httpParams: {diskPrefix: 'track_media', disk: 'public'},\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        openUploadWindow({types: [UploadInputTypes.audio, UploadInputTypes.video]}).then(uploadedFiles => {\n            if ( ! uploadedFiles) return;\n            // if this track form is already attached to existing upload queue item\n            // replace that item in queue service instead of creating a new item\n            const replacements = this.uploadQueueItem ? {[this.uploadQueueItem.id]: uploadedFiles[0]} : uploadedFiles;\n            this.uploadQueue.start(replacements, params).subscribe(response => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                    this.form.patchValue({waveData});\n                    queueItem.finishProcessing();\n                });\n                this.patchFormUsingFileUpload(response);\n                this.toast.open('Track uploaded.');\n            }, () => this.toast.open('Could not upload track'));\n            // make sure progress bar is shown if we're editing track from admin\n            if ( ! this.uploadQueueItem) {\n                this.uploadQueueItem = this.uploadQueue.uploads$.value[0];\n                this.cd.markForCheck();\n            }\n        });\n    }\n\n    private patchFormUsingFileUpload(response: TrackUploadResponse) {\n        const values: {[K in keyof Partial<Track>]: any} & {lyrics?: string} = {\n            name: response.metadata.title,\n            duration: response.metadata.duration,\n            url: response.fileEntry.url,\n            genres: response.metadata.genres || [],\n            description: response.metadata.comment,\n            lyrics: response.metadata.lyrics,\n        };\n        if (response.metadata.album) {\n            values.album = response.metadata.album;\n        }\n        if (response.metadata.artist) {\n            values.artists = [response.metadata.artist];\n\n            // set artist on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.artist) {\n                this.albumForm.patchValue({artist: response.metadata.artist});\n            }\n        }\n        if (response.metadata.image) {\n            values.image = response.metadata.image.url;\n\n            // set image on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.image) {\n                this.albumForm.patchValue({image: response.metadata.image.url});\n            }\n        }\n        if (response.metadata.release_date && this.albumForm && !this.albumForm.value.release_date) {\n            this.albumForm.patchValue({release_date: response.metadata.release_date});\n        }\n        this.form.patchValue(values);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public shouldShowDurationField() {\n        const trackUrl = this.form.get('url').value;\n        return !trackUrl || isAbsoluteUrl(trackUrl);\n    }\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {types: [TAG_MODEL], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","export const TAG_MODEL = 'tag';\n\nexport interface Tag {\n    id: number;\n    name: string;\n    display_name: string;\n    type: string;\n    updated_at: string;\n    created_at: string;\n}\n","<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\n    <div class=\"main-info-fields\">\n        <div class=\"left-column\">\n            <upload-image-control formControlName=\"image\" diskPrefix=\"album\"></upload-image-control>\n            <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-tracks-button\" [uploadButton]=\"uploadButtonConfig\" (filesSelected)=\"uploadFiles($event)\" trans>Upload Tracks</button>\n        </div>\n        <div class=\"text-fields-container many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"album-form-name\" trans>Name</label>\n                <input type=\"text\" id=\"album-form-name\" formControlName=\"name\" [readOnly]=\"album && !currentUser.hasPermissions(['music.update'])\" required>\n                <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-release_date\" trans>Release Date</label>\n                <input type=\"date\" placeholder=\"YYYY-MM-DD\" id=\"album-form-release_date\" formControlName=\"release_date\" required>\n                <div class=\"error\" *ngIf=\"errors.release_date\">{{errors.release_date}}</div>\n            </div>\n\n            <track-artist-control [error]=\"errors.artists\" id=\"album-form-artists\" formControlName=\"artists\"></track-artist-control>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-description\" trans>Description</label>\n                <textarea type=\"text\" id=\"album-form-description\" formControlName=\"description\" minlength=\"10\" maxlength=\"250\" rows=\"5\"></textarea>\n                <div class=\"error\" *ngIf=\"errors.description\">{{errors.description}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-genres\" trans>Genres</label>\n                <chip-input placeholder=\"+Add genre\" id=\"album-form-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-tags\" trans>Tags</label>\n                <chip-input placeholder=\"+Add tag\" id=\"album-form-tags\" formControlName=\"tags\" [suggestFn]=\"suggestTagFn\"></chip-input>\n                <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n            </div>\n\n            <div class=\"input-container\" *ngIf=\"insideAdmin && settings.get('spotify_is_setup')\">\n                <label for=\"album-spotify-id\" trans>Spotify ID</label>\n                <input type=\"text\" id=\"album-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n            </div>\n\n            <button type=\"submit\" [disabled]=\"loading$ | async\" mat-raised-button color=\"accent\" trans>Save</button>\n            <button type=\"button\" mat-button (click)=\"maybeCancel()\" trans>Cancel</button>\n        </div>\n    </div>\n</form>\n\n<ul class=\"track-list unstyled-list\" cdkDropList (cdkDropListDropped)=\"reorderTracks($event)\">\n    <li class=\"track-list-item\" *ngFor=\"let track of allTracks$ | async; trackBy: trackByFn; index as index\" cdkDrag>\n        <track-form [albumForm]=\"form\" [track]=\"track\" *ngIf=\"track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\n            <button mat-icon-button cdkDragHandle type=\"button\">\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n            </button>\n        </track-form>\n        <track-form [albumForm]=\"form\" [uploadQueueItem]=\"track\" *ngIf=\"!track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\n            <button mat-icon-button cdkDragHandle type=\"button\">\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n            </button>\n        </track-form>\n    </li>\n</ul>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Albums} from '../../web-player/albums/albums.service';\nimport {\n    TrackFormComponent,\n    TrackUploadResponse,\n} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {Track} from '../../models/Track';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {\n    UploadInputConfig,\n    UploadInputTypes,\n} from '@common/uploads/upload-input-config';\nimport {Settings} from '@common/core/config/settings.service';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {Search} from '../../web-player/search/search.service';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {AppCurrentUser} from '../../app-current-user';\nimport {TAG_MODEL} from '@common/core/types/models/Tag';\nimport {Artist} from '../../models/Artist';\nimport {Router} from '@angular/router';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\n\n@Component({\n    selector: 'album-form',\n    templateUrl: './album-form.component.html',\n    styleUrls: ['./album-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumFormComponent implements OnInit {\n    public uploadButtonConfig: UploadInputConfig = {\n        multiple: true,\n        types: [UploadInputTypes.audio, UploadInputTypes.video],\n    };\n    public insideAdmin: boolean;\n    // album that is being edited\n    @Input() album: Album;\n    @Input() artist: Artist;\n    @Input() confirmCancel = true;\n    @Output() canceled = new EventEmitter();\n    @Output() saved = new EventEmitter<Album>();\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n\n    public errors: {[K in keyof Partial<Album>]: string} = {};\n    public loading$ = new BehaviorSubject(false);\n    public allTracks$ = new BehaviorSubject<(UploadQueueItem | Track)[]>([]);\n\n    public form = this.fb.group({\n        name: [''],\n        image: [''],\n        artists: [[]],\n        release_date: [new Date().toISOString().slice(0, 10)],\n        description: [''],\n        spotify_id: [''],\n        tags: [[]],\n        genres: [[]],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public uploadQueue: UploadQueueService,\n        private albums: Albums,\n        private cd: ChangeDetectorRef,\n        public currentUser: AppCurrentUser,\n        private modal: Modal,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        public settings: Settings,\n        private search: Search,\n        private router: Router,\n        private waveform: WaveformGenerator\n    ) {}\n\n    ngOnInit() {\n        this.insideAdmin = this.router.url.includes('admin');\n        this.allTracks$ = new BehaviorSubject([\n            ...(this.album ? this.album.tracks : []),\n            ...this.onlyValidUploads(this.uploadQueue.uploads$.value),\n        ]);\n        this.uploadQueue.uploadsAdded$.subscribe(uploads => {\n            this.allTracks$.next([\n                ...this.allTracks$.value,\n                ...this.onlyValidUploads(uploads),\n            ]);\n        });\n\n        // if we are editing an album, hydrate the form\n        if (this.album) {\n            const value = {\n                ...this.album,\n                tags: this.album.tags.map(t => t.name),\n                genres: this.album.genres.map(g => g.display_name || g.name),\n            };\n            this.form.patchValue(value);\n        } else if (this.artist) {\n            this.form.get('artists').setValue([this.artist]);\n            // set album artist as primary artist of current user\n        } else if (!this.currentUser.canAttachMusicToAnyArtist()) {\n            this.form\n                .get('artists')\n                .setValue([\n                    this.currentUser.get('artists')[0] ||\n                        this.currentUser.artistPlaceholder(),\n                ]);\n        }\n    }\n\n    private onlyValidUploads(uploads: UploadQueueItem[]) {\n        return uploads.filter(upload => !upload.error$.value);\n    }\n\n    public reorderTracks(e: CdkDragDrop<never>) {\n        const sortedTracks = this.allTracks$.value;\n        moveItemInArray(sortedTracks, e.previousIndex, e.currentIndex);\n        this.allTracks$.next(sortedTracks);\n    }\n\n    public submit() {\n        if (this.trackForms.some(f => f.isUploading())) {\n            this.toast.open(\n                'Some tracks are still uploading or failed to upload.'\n            );\n            return;\n        }\n\n        this.loading$.next(true);\n\n        const payload = {\n            ...this.form.value,\n            tracks: this.trackForms.map(f => f.getPayload()),\n        };\n        payload.artists = payload.artists.map(a =>\n            typeof a !== 'number' ? a.id : a\n        );\n\n        const request = this.album\n            ? this.albums.update(this.album.id, payload)\n            : this.albums.create(payload);\n\n        request.pipe(finalize(() => this.loading$.next(false))).subscribe(\n            response => {\n                this.form.markAsPristine();\n                this.trackForms.forEach(tf => tf.form.markAsPristine());\n                this.toast.open('Album saved.');\n                this.uploadQueue.reset();\n                this.saved.emit(response.album);\n            },\n            (errResponse: BackendErrorResponse) => {\n                this.errors = errResponse.errors;\n                scrollInvalidInputIntoView(this.errors, 'track-form');\n                this.cd.markForCheck();\n            }\n        );\n    }\n\n    public maybeCancel() {\n        if (!this.confirmCancel) {\n            this.canceled.emit();\n            return;\n        }\n        this.modal\n            .show(ConfirmModalComponent, {\n                title: 'Delete Album',\n                body: 'Are you sure you want to cancel all uploads and delete this album?',\n                ok: 'Delete',\n            })\n            .beforeClosed()\n            .subscribe(confirmed => {\n                if (confirmed) {\n                    this.form.reset();\n                    this.uploadQueue.reset();\n                    this.canceled.emit();\n                }\n            });\n    }\n\n    public uploadFiles(uploadedFiles: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {\n                autoMatchAlbum: false,\n                diskPrefix: 'track_media',\n                disk: 'public',\n            },\n            validator: this.audioValidator,\n        } as UploadApiConfig;\n        this.uploadQueue.start(uploadedFiles, params).subscribe(\n            (response: TrackUploadResponse) => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                const trackForm = this.trackForms.find(\n                    tf => tf.uploadQueueItem?.id === response.queueItemId\n                ).form;\n                this.waveform\n                    .generate(queueItem.uploadedFile.native)\n                    .then(waveData => {\n                        trackForm.patchValue({waveData});\n                        queueItem.finishProcessing();\n                    });\n                trackForm.markAsDirty();\n            },\n            () => this.toast.open('Could not upload tracks.')\n        );\n    }\n\n    public trackRemoved(track: UploadQueueItem | Track) {\n        const newTracks = this.allTracks$.value.filter(t => t.id !== track.id);\n        this.allTracks$.next(newTracks);\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem | Track) =>\n        upload.id;\n\n    public suggestTagFn = (query: string) => {\n        return this.search\n            .media(query, {types: [TAG_MODEL], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    };\n\n    public suggestGenreFn = (query: string) => {\n        return this.search\n            .media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(\n                map(response =>\n                    response.results.genres.map(genre => genre.name)\n                )\n            );\n    };\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Album} from '../../../models/Album';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../../web-player/web-player-urls.service';\nimport {Artist} from '../../../models/Artist';\n\n@Component({\n    selector: 'crupdate-album-page',\n    templateUrl: './crupdate-album-page.component.html',\n    styleUrls: ['./crupdate-album-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateAlbumPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(AlbumFormComponent, {static: true}) albumForm: AlbumFormComponent;\n    public album: Album;\n    public artist: Artist;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n        public urls: WebPlayerUrls,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.album = data.api.album;\n            }\n        });\n        this.route.queryParams.subscribe(params => {\n            if (params.artist) {\n                this.artist = JSON.parse(atob(params.artist));\n            }\n        });\n    }\n\n    public toAlbumsPage() {\n        if (this.router.url.includes('admin')) {\n            if (this.artist) {\n                this.router.navigate(this.urls.editArtist(this.artist.id, true));\n            } else {\n                this.router.navigate(['/admin/albums']);\n            }\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    public canDeactivate() {\n        if (this.albumForm.form.dirty) {\n            return false;\n        } else if (this.albumForm.trackForms.some(tf => tf.form.dirty)) {\n            return false;\n        }\n        return true;\n    }\n}\n","<album-form [album]=\"album\" [artist]=\"artist\" class=\"material-panel\" (canceled)=\"toAlbumsPage()\" [confirmCancel]=\"false\" (saved)=\"toAlbumsPage()\"></album-form>\n","import { CanDeactivate } from '@angular/router';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {Observable} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n    constructor(private modal: Modal) {}\n\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n        if (component.canDeactivate()) {\n            return true;\n        } else {\n            return this.modal.show(ConfirmModalComponent, {\n                title: 'Unsaved Changes',\n                body:  'You have unsaved changes. Do you want to discard them?',\n                ok:    'Discard'\n            }).beforeClosed();\n        }\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Track} from '../../../models/Track';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {TrackFormComponent} from '../../../uploading/track-form/track-form.component';\nimport {Settings} from '@common/core/config/settings.service';\n\n@Component({\n    selector: 'crupdate-track-page',\n    templateUrl: './crupdate-track-page.component.html',\n    styleUrls: ['./crupdate-track-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTrackPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(TrackFormComponent, {static: true}) trackForm: AlbumFormComponent;\n    public track: Track;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.track = data.api.track;\n            }\n        });\n    }\n\n    public toTracksPage() {\n        if (this.insideAdmin()) {\n            this.router.navigate(['/admin/tracks']);\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.trackForm.form.dirty;\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.includes('admin');\n    }\n}\n","<track-form [track]=\"track\" class=\"material-panel\" (canceled)=\"toTracksPage()\" (saved)=\"toTracksPage()\"></track-form>\n","import { UploadedFile } from '../uploaded-file';\n\nexport async function readUploadedFolders(entries: WebKitEntry[]): Promise<UploadedFile[]> {\n    let files = [];\n\n    for (const key in entries) {\n        const entry = entries[key];\n\n        if ( ! entry.isDirectory) {\n            files.push(await transformFileEntry(entry as WebKitFileEntry));\n        } else {\n            files = files.concat(await readDirRecursive(entry as WebKitDirectoryEntry));\n        }\n    }\n\n    return files;\n}\n\nasync function readDirRecursive(entry: WebKitDirectoryEntry, files = []) {\n    const entries = await readEntries(entry);\n\n    for (const key in entries) {\n        const childEntry = entries[key];\n\n        if (childEntry.isDirectory) {\n            await readDirRecursive(childEntry as WebKitDirectoryEntry, files);\n        } else {\n            files.push(await transformFileEntry(childEntry as WebKitFileEntry));\n        }\n    }\n\n    return files;\n}\n\nfunction readEntries(dir: WebKitDirectoryEntry): Promise<WebKitEntry[]> {\n    return new Promise(resolve => {\n       readEntriesRecursive(dir.createReader(), resolve);\n    });\n}\n\nfunction readEntriesRecursive(reader: WebKitDirectoryReader, resolve, allEntries: WebKitEntry[] = []) {\n    reader.readEntries(entries => {\n        if (entries.length) {\n            allEntries = allEntries.concat(entries);\n            readEntriesRecursive(reader, resolve, allEntries);\n        } else {\n            resolve(allEntries);\n        }\n    });\n}\n\nfunction transformFileEntry(entry: WebKitFileEntry) {\n    return new Promise(resolve => {\n        entry.file((file: any) => {\n            resolve(new UploadedFile(file as File, entry.fullPath));\n        });\n    });\n}\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { openUploadWindow } from '../utils/open-upload-window';\nimport { UploadedFile } from '../uploaded-file';\nimport { readUploadedFolders } from '../utils/read-uploaded-folders';\nimport { UploadInputConfig } from '@common/uploads/upload-input-config';\n\n@Directive({\n    selector: '[fileDropzone]',\n})\nexport class UploadDropzoneDirective implements OnInit, OnDestroy {\n    @Input() disableDropzoneClick = false;\n    @Input() disableDropzone = false;\n    @Input() clickButton: ElementRef;\n    @Input('fileDropzone') uploadConfig: UploadInputConfig = {};\n    @Output() filesDropped: EventEmitter<UploadedFile[]> = new EventEmitter();\n\n    constructor(protected el: ElementRef) {}\n\n    ngOnInit() {\n        const el = this.el.nativeElement;\n        el.addEventListener('dragenter', (e) => this.handleDragEnter(e));\n        el.addEventListener('dragover', (e) => this.handleDragOver(e));\n        el.addEventListener('dragleave', (e) => this.handleDragLeave(e));\n        el.addEventListener('drop', (e) => this.handleDrop(e));\n\n        if ( ! this.disableDropzoneClick) {\n            const trigger = this.clickButton ? this.clickButton.nativeElement : el;\n            trigger.addEventListener('click', () => this.handleClick());\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeClassesFromDropzone();\n    }\n\n    protected handleClick() {\n        if (this.disableDropzone) return;\n        openUploadWindow(this.uploadConfig).then(files => {\n            this.emitUploadEvent(files);\n        });\n    }\n\n    public handleDragEnter(e) {\n        if (this.dropzoneDisabled(e)) return;\n        this.el.nativeElement.classList.add('file-over-dropzone');\n    }\n\n    public handleDragOver(e) {\n        if (e.preventDefault) e.preventDefault();\n        e.dataTransfer.dropEffect = this.dropzoneDisabled(e) ? 'none' : 'move';\n        return false;\n    }\n\n    public handleDragLeave(e: MouseEvent) {\n        const newEl = document.elementFromPoint(e.clientX, e.clientY);\n        if (this.el.nativeElement.contains(newEl)) return;\n        this.removeClassesFromDropzone();\n    }\n\n    public async handleDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        this.removeClassesFromDropzone();\n        if (this.dropzoneDisabled(e) || !e.dataTransfer.items) return;\n\n        const items = Array.from(e.dataTransfer.items)\n            .filter((item: DataTransferItem) => item.kind === 'file')\n            .map((item: DataTransferItem) => {\n                return item.webkitGetAsEntry();\n            });\n\n        if (items.length) {\n            this.emitUploadEvent(await readUploadedFolders(items));\n        }\n    }\n\n    protected emitUploadEvent(files: UploadedFile[]) {\n        this.filesDropped.emit(files);\n    }\n\n    protected removeClassesFromDropzone() {\n        this.el.nativeElement.classList.remove('file-over-dropzone');\n    }\n\n    protected dropzoneDisabled(e: DragEvent) {\n        const hasFiles = e.dataTransfer.types.find(type => type.toLowerCase() === 'files');\n        return this.disableDropzone || ! hasFiles;\n    }\n}\n","<div class=\"media-image-container\" [class.show-album-border]=\"!isTrack(media)\">\n    <media-image [media]=\"media\"></media-image>\n    <img class=\"album-border-image\" [src]=\"settings.getAssetUrl('images/album-border.png')\" alt=\"album border image\">\n</div>\n<div class=\"middle-column\">\n    <div class=\"artist-name\">{{media.artists[0].name}}</div>\n    <div class=\"track-name\">{{media.name}}</div>\n    <div class=\"genre-row\">\n        <mat-chip class=\"track-genre\" *ngIf=\"media.genres.length\">{{media.genres[0].name}}</mat-chip>\n    </div>\n    <div class=\"message\">\n        <span trans>Upload complete.</span> <a [routerLink]=\"mediaLink()\" trans> View now.</a>\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"title\" trans>Share your new {{isTrack(media) ? 'track' : 'album' }}</div>\n    <div class=\"share-icons\">\n        <button mat-icon-button (click)=\"shareUsing('facebook')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/facebook.png')}}\" alt=\"facebook-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('twitter')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/twitter.png')}}\" alt=\"twitter-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('tumblr')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/tumblr.png')}}\" alt=\"tumblr-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('blogger')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/bloggr.png')}}\" alt=\"blogger-icon\">\n        </button>\n    </div>\n    <div class=\"track-link-input input-container\">\n        <label for=\"media-item-link\" class=\"hidden\" trans>Media link</label>\n        <input #trackLinkInput id=\"media-item-link\" type=\"text\" readonly [value]=\"mediaUrl()\" (click)=\"$event.target.select()\">\n    </div>\n</div>\n","import {Component, OnInit, ChangeDetectionStrategy, Input, ViewChild, ElementRef} from '@angular/core';\nimport {Track, TRACK_MODEL} from '../../models/Track';\nimport {ShareableNetworks, shareLinkSocially} from '@common/core/utils/share-link-socially';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../web-player/web-player-urls.service';\nimport {Album} from '../../models/Album';\n\n@Component({\n    selector: 'uploaded-media-preview',\n    templateUrl: './uploaded-media-preview.component.html',\n    styleUrls: ['./uploaded-media-preview.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'material-panel'},\n})\nexport class UploadedMediaPreviewComponent implements OnInit {\n    @ViewChild('trackLinkInput', {static: true}) trackLinkInput: ElementRef<HTMLInputElement>;\n    @Input() media: Track|Album;\n\n    constructor(\n        public settings: Settings,\n        public urls: WebPlayerUrls\n    ) {}\n\n    ngOnInit() {\n        setTimeout(() => {\n            this.trackLinkInput.nativeElement.focus();\n            this.trackLinkInput.nativeElement.select();\n        });\n    }\n\n    public mediaLink() {\n        if (this.isTrack(this.media)) {\n            return this.urls.track(this.media);\n        } else {\n            return this.urls.album(this.media);\n        }\n    }\n\n    public mediaUrl() {\n        return this.urls.routerLinkToUrl(this.mediaLink());\n    }\n\n    public shareUsing(network: ShareableNetworks) {\n        shareLinkSocially(network, this.mediaUrl());\n    }\n\n    public isTrack(media: Track|Album): media is Track {\n        return media.model_type === TRACK_MODEL;\n    }\n}\n","<div\n    class=\"dropzone\"\n    [fileDropzone]=\"uploadConfig\"\n    [clickButton]=\"clickButton\"\n    (filesDropped)=\"uploadTracks($event)\"\n>\n    <div class=\"title\" trans>Drag and drop your tracks, videos & albums here.</div>\n    <div class=\"action-button\">\n        <button\n            mat-flat-button\n            color=\"accent\"\n            type=\"button\"\n            class=\"upload-button\"\n            #clickMatButton\n            trans\n        >\n            or choose files to upload\n        </button>\n    </div>\n    <div class=\"setting-toggle-container\" *ngIf=\"uploadQueue.isEmpty()\">\n        <mat-slide-toggle (change)=\"createAlbum$.next($event.checked)\" trans\n            >Make an album when multiple files are selected</mat-slide-toggle\n        >\n    </div>\n</div>\n\n<div\n    class=\"minutes-container\"\n    *ngIf=\"currentUser.getRestrictionValue('music.create', 'minutes') as minuteLimit\"\n>\n    <span\n        >You have {{ minuteLimit }} minutes left. Try\n        <a class=\"hover-underline\" routerLink=\"/billing/upgrade\" target=\"_blank\">Pro accounts</a> to\n        get more time and access to advanced features.</span\n    >\n</div>\n\n<div class=\"track-upload-queue\" *ngIf=\"uploadQueue.uploads$ | async as uploads\">\n    <ng-container *ngIf=\"uploads.length\">\n        <album-form\n            class=\"material-panel\"\n            *ngIf=\"createAlbum$ | async; else createTracks\"\n            (saved)=\"addSavedMedia($event)\"\n        ></album-form>\n        <ng-template #createTracks>\n            <ng-container *ngIf=\"errors$ | async as errors\">\n                <div\n                    class=\"track-panel material-panel\"\n                    *ngFor=\"let upload of uploads; trackBy: trackByFn\"\n                >\n                    <track-form\n                        [uploadQueueItem]=\"upload\"\n                        (saved)=\"addSavedMedia($event)\"\n                    ></track-form>\n                </div>\n            </ng-container>\n        </ng-template>\n    </ng-container>\n</div>\n\n<div class=\"saved-tracks\">\n    <uploaded-media-preview\n        [media]=\"media\"\n        *ngFor=\"let media of savedMedia$ | async\"\n    ></uploaded-media-preview>\n</div>\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {BackstageRequestFormComponent} from './requests/backstage-request-form/backstage-request-form.component';\nimport {BackstageRequestSubmittedComponent} from './requests/backstage-request-submitted/backstage-request-submitted.component';\nimport {BackstageTypeSelectorComponent} from './requests/backstage-type-selector/backstage-type-selector.component';\nimport {CrupdateArtistPageComponent} from './editing/crupdate-artist-page/crupdate-artist-page.component';\nimport {EditArtistPageResolver} from './editing/crupdate-artist-page/crupdate-artist-page-resolver.service';\nimport {CrupdateAlbumPageComponent} from './editing/crupdate-album-page/crupdate-album-page.component';\nimport {PendingChangesGuard} from '@common/guards/pending-changes/pending-changes-guard.service';\nimport {CrupdateTrackPageComponent} from './editing/crupdate-track-page/crupdate-track-page.component';\nimport {TrackPageResolver} from '../web-player/tracks/track-page/track-page-resolver.service';\nimport {UploadPageComponent} from '../uploading/upload-page/upload-page.component';\nimport {CrupdateAlbumPageResolverService} from './editing/crupdate-album-page/crupdate-album-page-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        redirectTo: '/',\n        pathMatch: 'full',\n    },\n    {\n        path: 'requests',\n        component: BackstageTypeSelectorComponent,\n    },\n    {\n        path: 'requests/verify-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/become-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/claim-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/:requestId/request-submitted',\n        component: BackstageRequestSubmittedComponent,\n    },\n\n    //\n    {\n        path: 'upload',\n        component: UploadPageComponent,\n    },\n    {\n        path: 'artists/new',\n        component: CrupdateArtistPageComponent,\n    },\n    {\n        path: 'artists/:id/edit',\n        component: CrupdateArtistPageComponent,\n        resolve: {api: EditArtistPageResolver},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'albums/:id/edit',\n        component: CrupdateAlbumPageComponent,\n        resolve: {api: CrupdateAlbumPageResolverService},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'albums/new',\n        component: CrupdateAlbumPageComponent,\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'tracks/:id/edit',\n        component: CrupdateTrackPageComponent,\n        resolve: {api: TrackPageResolver},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'tracks/new',\n        component: CrupdateTrackPageComponent,\n        canDeactivate: [PendingChangesGuard],\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class BackstageRoutingModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {\n    UploadInputConfig,\n    UploadInputTypes,\n} from '@common/uploads/upload-input-config';\nimport {Track} from '../../models/Track';\nimport {\n    TrackFormComponent,\n    TrackUploadResponse,\n} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {AlbumFormComponent} from '../album-form/album-form.component';\n\n@Component({\n    selector: 'upload-page',\n    templateUrl: './upload-page.component.html',\n    styleUrls: ['./upload-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class UploadPageComponent {\n    @ViewChild('clickMatButton', {read: ElementRef, static: true})\n    clickButton: ElementRef<HTMLButtonElement>;\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n    @ViewChild(AlbumFormComponent) albumForm: AlbumFormComponent;\n    errors$ = new BehaviorSubject<{\n        [key: string]: {[K in keyof Partial<Track>]: string};\n    }>({});\n    uploadConfig: UploadInputConfig = {\n        types: [UploadInputTypes.video, UploadInputTypes.audio],\n        multiple: true,\n    };\n    savedMedia$ = new BehaviorSubject<(Track | Album)[]>([]);\n    createAlbum$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private track: Tracks,\n        public currentUser: CurrentUser,\n        public uploadQueue: UploadQueueService,\n        public settings: Settings,\n        protected tracks: Tracks,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        private waveGenerator: WaveformGenerator\n    ) {}\n\n    uploadTracks(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {\n                diskPrefix: 'track_media',\n                disk: 'public',\n            },\n            validator: this.audioValidator,\n            willProcessFiles: true,\n            autoMatchAlbum: !this.createAlbum$.value,\n        } as UploadApiConfig;\n        this.uploadQueue\n            .start(files, params)\n            .subscribe((response: TrackUploadResponse) => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator\n                    .generate(queueItem.uploadedFile.native)\n                    .then(waveData => {\n                        queueItem.customData = {waveData};\n                        queueItem.finishProcessing();\n                    });\n\n                if (\n                    this.albumForm &&\n                    !this.albumForm.form.get('name').value &&\n                    response.metadata.album_name\n                ) {\n                    this.albumForm.form.patchValue({\n                        name: response.metadata.album_name,\n                    });\n                }\n            });\n    }\n\n    addSavedMedia(newMedia: Track | Album) {\n        this.savedMedia$.next([...this.savedMedia$.value, newMedia]);\n    }\n\n    trackByFn = (i: number, upload: UploadQueueItem) => upload.id;\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, of} from 'rxjs';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {Albums} from '../../../web-player/albums/albums.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CrupdateAlbumPageResolverService implements Resolve<any> {\n\n    constructor(\n        private albums: Albums,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<any> {\n        const params = {\n            with: ['tags', 'genres', 'artists', 'fullTracks'],\n            albumsPerPage: 50,\n            forEditing: true,\n        };\n        const id = +route.paramMap.get('id');\n        return this.albums.get(id, params).pipe(\n            catchError(() => {\n                this.router.navigate(['/']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response.album) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectArtistControlComponent} from './select-artist-control.component';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MediaImageModule} from '../../web-player/shared/media-image/media-image.module';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatButtonModule} from '@angular/material/button';\n\n\n@NgModule({\n    declarations: [\n        SelectArtistControlComponent,\n    ],\n    exports: [\n        SelectArtistControlComponent,\n    ],\n    imports: [\n        CommonModule,\n\n        MatMenuModule,\n        MediaImageModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        LoadingIndicatorModule,\n        MatButtonModule,\n    ]\n})\nexport class SelectArtistControlModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UploadPageComponent} from './upload-page/upload-page.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TrackFormComponent} from './track-form/track-form.component';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {AlbumFormComponent} from './album-form/album-form.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {TrackUploadHeaderComponent} from './track-upload-header/track-upload-header.component';\nimport {TrackArtistControlComponent} from './track-form/track-artist-control/track-artist-control.component';\nimport {AlbumControlComponent} from './track-form/album-control/album-control.component';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {UploadedMediaPreviewComponent} from './uploaded-media-preview/uploaded-media-preview.component';\nimport {UploadingHostComponent} from './uploading-host/uploading-host.component';\nimport {ChipsModule} from '@common/core/ui/chips/chips.module';\nimport {SelectArtistControlModule} from '../shared/select-artist-control/select-artist-control.module';\nimport {ArtistsLinksListModule} from '../web-player/artists/artists-links-list/artists-links-list.module';\n\n@NgModule({\n    declarations: [\n        UploadPageComponent,\n        TrackFormComponent,\n        AlbumFormComponent,\n        TrackUploadHeaderComponent,\n        TrackArtistControlComponent,\n        AlbumControlComponent,\n        UploadedMediaPreviewComponent,\n        UploadingHostComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MediaImageModule,\n        SelectArtistControlModule,\n\n        MatIconModule,\n        MatProgressBarModule,\n        TranslationsModule,\n        UploadsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatButtonModule,\n        ChipsModule,\n        MatChipsModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        UploadImageControlModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatMenuModule,\n        LoadingIndicatorModule,\n        ArtistsLinksListModule,\n    ],\n    exports: [\n        TrackFormComponent,\n        AlbumFormComponent,\n    ]\n})\nexport class UploadingModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BackstageRoutingModule} from './backstage-routing.module';\nimport {MaterialNavbarModule} from '@common/core/ui/material-navbar/material-navbar.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {BackstageRequestFormComponent} from './requests/backstage-request-form/backstage-request-form.component';\nimport {BackstageRequestSubmittedComponent} from './requests/backstage-request-submitted/backstage-request-submitted.component';\nimport {BackstageTypeSelectorComponent} from './requests/backstage-type-selector/backstage-type-selector.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {SelectArtistControlModule} from '../shared/select-artist-control/select-artist-control.module';\nimport {CrupdateArtistPageComponent} from './editing/crupdate-artist-page/crupdate-artist-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ChipsModule} from '@common/core/ui/chips/chips.module';\nimport {ArtistAlbumsTableComponent} from './editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component';\nimport {DatatableModule} from '@common/datatable/datatable.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {ProfileLinksFormControlModule} from '../web-player/shared/profile-links-form-control/profile-links-form-control.module';\nimport {CrupdateTrackPageComponent} from './editing/crupdate-track-page/crupdate-track-page.component';\nimport {CrupdateAlbumPageComponent} from './editing/crupdate-album-page/crupdate-album-page.component';\nimport {UploadingModule} from '../uploading/uploading.module';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n    declarations: [\n        BackstageRequestFormComponent,\n        BackstageRequestSubmittedComponent,\n        BackstageTypeSelectorComponent,\n\n        //\n        CrupdateArtistPageComponent,\n        ArtistAlbumsTableComponent,\n        CrupdateAlbumPageComponent,\n        CrupdateTrackPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        BackstageRoutingModule,\n        UploadingModule,\n        ReactiveFormsModule,\n        FormsModule,\n        SelectArtistControlModule,\n        TranslationsModule,\n        MaterialNavbarModule,\n        MatButtonModule,\n        MatIconModule,\n        MatSlideToggleModule,\n        UploadsModule,\n        UploadImageControlModule,\n        FormatPipesModule,\n        ProfileLinksFormControlModule,\n        LoadingIndicatorModule,\n\n        //\n        MatDialogModule,\n        MatTabsModule,\n        ChipsModule,\n        DatatableModule,\n        MediaImageModule,\n        MatTooltipModule,\n    ]\n})\nexport class BackstageModule {\n}\n"]}