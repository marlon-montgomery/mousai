{"version":3,"mappings":"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","names":["t","Vt","constructor","e","this","m","l","ngOnInit","bindToSearchControl","writeValue","selectedArtist$","next","registerOnChange","propagateChange","registerOnTouched","setDisabledState","isDisabled$","searchFormControl","valueChanges","pipe","tt","searchArtists","$","subscribe","searchedOnce","artists$","loading$","search","suggestArtists","query","limit","listAll","o","artists","onMenuOpened","document","querySelector","style","width","fakeInput","nativeElement","getBoundingClientRect","clearSearchInput","selectArtist","setValue","onMenuClosed","n","selectors","provide","useExisting","multi","decls","s","et","a","c","d","f","C","k","fb","group","artist","artist_name","currentUser","get","image","b","primaryArtist","image_small","first_name","last_name","role","company","requestType$","route","routeConfig","path","replace","value","Y","form","disable","artistPlaceholder","requestAccess","artist_id","id","type","data","Object","passportScanEntryId","uploadedPassportEntry$","socialProfiles","socialProfiles$","backstage","submitRequest","M","router","navigate","request","replaceUrl","errors$","errors","retrieveSocialProfile","socialAuth","retrieveProfile","then","uploadPassportScan","uploadQueue","start","uri","httpParams","diskPrefix","disk","validator","imageValidator","fileEntry","removePassportUpload","removeSocialProfile","pe","he","currentUserIsArtist","Ue","datatable","data$","ngOnChanges","encodedArtist","btoa","JSON","stringify","name","insideAdmin","url","includes","init","initialData","albums","maybeDeleteAlbum","modal","show","R","title","body","ok","beforeClosed","albumsApi","delete","filter","xt","Ct","verified","spotify_id","genres","description","country","city","profile_images","array","links","J","media","types","nt","y","N","results","map","v","bindToRouteData","createOrUpdate","update","create","markAsPristine","toast","open","urls","editArtist","cd","detectChanges","profileImagesArray","api","patchValue","profile","forEach","addProfileImage","push","removeProfileImage","removeAt","canDeactivate","dirty","Z","Se","resolve","paramMap","with","albumsPerPage","forEditing","X","I","factory","ct","Le","initValidations","Ee","maxSize","getMaxFileSize","i18n","Re","validations","settings","DEFAULT_MAX_SIZE_MB","Pt","bindSearchControl","ngAfterViewInit","searchInput","findMatches","value$","deselectArtist","findIndex","blur","searchControl","searchResults$","displayFn","oxw","upload","cn","subscription","unsubscribe","progress$","en","leading","trailing","progress","ngOnDestroy","bn","selectedAlbum$","searchAlbums","results$","suggestAlbums","selectAlbum","focus","O","st","Be","number","tags","duration","youtube_id","spotify_popularity","album","waveData","lyrics","A","P","currentValue","expanded","albumForm","track","display_name","defaultImage$","canAttachMusicToAnyArtist","uploadQueueItem","uploadedResponse$","patchFormUsingFileUpload","getPayload","customData","isUploading","completed","submit","tracks","remove","saved","emit","kt","uniqueId","toggleExpandedState","getExpandedState","maybeCancel","canceled","openUploadMusicModal","audioValidator","willProcessFiles","Tt","q","find","queueItemId","waveGenerator","generate","uploadedFile","native","finishProcessing","uploads$","markForCheck","metadata","comment","release_date","indexOf","shouldShowDurationField","$e","De","changeDetection","W","multiple","Date","toISOString","slice","allTracks$","onlyValidUploads","uploadsAdded$","error$","reorderTracks","F","previousIndex","currentIndex","trackForms","some","reset","confirmCancel","uploadFiles","autoMatchAlbum","waveform","markAsDirty","trackRemoved","qt","queryParams","parse","atob","toAlbumsPage","Q","Ot","toTracksPage","trackForm","i","Promise","It","createReader","isDirectory","Mt","Ft","readEntries","length","concat","file","Vn","fullPath","Wn","el","addEventListener","handleDragEnter","handleDragOver","handleDragLeave","handleDrop","disableDropzoneClick","clickButton","handleClick","removeClassesFromDropzone","disableDropzone","uploadConfig","emitUploadEvent","dropzoneDisabled","classList","add","preventDefault","dataTransfer","dropEffect","elementFromPoint","clientX","clientY","contains","stopPropagation","items","Array","from","kind","webkitGetAsEntry","filesDropped","toLowerCase","oo","setTimeout","trackLinkInput","select","mediaLink","isTrack","mediaUrl","routerLinkToUrl","shareUsing","model_type","Kn","createAlbum$","fo","redirectTo","pathMatch","component","uploadTracks","album_name","addSavedMedia","savedMedia$","Gn","_o","p","Jt","u","T","dt","pt","h","gt","g","Co","Ut","Qt","Nt","w","j","V","wt","mt","Zo","To","ho","bo","xo","Ao","ot","vo"],"sources":["webpack:///src/app/shared/select-artist-control/select-artist-control.component.html","webpack:///src/app/shared/select-artist-control/select-artist-control.component.ts","webpack:///src/app/backstage/requests/backstage-request-form/backstage-request-form.component.html","webpack:///src/app/backstage/requests/backstage-request-form/backstage-request-form.component.ts","webpack:///src/app/backstage/requests/backstage-request-submitted/backstage-request-submitted.component.ts","webpack:///src/app/backstage/requests/backstage-request-submitted/backstage-request-submitted.component.html","webpack:///src/app/backstage/requests/backstage-type-selector/backstage-type-selector.component.html","webpack:///src/app/backstage/requests/backstage-type-selector/backstage-type-selector.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component.html","webpack:///src/app/backstage/editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page.component.html","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page.component.ts","webpack:///src/app/backstage/editing/crupdate-artist-page/crupdate-artist-page-resolver.service.ts","webpack:///src/app/web-player/audio-upload-validator.ts","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.html","webpack:///src/app/uploading/track-form/track-artist-control/track-artist-control.component.ts","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.html","webpack:///src/app/uploading/track-upload-header/track-upload-header.component.ts","webpack:///src/app/uploading/track-form/album-control/album-control.component.html","webpack:///src/app/uploading/track-form/album-control/album-control.component.ts","webpack:///src/app/uploading/track-form/track-form.component.html","webpack:///src/app/uploading/track-form/track-form.component.ts","webpack:///src/common/core/types/models/Tag.ts","webpack:///src/app/uploading/album-form/album-form.component.html","webpack:///src/app/uploading/album-form/album-form.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page.component.html","webpack:///src/common/guards/pending-changes/pending-changes-guard.service.ts","webpack:///src/app/backstage/editing/crupdate-track-page/crupdate-track-page.component.ts","webpack:///src/app/backstage/editing/crupdate-track-page/crupdate-track-page.component.html","webpack:///src/common/uploads/utils/read-uploaded-folders.ts","webpack:///src/common/uploads/directives/upload-dropzone.directive.ts","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.html","webpack:///src/app/uploading/uploaded-media-preview/uploaded-media-preview.component.ts","webpack:///src/app/uploading/upload-page/upload-page.component.html","webpack:///src/app/backstage/backstage-routing.module.ts","webpack:///src/app/uploading/upload-page/upload-page.component.ts","webpack:///src/app/backstage/editing/crupdate-album-page/crupdate-album-page-resolver.service.ts","webpack:///src/app/shared/select-artist-control/select-artist-control.module.ts","webpack:///src/app/uploading/uploading.module.ts","webpack:///src/app/backstage/backstage.module.ts"],"sourcesContent":["<div class=\"fake-input\" #fakeInput [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\" [class.disabled]=\"isDisabled$ | async\">\n        <span *ngIf=\"selectedArtist$ | async as selectedArtist; else anyArtist\">\n            <media-image class=\"result-image\" [media]=\"selectedArtist\"></media-image>\n            {{selectedArtist.name}}\n        </span>\n    <ng-template #anyArtist>\n        <span trans>Select an artist</span>\n    </ng-template>\n    <div class=\"arrow-container\">\n        <div class=\"arrow\"></div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"select-artist-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button type=\"button\" mat-menu-item *ngFor=\"let artist of artists$ | async\" (click)=\"selectArtist(artist)\">\n        <media-image class=\"result-image\" [media]=\"artist\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{artist.name}}</div>\n            <div class=\"email\" trans>Artist</div>\n        </div>\n    </button>\n    <div mat-menu-item disabled *ngIf=\"searchedOnce && !(artists$ | async).length\" trans>No artists found.</div>\n</mat-menu>\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef, Input,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {\n    catchError,\n    debounceTime,\n    distinctUntilChanged,\n    finalize,\n    map,\n    switchMap\n} from 'rxjs/operators';\nimport {Search} from '../../web-player/search/search.service';\nimport {Artist} from '../../models/Artist';\n\n@Component({\n    selector: 'select-artist-control',\n    templateUrl: './select-artist-control.component.html',\n    styleUrls: ['./select-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'tabindex': '0'},\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: SelectArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class SelectArtistControlComponent implements OnInit, ControlValueAccessor {\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild('fakeInput') fakeInput: ElementRef<HTMLDivElement>;\n    @Input() listAll = false;\n    public isDisabled$ = new BehaviorSubject<boolean>(false);\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public artists$ = new BehaviorSubject<Artist[]>([]);\n    public selectedArtist$ = new BehaviorSubject<Artist>(null);\n    private propagateChange: (artist: Artist) => void;\n    public searchedOnce = false;\n\n    constructor(private search: Search) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Artist) {\n        this.selectedArtist$.next(value);\n    }\n\n    public registerOnChange(fn: (artist: Artist) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {\n    }\n\n    public setDisabledState(isDisabled: boolean) {\n        this.isDisabled$.next(isDisabled);\n    }\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchArtists(query)),\n            catchError(() => of([])),\n        ).subscribe(users => {\n            this.searchedOnce = true;\n            this.artists$.next(users);\n        });\n    }\n\n    private searchArtists(query: string): Observable<Artist[]> {\n        this.loading$.next(true);\n        return this.search.suggestArtists({\n            query,\n            limit: 7,\n            listAll: this.listAll,\n        }).pipe(\n            finalize(() => this.loading$.next(false)),\n            map(response => response.artists),\n        );\n    }\n\n    public onMenuOpened() {\n        const menu = (document.querySelector('.select-artist-control-menu') as HTMLElement);\n        menu.style.width = this.fakeInput.nativeElement.getBoundingClientRect().width + 'px';\n\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectArtist(artist: Artist) {\n        this.selectedArtist$.next(artist);\n        this.propagateChange(artist);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<h1 trans>Tell us about yourself</h1>\n\n<form (ngSubmit)=\"requestAccess()\" ngNativeValidate [formGroup]=\"form\" class=\"many-inputs\" *ngIf=\"errors$ | async as errors\">\n    <ng-container *ngIf=\"requestType$ | async as requestType\">\n        <upload-image-control formControlName=\"image\" [compact]=\"true\"></upload-image-control>\n\n        <div class=\"input-container\" *ngIf=\"requestType !== 'become-artist'\">\n            <label for=\"backstage-artist\" trans>Select Artist</label>\n            <select-artist-control [listAll]=\"true\" id=\"backstage-artist\" formControlName=\"artist\"></select-artist-control>\n            <div class=\"error\" *ngIf=\"errors.artist_id\">{{errors.artist_id}}</div>\n        </div>\n\n        <div class=\"input-container\" *ngIf=\"requestType === 'become-artist'\">\n            <label for=\"backstage-name\" trans>Your artist name</label>\n            <input type=\"text\" id=\"backstage-name\" formControlName=\"artist_name\" required>\n            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n        </div>\n        <div class=\"inline-inputs-container many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"backstage-first-name\" trans>First name</label>\n                <input type=\"text\" id=\"backstage-first-name\" formControlName=\"first_name\" required>\n                <div class=\"error\" *ngIf=\"errors.first_name\">{{errors.first_name}}</div>\n            </div>\n            <div class=\"input-container\">\n                <label for=\"backstage-last-name\" trans>Last name</label>\n                <input type=\"text\" id=\"backstage-last-name\" formControlName=\"last_name\" required>\n                <div class=\"error\" *ngIf=\"errors.last_name\">{{errors.last_name}}</div>\n            </div>\n        </div>\n        <div class=\"input-container\" *ngIf=\"requestType === 'claim-artist'\">\n            <label for=\"backstage-role\" trans>Role</label>\n            <select type=\"text\" id=\"backstage-role\" formControlName=\"role\" required>\n                <option [value]=\"null\" disabled trans>Select role</option>\n                <option value=\"artist\" trans>Artist</option>\n                <option value=\"agent\" trans>Agent</option>\n                <option value=\"composer\" trans>Composer</option>\n                <option value=\"label\" trans>Label</option>\n                <option value=\"manager\" trans>Manager</option>\n                <option value=\"musician\" trans>Musician</option>\n                <option value=\"producer\" trans>Producer</option>\n                <option value=\"publisher\" trans>Publisher</option>\n                <option value=\"songwriter\" trans>Songwriter</option>\n            </select>\n            <div class=\"error\" *ngIf=\"errors.role\">{{errors.role}}</div>\n        </div>\n        <div class=\"input-container\">\n            <label for=\"backstage-company\" trans>Company (optional)</label>\n            <input type=\"text\" id=\"backstage-company\" formControlName=\"company\">\n            <div class=\"error\" *ngIf=\"errors.company\">{{errors.company}}</div>\n        </div>\n\n        <div class=\"speed-up-container\">\n            <div class=\"speed-up-title\" trans>Speed up the process by connecting artist social media accounts or uploading your passport scan.</div>\n            <div class=\"speed-up-buttons\">\n                <button type=\"button\" class=\"twitter-btn speed-up-button\" mat-flat-button color=\"accent\" (click)=\"retrieveSocialProfile('twitter')\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"twitter\"></mat-icon>\n                    <span trans>Connect to Twitter</span>\n                </button>\n                <button type=\"button\" mat-flat-button class=\"facebook-btn speed-up-button\" color=\"accent\" (click)=\"retrieveSocialProfile('facebook')\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"facebook\"></mat-icon>\n                    <span trans>Connect to Facebook</span>\n                </button>\n                <button type=\"button\" mat-flat-button color=\"accent\" class=\"passport-btn speed-up-button\" [uploadButton]=\"{types: ['image/*']}\" (filesSelected)=\"uploadPassportScan($event)\">\n                    <mat-icon class=\"social-icon\" svgIcon=\"document-scanner\"></mat-icon>\n                    <span trans>Upload Passport Scan</span>\n                </button>\n            </div>\n            <div class=\"attached-verifications\">\n                <div class=\"facebook-profile verification\" *ngFor=\"let profile of socialProfiles$ | async | keyvalue\">\n                    <img class=\"verification-img\" [src]=\"profile.value.avatar\" alt=\"\">\n                    <div class=\"verification-details\">\n                        <div class=\"verification-name\" trans>{{profile.key}} Profile</div>\n                        <a [href]=\"profile.value.profileUrl\" target=\"_blank\" class=\"verification-url\">{{profile.value.profileUrl}}</a>\n                    </div>\n                    <button class=\"remove-verification\" type=\"button\" mat-icon-button (click)=\"removeSocialProfile(profile.key)\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                </div>\n                <div class=\"passport-attachment verification\" *ngIf=\"uploadedPassportEntry$ | async as entry\">\n                    <mat-icon class=\"verification-img\" svgIcon=\"document-scanner\"></mat-icon>\n                    <div class=\"verification-details\">\n                        <div class=\"verification-name\" trans>Passport Scan</div>\n                        <div>{{entry.name}} ({{entry.file_size | formattedFileSize}})</div>\n                    </div>\n                    <button class=\"remove-verification\" type=\"button\" mat-icon-button (click)=\"removePassportUpload()\">\n                        <mat-icon svgIcon=\"close\"></mat-icon>\n                    </button>\n                </div>\n                <upload-progress-bar></upload-progress-bar>\n            </div>\n        </div>\n\n        <div class=\"backstage-action-buttons\">\n            <a class=\"backstage-action-button\" type=\"button\" routerLink=\"/backstage/requests\" mat-raised-button trans>Go Back</a>\n            <button class=\"backstage-action-button\" type=\"submit\" mat-raised-button color=\"accent\" [disabled]=\"loading$ | async\" trans>Submit Request</button>\n        </div>\n    </ng-container>\n</form>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {BackstagRequestService} from '../backstag-request.service';\nimport {FormBuilder} from '@angular/forms';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {SocialAuthService} from '@common/auth/social-auth.service';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {ImageUploadValidator} from '../../../web-player/image-upload-validator';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {ExternalSocialProfile} from '@common/auth/external-social-profile';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {finalize} from 'rxjs/operators';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {BackstageRequestType} from '../backstage-request-type';\nimport {AppCurrentUser} from '../../../app-current-user';\n\n@Component({\n    selector: 'backstage-request-form',\n    templateUrl: './backstage-request-form.component.html',\n    styleUrls: ['./backstage-request-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageRequestFormComponent {\n    public uploadedPassportEntry$ = new BehaviorSubject<FileEntry>(null);\n    public socialProfiles$ = new BehaviorSubject<{[key: string]: ExternalSocialProfile}>(null);\n    public errors$ = new BehaviorSubject<object>({});\n    public loading$ = new BehaviorSubject(false);\n    public requestType$ = new BehaviorSubject<BackstageRequestType>(null);\n    public form = this.fb.group({\n        artist: [],\n        artist_name: [this.currentUser.get('display_name')],\n        image: [this.currentUser.primaryArtist()?.image_small || this.currentUser.get('avatar')],\n        first_name: [this.currentUser.get('first_name')],\n        last_name: [this.currentUser.get('last_name')],\n        role: [],\n        company: [''],\n    });\n\n    constructor(\n        private backstage: BackstagRequestService,\n        private fb: FormBuilder,\n        public settings: Settings,\n        private currentUser: AppCurrentUser,\n        private socialAuth: SocialAuthService,\n        private uploadQueue: UploadQueueService,\n        private imageValidator: ImageUploadValidator,\n        private router: Router,\n        private route: ActivatedRoute,\n    ) {\n        this.requestType$.next(this.route.routeConfig.path.replace('requests/', '') as BackstageRequestType);\n        if (this.requestType$.value === BackstageRequestType.verifyArtist) {\n            this.form.get('artist').setValue(this.currentUser.primaryArtist());\n            this.form.get('artist').disable();\n        }\n        if (this.requestType$.value === BackstageRequestType.becomeArtist) {\n            this.form.get('artist').setValue(this.currentUser.artistPlaceholder());\n            this.form.get('artist').disable();\n        }\n        if (this.requestType$.value !== BackstageRequestType.claimArtist) {\n            this.form.get('role').setValue('artist');\n        }\n        if (this.requestType$.value !== BackstageRequestType.becomeArtist) {\n            this.form.get('image').disable();\n        }\n    }\n\n    public requestAccess() {\n        this.loading$.next(true);\n        const payload = {\n            artist_name: this.form.value.artist_name,\n            artist_id: this.form.value.artist?.id,\n            type: this.requestType$.value,\n            data: {\n                ...this.form.value,\n                passportScanEntryId: this.uploadedPassportEntry$.value?.id,\n                socialProfiles: this.socialProfiles$.value,\n            }\n        };\n        this.backstage.submitRequest(payload)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                this.router.navigate(['/backstage/requests', response.request.id, 'request-submitted'], {replaceUrl: true});\n            }, (err: BackendErrorResponse) => this.errors$.next(err.errors));\n    }\n\n    public retrieveSocialProfile(serviceName: string) {\n        this.socialAuth.retrieveProfile(serviceName).then(profile => {\n            this.socialProfiles$.next({\n                ...this.socialProfiles$.value,\n                [serviceName]: profile,\n            });\n        });\n    }\n\n    public uploadPassportScan(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads/images',\n            httpParams: {diskPrefix: 'test', disk: 'private'},\n            validator: this.imageValidator\n        } as UploadApiConfig;\n        this.uploadQueue.start(files, params).subscribe(response => {\n            this.uploadedPassportEntry$.next(response.fileEntry);\n        });\n    }\n\n    public removePassportUpload() {\n        this.uploadedPassportEntry$.next(null);\n    }\n\n    public removeSocialProfile(serviceName: string) {\n        const profiles = {...this.socialProfiles$.value};\n        delete profiles[serviceName];\n        this.socialProfiles$.next(profiles);\n    }\n}\n","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\n\n@Component({\n    selector: 'backstage-request-submitted',\n    templateUrl: './backstage-request-submitted.component.html',\n    styleUrls: ['./backstage-request-submitted.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageRequestSubmittedComponent {\n}\n","<div class=\"text-align-center\">\n    <mat-icon class=\"check-icon\" svgIcon=\"check\"></mat-icon>\n</div>\n\n<h1 trans>We've got your request</h1>\n\n<ul>\n    <li>Our support team will review it and send you an email within 3 days!</li>\n    <li>Don't submit another request until you hear from us.</li>\n    <li>If this artist profile is already claimed, ask an admin on your team to invite you.</li>\n</ul>\n\n<div class=\"backstage-action-buttons\">\n    <a routerLink=\"/\" class=\"backstage-action-button\" mat-flat-button color=\"accent\" trans>Got It</a>\n</div>\n","<h1 trans [transValues]=\"{sitename: settings.get('branding.site_name')}\">Get Access to :sitename for Artists</h1>\n<h2 trans>First, select the type of your request.</h2>\n\n<div class=\"claim-row\">\n    <a class=\"claim-col\" [routerLink]=\"[currentUserIsArtist ? 'verify-artist' : 'become-artist']\">\n        <div class=\"title\" trans>\n            <ng-container *ngIf=\"currentUserIsArtist\">Get verified</ng-container>\n            <ng-container *ngIf=\"!currentUserIsArtist\">Become an artist</ng-container>\n        </div>\n        <img src=\"client/assets/images/backstage/claim-artist.jpg\" alt=\"\">\n    </a>\n    <a class=\"claim-col\" routerLink=\"claim-artist\">\n        <div class=\"title\" trans>Claim existing artist</div>\n        <img src=\"client/assets/images/backstage/claim-label.jpg\" alt=\"\">\n    </a>\n</div>\n","import {ChangeDetectionStrategy, Component} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {AppCurrentUser} from '../../../app-current-user';\n\n@Component({\n    selector: 'backstage-type-selector',\n    templateUrl: './backstage-type-selector.component.html',\n    styleUrls: ['./backstage-type-selector.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class BackstageTypeSelectorComponent {\n    public currentUserIsArtist = false;\n\n    constructor(\n        public settings: Settings,\n        private currentUser: AppCurrentUser,\n    ) {\n        this.currentUserIsArtist = !!this.currentUser.primaryArtist();\n    }\n}\n","<div class=\"datatable\">\n    <datatable-header pluralResourceName=\"albums\">\n        <ng-container leftContent>\n            <div class=\"new-album-container\">\n                <a mat-raised-button color=\"accent\" [routerLink]=\"urls.createAlbum(insideAdmin)\" [queryParams]=\"{artist: encodedArtist}\" *ngIf=\"currentUser.hasPermission('music.create')\" [disabled]=\"!artist\" trans>New Album</a>\n                <p class=\"save-message\" *ngIf=\"!artist\">\n                    <mat-icon svgIcon=\"warning\"></mat-icon>\n                    <span trans>Save artist first to enable album creation.</span>\n                </p>\n            </div>\n        </ng-container>\n    </datatable-header>\n    <table class=\"material-table\">\n        <thead>\n        <tr>\n            <th table-sort-header=\"name\" trans>Album</th>\n            <th table-sort-header trans>Release Date</th>\n            <th table-sort-header=\"views\" trans>Views</th>\n            <th table-sort-header=\"tracks_count\" trans>Number Of Tracks</th>\n            <th></th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr *ngFor=\"let album of albums$ | async\">\n            <td>\n                <div class=\"column-with-image\">\n                    <media-image [media]=\"album\" default=\"album\"></media-image>\n                    <span>{{album.name}}</span>\n                </div>\n            </td>\n            <td data-label=\"Release Date\">{{album.release_date ? album.release_date: '&ndash;'}}</td>\n            <td data-label=\"Views\">{{album.views}}</td>\n            <td data-label=\"Number of Tracks\">{{album.tracks_count ? album.tracks_count : '&ndash;'}}</td>\n            <td class=\"edit-column\">\n                <a [routerLink]=\"urls.editAlbum(album, insideAdmin)\" [queryParams]=\"{artist: encodedArtist}\" mat-icon-button [matTooltip]=\"'Edit album' | trans\">\n                    <mat-icon svgIcon=\"edit\"></mat-icon>\n                </a>\n                <button mat-icon-button (click)=\"maybeDeleteAlbum(album)\" [matTooltip]=\"'Delete album' | trans\" *ngIf=\"currentUser.hasPermission('albums.delete')\" trans>\n                    <mat-icon svgIcon=\"delete\"></mat-icon>\n                </button>\n            </td>\n        </tr>\n        </tbody>\n    </table>\n    <no-results-message svgImage=\"music.svg\" *ngIf=\"!datatable.data.length\">\n        <span primary-text trans>This artist has no albums yet</span>\n    </no-results-message>\n</div>\n","import {\n    Component,\n    Input,\n    OnChanges,\n    OnInit,\n    SimpleChanges,\n    ViewEncapsulation\n} from '@angular/core';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {WebPlayerImagesService} from '../../../../web-player/web-player-images.service';\nimport {Artist} from '../../../../models/Artist';\nimport {Album} from '../../../../models/Album';\nimport {Albums} from '../../../../web-player/albums/albums.service';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {DatatableService} from '@common/datatable/datatable.service';\nimport {Observable} from 'rxjs';\nimport {WebPlayerUrls} from '../../../../web-player/web-player-urls.service';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'artist-albums-table',\n    templateUrl: './artist-albums-table.component.html',\n    styleUrls: ['./artist-albums-table.component.scss'],\n    encapsulation: ViewEncapsulation.None,\n    providers: [DatatableService],\n})\nexport class ArtistAlbumsTableComponent implements OnInit, OnChanges {\n    @Input() artist: Artist;\n    @Input() albums: Album[] = [];\n    albums$ = this.datatable.data$ as Observable<Album[]>;\n    encodedArtist: string;\n    insideAdmin: boolean;\n    constructor(\n        private modal: Modal,\n        private albumsApi: Albums,\n        public currentUser: CurrentUser,\n        public images: WebPlayerImagesService,\n        public datatable: DatatableService<Album>,\n        public urls: WebPlayerUrls,\n        private router: Router,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.artist) {\n            this.encodedArtist = btoa(JSON.stringify({\n                id: this.artist.id,\n                name: this.artist.name,\n                image_small: this.artist.image_small\n            }));\n        }\n    }\n\n    ngOnInit() {\n        this.insideAdmin = this.router.url.includes('admin');\n        this.datatable.init({\n            initialData: this.albums ? this.albums : []\n        });\n    }\n\n    public maybeDeleteAlbum(album: Album) {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Delete Album',\n            body: 'Are you sure you want to delete this album?',\n            ok: 'Delete'\n        }).beforeClosed().subscribe(async (confirmed) => {\n            if ( ! confirmed) return;\n            this.albumsApi.delete([album.id]).subscribe(() => {\n                this.datatable.data = this.datatable.data.filter(a => a.id !== album.id);\n            });\n        });\n    }\n}\n","<div class=\"material-panel\">\n    <form class=\"edit-main-info\" (ngSubmit)=\"createOrUpdate()\" [formGroup]=\"form\" ngNativeValidate>\n        <div class=\"left-col\">\n            <upload-image-control formControlName=\"image_small\" diskPrefix=\"artist\"></upload-image-control>\n            <button type=\"submit\" mat-raised-button color=\"accent\" class=\"main-button\" *ngIf=\"artist\" trans>Update</button>\n            <button type=\"submit\" mat-raised-button color=\"accent\" class=\"main-button\" *ngIf=\"!artist\" trans>Create</button>\n        </div>\n        <div class=\"right-col many-inputs admin-artist-edit-inputs\">\n\n            <mat-tab-group color=\"accent\" animationDuration=\"0ms\">\n                <mat-tab [label]=\"'Details' | trans\">\n                    <div class=\"many-inputs tab\">\n                        <div class=\"input-container\">\n                            <label for=\"artist-name\" trans>Name</label>\n                            <input type=\"text\" formControlName=\"name\" id=\"artist-name\" [readOnly]=\"!insideAdmin\" required>\n                            <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-genres\" trans>Genres</label>\n                            <chip-input placeholder=\"+Add genre\" id=\"artist-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                            <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                        </div>\n                        <ng-container *ngIf=\"insideAdmin\">\n                            <div class=\"input-container\" *ngIf=\"settings.get('spotify_is_setup')\">\n                                <label for=\"artist-spotify-id\" trans>Spotify ID</label>\n                                <input type=\"text\" id=\"artist-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n                            </div>\n                            <div class=\"setting-toggle-container\">\n                                <mat-slide-toggle formControlName=\"verified\" trans>Verified</mat-slide-toggle>\n                                <div class=\"error\" *ngIf=\"errors.verified\">{{errors.verified}}</div>\n                            </div>\n                        </ng-container>\n                    </div>\n                </mat-tab>\n                <mat-tab [label]=\"'Links' | trans\">\n                    <profile-links-form-control formControlName=\"links\"></profile-links-form-control>\n                </mat-tab>\n                <mat-tab [label]=\"'Biography' | trans\">\n                    <div class=\"many-inputs tab\">\n                        <div class=\"input-container\">\n                            <label for=\"artist-country\" trans>Country</label>\n                            <input formControlName=\"country\" id=\"artist-country\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-city\" trans>City</label>\n                            <input formControlName=\"city\" id=\"artist-city\">\n                        </div>\n                        <div class=\"input-container\">\n                            <label for=\"artist-bio\" trans>Biography</label>\n                            <textarea formControlName=\"description\" id=\"artist-bio\" rows=\"8\"></textarea>\n                        </div>\n                        <div class=\"profile-images\">\n                            <div class=\"profile-images-title\" trans>Biography Images</div>\n                            <div class=\"profile-images-wrapper\" formArrayName=\"profile_images\">\n                                <upload-image-control\n                                    *ngFor=\"let image of profileImagesArray().controls; index as i\"\n                                    [formControlName]=\"i\"\n                                    (fileDeleted)=\"removeProfileImage(i)\"\n                                    [uploadConfig]=\"{httpParams: {diskPrefix: 'bio'}}\"\n                                    [buttonText]=\"image.value ? 'Replace Image' : 'Upload Image'\"\n                                ></upload-image-control>\n                            </div>\n                        </div>\n                    </div>\n                </mat-tab>\n            </mat-tab-group>\n        </div>\n    </form>\n\n    <artist-albums-table [albums]=\"albums\" [artist]=\"artist\"></artist-albums-table>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit\n} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Artists} from '../../../web-player/artists/artists.service';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Artist} from '../../../models/Artist';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {FormArray, FormBuilder, FormControl} from '@angular/forms';\nimport {GENRE_MODEL} from '../../../models/Genre';\nimport {map} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {Album} from '../../../models/Album';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {WebPlayerUrls} from '../../../web-player/web-player-urls.service';\n\n@Component({\n    selector: 'crupdate-artist-page',\n    templateUrl: './crupdate-artist-page.component.html',\n    styleUrls: ['./crupdate-artist-page.component.scss'],\n    providers: [UploadQueueService],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CrupdateArtistPageComponent implements OnInit, ComponentCanDeactivate {\n    public insideAdmin = false;\n    public errors: {[K in keyof Partial<Artist>]: string} = {};\n    public artist: Artist;\n    public albums: Album[] = [];\n\n    public form = this.fb.group({\n        name: [''],\n        verified: [''],\n        image_small: [''],\n        spotify_id: [''],\n        genres: [[]],\n        description: [''],\n        country: [''],\n        city: [''],\n        profile_images: this.fb.array([]),\n        links: [[]],\n    });\n\n    constructor(\n        public settings: Settings,\n        private uploadQueue: UploadQueueService,\n        private artists: Artists,\n        private route: ActivatedRoute,\n        private toast: Toast,\n        private router: Router,\n        private fb: FormBuilder,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n        private urls: WebPlayerUrls,\n    ) {}\n\n    ngOnInit() {\n        this.bindToRouteData();\n        this.insideAdmin = this.router.url.includes('admin');\n    }\n\n    public createOrUpdate() {\n        this.artist ? this.update() : this.create();\n    }\n\n    public create() {\n        return this.artists.create(this.form.value).subscribe(response => {\n            this.form.markAsPristine();\n            this.artist = response.artist;\n            this.toast.open('Artist created.');\n            this.router.navigate(this.urls.editArtist(this.artist.id, true), {replaceUrl: true});\n            this.errors = {};\n        }, (errResponse: BackendErrorResponse) => {\n            this.errors = errResponse.errors;\n            this.cd.detectChanges();\n        });\n    }\n\n    public update() {\n        return this.artists.update(this.artist.id, this.form.value).subscribe(() => {\n            this.form.markAsPristine();\n            this.toast.open('Artist updated.');\n            this.router.navigate(['/admin/artists']);\n        }, (errResponse: BackendErrorResponse) => {\n            this.errors = errResponse.errors;\n            this.cd.detectChanges();\n        });\n    }\n\n    public profileImagesArray() {\n        return this.form.get('profile_images') as FormArray;\n    }\n\n    private bindToRouteData() {\n        this.route.data.subscribe((data: {api: {artist?: Artist, albums?: Album[]}}) => {\n            if (data.api) {\n                this.artist = data.api.artist;\n                this.albums = data.api.albums;\n                this.form.patchValue({\n                    name: data.api.artist.name,\n                    verified: data.api.artist.verified,\n                    image_small: data.api.artist.image_small,\n                    spotify_id: data.api.artist.spotify_id,\n                    genres: (data.api.artist.genres || []).map(g => g.name),\n                    description: data.api.artist.profile?.description,\n                    country: data.api.artist.profile?.country,\n                    city: data.api.artist.profile?.city,\n                    profile_images: [],\n                    links: data.api.artist.links,\n                });\n                (data.api.artist.profile_images || []).forEach(img => {\n                    this.addProfileImage(img.url);\n                });\n            }\n        });\n        this.addProfileImage();\n    }\n\n    public addProfileImage(url = '') {\n        this.profileImagesArray().push(new FormControl(url));\n    }\n\n    public removeProfileImage(index: number) {\n        this.profileImagesArray().removeAt(index);\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n\n    public canDeactivate(): boolean {\n        return !this.form.dirty;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {Artists, GetArtistResponse} from '../../../web-player/artists/artists.service';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, of} from 'rxjs';\nimport {BackendResponse} from '@common/core/types/backend-response';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class EditArtistPageResolver implements Resolve<GetArtistResponse> {\n\n    constructor(\n        private artists: Artists,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<GetArtistResponse> {\n        const params = {\n            with: ['simplifiedAlbums', 'genres', 'profile'],\n            albumsPerPage: 50,\n            forEditing: true,\n        };\n        const id = +route.paramMap.get('id');\n        return this.artists.get(id, params).pipe(\n            catchError(() => {\n                this.router.navigate(['/']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response.artist) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {UploadValidator} from '@common/uploads/validation/upload-validator';\nimport {FileSizeValidation} from '@common/uploads/validation/validations/file-size-validation';\nimport {convertToBytes} from '@common/core/utils/convertToBytes';\nimport {FileTypeValidation} from '@common/uploads/validation/validations/file-type-validation';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AudioUploadValidator extends UploadValidator {\n    protected readonly DEFAULT_MAX_SIZE_MB = 50;\n    public showToast = true;\n\n    protected initValidations() {\n        const validations = [\n            new FileSizeValidation(\n                {maxSize: this.getMaxFileSize()},\n                this.i18n\n            ),\n            new FileTypeValidation({types: ['audio', 'video']}, this.i18n),\n        ];\n\n        this.validations.push(...validations);\n    }\n\n    protected getMaxFileSize(): number {\n        return this.settings.get(\n            'uploads.max_size',\n            convertToBytes(this.DEFAULT_MAX_SIZE_MB, 'MB')\n        );\n    }\n}\n","<div class=\"input-container\">\n    <label [for]=\"id\" trans>Artists</label>\n    <input\n        type=\"text\"\n        [id]=\"id\"\n        [formControl]=\"searchControl\"\n        [matAutocomplete]=\"artistAuto\"\n        placeholder=\"Search artists...\"\n        trans-placeholder\n        #searchInput\n    >\n\n    <mat-chip-list [selectable]=\"false\">\n        <mat-chip class=\"chip-with-image\" *ngFor=\"let artist of value$ | async\" [removable]=\"true\" (removed)=\"deselectArtist(artist)\">\n            <img [src]=\"artist.image_small\" [alt]=\"artist.name\">\n            {{artist.name}}\n            <mat-icon svgIcon=\"cancel\" matChipRemove></mat-icon>\n        </mat-chip>\n    </mat-chip-list>\n\n    <mat-autocomplete #artistAuto=\"matAutocomplete\" class=\"media-autocomplete-panel\" (optionSelected)=\"selectArtist($event.option.value)\" [displayWith]=\"displayFn\">\n        <mat-option *ngFor=\"let artist of searchResults$ | async\" [value]=\"artist\">\n            <img [src]=\"artist.image_small\" [alt]=\"artist.name + ' image'\">\n            <span>{{artist.name}}</span>\n        </mat-option>\n    </mat-autocomplete>\n\n    <div class=\"error\" *ngIf=\"error\">{{error}}</div>\n</div>\n","import {\n    AfterViewInit,\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    Input,\n    OnInit,\n    ViewChild\n} from '@angular/core';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, fromEvent, of as observableOf} from 'rxjs';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {debounceTime, distinctUntilChanged, take} from 'rxjs/operators';\nimport {Search} from '../../../web-player/search/search.service';\nimport {Artist} from '../../../models/Artist';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'track-artist-control',\n    templateUrl: './track-artist-control.component.html',\n    styleUrls: ['./track-artist-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'custom-control'},\n    providers: [UploadQueueService, {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: TrackArtistControlComponent,\n        multi: true,\n    }]\n})\nexport class TrackArtistControlComponent implements OnInit, AfterViewInit, ControlValueAccessor {\n    @ViewChild('searchInput') searchInput: ElementRef<HTMLInputElement>;\n    @Input() error: string;\n    @Input() id: string;\n\n    public searchControl = new FormControl();\n    public value$ = new BehaviorSubject<Artist[]>([]);\n    public searchResults$ = new BehaviorSubject<Artist[]>([]);\n    private propagateChange: (artists: Artist[]) => void;\n\n    constructor(\n        private search: Search,\n        public currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.bindSearchControl();\n    }\n\n    ngAfterViewInit() {\n        fromEvent(this.searchInput.nativeElement, 'focus')\n            .pipe(take(1))\n            .subscribe(() => {\n                this.findMatches();\n            });\n    }\n\n    public writeValue(value: Artist[]) {\n        this.value$.next(value);\n    }\n\n    public registerOnChange(fn: (artists: Artist[]) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    public deselectArtist(artist: Artist) {\n        const newArtists = this.value$.value.filter(a => a.id !== artist.id);\n        this.value$.next(newArtists);\n        this.propagateChange(this.value$.value);\n    }\n\n    public selectArtist(artist: Artist) {\n        if (this.value$.value.findIndex(a => a.id === artist.id) === -1) {\n            this.value$.next([...this.value$.value, artist]);\n            this.propagateChange(this.value$.value);\n        }\n        this.searchInput.nativeElement.blur();\n    }\n\n    private bindSearchControl() {\n        this.searchControl.valueChanges\n            .pipe(\n                distinctUntilChanged(),\n                debounceTime(250),\n            ).subscribe(query => {\n                if (typeof query !== 'string') {\n                    return observableOf([]);\n                }\n                this.findMatches(query);\n            });\n    }\n\n    public findMatches(query?: string) {\n        this.search.suggestArtists({query, limit: 7})\n            .subscribe(r => this.searchResults$.next(r.artists));\n    }\n\n    public displayFn(_) {\n        return null;\n    }\n}\n","<div class=\"meta\">\n    <div class=\"name\">{{upload.uploadedFile.name}}</div>\n    <div class=\"time-left\" *ngIf=\"(progress.percentage && progress.percentage < 100) && !upload.error$.value\">\n        {{progress.eta}}\n        <span trans>left</span>\n    </div>\n    <div class=\"actions\">\n        <mat-icon\n                class=\"error-icon action-icon\"\n                svgIcon=\"error-outline\"\n                *ngIf=\"upload.error$ | async as error; else noError\"\n                [matTooltip]=\"error | trans\"\n                matTooltipPosition=\"left\"\n        ></mat-icon>\n        <ng-template #noError>\n            <span *ngIf=\"upload.completed\" trans>Upload complete.</span>\n            <span *ngIf=\"upload.processing$ | async\" trans>We are processing your track for playback…</span>\n            <span class=\"cancel-button\" *ngIf=\"!(upload.processing$ | async) && !upload.completed\" (click)=\"upload.cancel()\" trans>Cancel</span>\n        </ng-template>\n    </div>\n</div>\n<mat-progress-bar [mode]=\"(upload.processing$ | async) ? 'indeterminate' : 'determinate'\" color=\"accent\" [value]=\"progress.percentage\"></mat-progress-bar>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    Input,\n    OnChanges,\n    OnDestroy,\n    OnInit\n} from '@angular/core';\nimport {UploadQueueItem, UploadQueueItemProgress} from '@common/uploads/upload-queue/upload-queue-item';\nimport {throttleTime} from 'rxjs/operators';\nimport {animationFrameScheduler, Subscription} from 'rxjs';\n\n@Component({\n    selector: 'track-upload-header',\n    templateUrl: './track-upload-header.component.html',\n    styleUrls: ['./track-upload-header.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TrackUploadHeaderComponent implements OnChanges, OnDestroy {\n    @Input() upload: UploadQueueItem;\n    private subscription: Subscription;\n    public progress: UploadQueueItemProgress;\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n\n    ngOnChanges() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n        }\n        this.subscription = this.upload.progress$.pipe(\n            // material progress bar animation lasts 250ms\n            throttleTime(260, animationFrameScheduler, {leading: true, trailing: true}),\n        ).subscribe(progress => {\n            this.progress = progress;\n            this.cd.detectChanges();\n        });\n    }\n\n    ngOnDestroy() {\n        this.subscription.unsubscribe();\n    }\n}\n","<div class=\"many-inputs\">\n    <div class=\"input-container\">\n        <div class=\"fake-label\" trans>Album</div>\n        <div class=\"fake-input\" #fakeInput tabindex=\"0\" [matMenuTriggerFor]=\"menu\" (menuOpened)=\"onMenuOpened()\" (menuClosed)=\"onMenuClosed()\">\n            <ng-container *ngIf=\"selectedAlbum$ | async as selectedAlbum; else anyAlbum\">\n                <media-image [media]=\"selectedAlbum\"></media-image>\n                <div class=\"title-name\">{{selectedAlbum.name}}</div>\n            </ng-container>\n            <ng-template #anyAlbum>\n                <div class=\"title-name\" trans>None</div>\n            </ng-template>\n            <div class=\"arrow-container\">\n                <div class=\"arrow\"></div>\n            </div>\n        </div>\n    </div>\n</div>\n\n<mat-menu #menu=\"matMenu\" class=\"add-album-control-menu\">\n    <div class=\"input-container search-input-container\" (click)=\"$event.stopPropagation()\">\n        <div class=\"search-input-wrapper\">\n            <input type=\"text\" [formControl]=\"searchFormControl\" placeholder=\"Search...\" (blur)=\"searchInput.focus()\" #searchInput mat-menu-item trans-placeholder>\n            <button class=\"clear-search-input-button\" mat-icon-button (click)=\"clearSearchInput()\" *ngIf=\"searchFormControl.value\">\n                <mat-icon svgIcon=\"close\"></mat-icon>\n            </button>\n            <loading-indicator [isVisible]=\"loading$ | async\" class=\"small\"></loading-indicator>\n        </div>\n    </div>\n    <button mat-menu-item (click)=\"selectAlbum(null)\">\n        <media-image default=\"album\"></media-image>\n        <div class=\"info any-user-info\">\n            <div class=\"name\" trans>No Album</div>\n        </div>\n    </button>\n    <button mat-menu-item *ngFor=\"let album of results$ | async\" (click)=\"selectAlbum(album)\">\n        <media-image [media]=\"album\"></media-image>\n        <div class=\"user-info\">\n            <div class=\"name\">{{album.name}}</div>\n            <artists-links-list class=\"email\" [artists]=\"album.artists\"></artists-links-list>\n        </div>\n    </button>\n    <button mat-menu-item disabled *ngIf=\"searchedOnce && !(results$ | async).length\" trans>No albums found.</button>\n</mat-menu>\n","import {ChangeDetectionStrategy, Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {catchError, debounceTime, distinctUntilChanged, finalize, map, switchMap} from 'rxjs/operators';\nimport {ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {BehaviorSubject, Observable, of} from 'rxjs';\nimport {Album, ALBUM_MODEL} from '../../../models/Album';\nimport {Search} from '../../../web-player/search/search.service';\nimport {CurrentUser} from '@common/auth/current-user';\n\n@Component({\n    selector: 'album-control',\n    templateUrl: './album-control.component.html',\n    styleUrls: ['./album-control.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: AlbumControlComponent,\n        multi: true,\n    }]\n})\nexport class AlbumControlComponent implements ControlValueAccessor, OnInit {\n    @ViewChild('searchInput', {static: true}) searchInput: ElementRef<HTMLInputElement>;\n    @ViewChild('fakeInput') fakeInput: ElementRef<HTMLDivElement>;\n    public searchFormControl = new FormControl();\n    public loading$ = new BehaviorSubject(false);\n    public results$ = new BehaviorSubject<Album[]>([]);\n    public selectedAlbum$ = new BehaviorSubject<Album>(null);\n    private propagateChange: (album: Album) => void;\n    public searchedOnce = false;\n\n    constructor(\n        private search: Search,\n        public currentUser: CurrentUser,\n    ) {}\n\n    ngOnInit() {\n        this.bindToSearchControl();\n    }\n\n    public writeValue(value: Album) {\n        this.selectedAlbum$.next(value);\n    }\n\n    public registerOnChange(fn: (album: Album) => void) {\n        this.propagateChange = fn;\n    }\n\n    public registerOnTouched() {}\n\n    private bindToSearchControl() {\n        this.searchFormControl.valueChanges.pipe(\n            debounceTime(150),\n            distinctUntilChanged(),\n            switchMap(query => this.searchAlbums(query)),\n            catchError(() => of([])),\n        ).subscribe(albums => {\n            this.searchedOnce = true;\n            this.results$.next(albums);\n        });\n    }\n\n    private searchAlbums(query: string): Observable<Album[]> {\n        this.loading$.next(true);\n        return this.search.suggestAlbums({query, limit: 7})\n            .pipe(\n                finalize(() =>  this.loading$.next(false)),\n                map(response => response.albums),\n            );\n    }\n\n    public onMenuOpened() {\n        const menu = (document.querySelector('.add-album-control-menu') as HTMLElement);\n        menu.style.width = this.fakeInput.nativeElement.getBoundingClientRect().width + 'px';\n\n        if (!this.searchedOnce) {\n            this.clearSearchInput();\n        }\n    }\n\n    public selectAlbum(album: Album) {\n        this.selectedAlbum$.next(album);\n        this.propagateChange(album);\n    }\n\n    public clearSearchInput() {\n        this.searchFormControl.setValue('');\n    }\n\n    public onMenuClosed() {\n        this.loading$.next(false);\n        this.clearSearchInput();\n    }\n}\n","<form (ngSubmit)=\"submit()\" class=\"many-inputs\" [formGroup]=\"form\" *ngIf=\"errors$ | async as errors\">\n    <track-upload-header [upload]=\"uploadQueueItem\" *ngIf=\"uploadQueueItem\"></track-upload-header>\n    <div class=\"inline-form\" *ngIf=\"albumForm\" [formGroup]=\"form\">\n        <ng-content></ng-content>\n        <div class=\"input-container\">\n            <label [for]=\"'track-form-' + uniqueId + '-name'\" class=\"hidden\" trans>Title</label>\n            <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n        </div>\n        <div class=\"actions\">\n            <button type=\"button\" [class.active]=\"expanded\" mat-icon-button (click)=\"toggleExpandedState()\">\n                <mat-icon svgIcon=\"edit\"></mat-icon>\n            </button>\n            <button type=\"button\" (click)=\"maybeCancel()\" mat-icon-button>\n                <mat-icon svgIcon=\"delete\"></mat-icon>\n            </button>\n        </div>\n    </div>\n    <div [@bodyExpansion]=\"getExpandedState()\" class=\"full-form\">\n        <div class=\"full-form-container\" [class.inside-album]=\"albumForm\">\n            <div class=\"left-column\">\n                <upload-image-control formControlName=\"image\" [defaultBackground]=\"defaultImage$ | async\" diskPrefix=\"track_image\"></upload-image-control>\n                <button mat-flat-button color=\"accent\" type=\"button\" class=\"left-column-action-button\" (click)=\"openUploadMusicModal()\">\n                    <span *ngIf=\"this.track\" trans>Replace File</span>\n                    <span *ngIf=\"!this.track\" trans>Upload Track</span>\n                </button>\n            </div>\n            <div class=\"many-inputs fields-container\">\n                <div class=\"input-container\" *ngIf=\"!albumForm\">\n                    <label [for]=\"'track-form-' + uniqueId + '-name'\" trans>Title</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-name'\" formControlName=\"name\" required>\n                    <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n                </div>\n\n                <album-control formControlName=\"album\" [id]=\"'track-form-' + uniqueId + '-album_id'\" *ngIf=\"!albumForm\"></album-control>\n                <track-artist-control [error]=\"errors.artists\" [id]=\"'track-form-' + uniqueId + '-artists'\" formControlName=\"artists\"></track-artist-control>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-duration'\" trans>Duration (ms)</label>\n                    <input type=\"number\" [id]=\"'track-form-' + uniqueId + '-duration'\" formControlName=\"duration\" min=\"1\" required>\n                    <div class=\"error\" *ngIf=\"errors.duration\">{{errors.duration}}</div>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-youtube-id'\" trans>Youtube Video ID</label>\n                    <input type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-youtube-id'\" formControlName=\"youtube_id\" minlength=\"1\" maxlength=\"30\">\n                    <div class=\"error\" *ngIf=\"errors.youtube_id\">{{errors.youtube_id}}</div>\n                    <p>ID only. https://www.youtube.com/embed?v=<strong>EPyh41zPg4Z</strong></p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin()\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-url'\" trans>Track Url</label>\n                    <input type=\"url\" [id]=\"'track-form-' + uniqueId + '-track-url'\" formControlName=\"url\" minlength=\"1\" maxlength=\"191\">\n                    <div class=\"error\" *ngIf=\"errors.url\">{{errors.url}}</div>\n                    <p>Remote or local url to music or video file for this track. If available, this will always play instead of youtube video.</p>\n                </div>\n\n                <div class=\"input-container\" *ngIf=\"insideAdmin && settings.get('spotify_is_setup')\">\n                    <label for=\"track-spotify-id\" trans>Spotify ID</label>\n                    <input type=\"text\" id=\"track-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-genres'\" trans>Genres</label>\n                    <chip-input placeholder=\"+Add genre\" [id]=\"'track-form-' + uniqueId + '-track-genres'\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-tags'\" trans>Tags</label>\n                    <chip-input placeholder=\"+Add tag\" [id]=\"'track-form-' + uniqueId + '-track-tags'\" [suggestFn]=\"suggestTagFn\" formControlName=\"tags\"></chip-input>\n                    <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n                </div>\n\n                <div class=\"input-container\">\n                    <label [for]=\"'track-form-' + uniqueId + '-track-description'\" trans>Description</label>\n                    <textarea type=\"text\" [id]=\"'track-form-' + uniqueId + '-track-description'\" formControlName=\"description\" minlength=\"10\" maxlength=\"999\" rows=\"5\"></textarea>\n                </div>\n\n                <button type=\"submit\" mat-raised-button *ngIf=\"!albumForm\" color=\"accent\" [disabled]=\"(loading$ | async) || (uploadQueueItem && !uploadQueueItem.completed)\" trans>Save</button>\n                <button type=\"button\" mat-button (click)=\"maybeCancel()\" *ngIf=\"!albumForm && !track\" trans>Cancel</button>\n            </div>\n        </div>\n    </div>\n</form>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges\n} from '@angular/core';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {BehaviorSubject} from 'rxjs';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {Track} from '../../models/Track';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {DefaultImagePaths} from '../../web-player/default-image-paths.enum';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {\n    matExpansionAnimations,\n    MatExpansionPanelState\n} from '@angular/material/expansion';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {finalize, map} from 'rxjs/operators';\nimport {openUploadWindow} from '@common/uploads/utils/open-upload-window';\nimport {UploadInputTypes} from '@common/uploads/upload-input-config';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {Router} from '@angular/router';\nimport {UploadFileResponse} from '@common/uploads/uploads-api.service';\nimport {Album} from '../../models/Album';\nimport {Settings} from '@common/core/config/settings.service';\nimport {isAbsoluteUrl} from '@common/core/utils/is-absolute-url';\nimport {FileEntry} from '@common/uploads/types/file-entry';\nimport {randomString} from '@common/core/utils/random-string';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {Search} from '../../web-player/search/search.service';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {AppCurrentUser} from '../../app-current-user';\nimport {Artist} from '../../models/Artist';\nimport {TAG_MODEL} from '@common/core/types/models/Tag';\n\nexport interface ExtractedMetadata {\n    title?: string;\n    album?: Album;\n    album_name?: string;\n    artist?: Artist;\n    artist_name?: string;\n    genres?: string[];\n    duration?: number;\n    release_date?: string;\n    comment?: string;\n    image?: FileEntry;\n    lyrics?: string;\n}\n\nexport interface TrackUploadResponse extends UploadFileResponse {\n    metadata?: ExtractedMetadata;\n}\n\n@Component({\n    selector: 'track-form',\n    templateUrl: './track-form.component.html',\n    styleUrls: ['./track-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    animations: [matExpansionAnimations.bodyExpansion]\n})\nexport class TrackFormComponent implements OnInit, OnChanges {\n    // track that is being edited\n    @Input() track: Track;\n\n    // creating a new track for this upload\n    @Input() uploadQueueItem: UploadQueueItem;\n\n    // track will be saved along with this album\n    @Input() albumForm: FormGroup;\n\n    // number of this track inside parent album\n    @Input() number: number;\n\n    @Output() canceled = new EventEmitter<UploadQueueItem|Track>();\n    @Output() saved = new EventEmitter<Track>();\n\n    public errors$ = new BehaviorSubject<{[K in keyof Partial<Track>]: string}>({});\n    public defaultImage$ = new BehaviorSubject<string>(DefaultImagePaths.album);\n    public loading$ = new BehaviorSubject<boolean>(false);\n    public readonly uniqueId = randomString(5);\n\n    public form = this.fb.group({\n        id: [null],\n        name: [''],\n        image: [''],\n        description: [''],\n        number: [1],\n        tags: [[]],\n        genres: [[]],\n        duration: [null],\n        url: [''],\n        youtube_id: [''],\n        spotify_id: [''],\n        spotify_popularity: [''],\n        album: [null],\n        artists: [[]],\n        waveData: [null],\n        lyrics: [''],\n    });\n    public expanded = false;\n\n    constructor(\n        private fb: FormBuilder,\n        public currentUser: AppCurrentUser,\n        private tracks: Tracks,\n        private toast: Toast,\n        private modal: Modal,\n        private audioValidator: AudioUploadValidator,\n        private uploadQueue: UploadQueueService,\n        private waveGenerator: WaveformGenerator,\n        private router: Router,\n        public settings: Settings,\n        private cd: ChangeDetectorRef,\n        private search: Search,\n    ) {}\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (changes.number && changes.number.currentValue != null) {\n            this.form.patchValue({number: changes.number.currentValue});\n        }\n    }\n\n    ngOnInit() {\n        this.expanded = !this.albumForm;\n\n        if (this.track) {\n            const formValue = {...this.track};\n            formValue.tags = (this.track.tags || []).map(t => t.name) as any;\n            formValue.genres = (this.track.genres || []).map(t => t.display_name || t.name) as any;\n            this.form.patchValue(formValue);\n\n            if (this.track.album) {\n                this.defaultImage$.next(this.track.album.image || DefaultImagePaths.album);\n            }\n        } else if ( ! this.currentUser.canAttachMusicToAnyArtist()) {\n            this.form.get('artists').setValue([\n                this.currentUser.get('artists')[0] || this.currentUser.artistPlaceholder(),\n            ]);\n        }\n\n        if (this.uploadQueueItem) {\n            this.uploadQueueItem.uploadedResponse$.subscribe((response: TrackUploadResponse) => {\n                this.patchFormUsingFileUpload(response);\n            });\n        }\n\n        if (this.albumForm) {\n            this.albumForm.get('image').valueChanges.subscribe(url => {\n                this.defaultImage$.next(url || DefaultImagePaths.album);\n            });\n        }\n    }\n\n    public getPayload(): Partial<Track> {\n        const customData = this.uploadQueueItem ? this.uploadQueueItem.customData : {};\n        const payload =  {...this.form.value, ...customData};\n        payload.artists = payload.artists.map(a => typeof a !== 'number' ? a.id : a);\n        return payload;\n    }\n\n    public isUploading() {\n        return this.uploadQueueItem && !this.uploadQueueItem.completed;\n    }\n\n    public submit() {\n        if (this.albumForm) return;\n        this.loading$.next(true);\n\n        const payload = this.getPayload();\n\n        const request = this.track ?\n            this.tracks.update(this.track.id, payload) :\n            this.tracks.create(payload);\n\n        request\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(response => {\n                if (this.uploadQueueItem) {\n                    this.uploadQueue.remove(this.uploadQueueItem.id);\n                }\n                this.toast.open('Track saved.');\n                this.form.markAsPristine();\n                this.saved.emit(response.track);\n            }, (errResponse: BackendErrorResponse) => {\n                this.errors$.next(errResponse.errors);\n                scrollInvalidInputIntoView(this.errors$.value, `track-form-${this.uniqueId}`);\n            });\n    }\n\n    public toggleExpandedState() {\n        this.expanded = !this.expanded;\n    }\n\n    public getExpandedState(): MatExpansionPanelState {\n        return this.expanded ? 'expanded' : 'collapsed';\n    }\n\n    public maybeCancel() {\n        this.modal.show(ConfirmModalComponent, {\n            title: 'Remove Track',\n            body:  'Are you sure you want to cancel the upload and remove this track?',\n            ok:    'Remove'\n        }).beforeClosed().subscribe(confirmed => {\n            if ( ! confirmed) return;\n            if (this.uploadQueueItem) {\n                this.uploadQueue.remove(this.uploadQueueItem.id);\n                this.canceled.emit(this.uploadQueueItem);\n                this.toast.open('Upload canceled.');\n            } else if (this.track) {\n                this.tracks.delete([this.track.id]).subscribe(() => {\n                    this.canceled.emit(this.track);\n                    this.toast.open('Track deleted.');\n                });\n            }\n        });\n    }\n\n    public openUploadMusicModal() {\n        const params = {\n            uri: 'uploads',\n            validator: this.audioValidator,\n            httpParams: {diskPrefix: 'track_media', disk: 'public'},\n            willProcessFiles: true,\n        } as UploadApiConfig;\n        openUploadWindow({types: [UploadInputTypes.audio, UploadInputTypes.video]}).then(uploadedFiles => {\n            if ( ! uploadedFiles) return;\n            // if this track form is already attached to existing upload queue item\n            // replace that item in queue service instead of creating a new item\n            const replacements = this.uploadQueueItem ? {[this.uploadQueueItem.id]: uploadedFiles[0]} : uploadedFiles;\n            this.uploadQueue.start(replacements, params).subscribe(response => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator.generate(queueItem.uploadedFile.native).then(waveData => {\n                    this.form.patchValue({waveData});\n                    queueItem.finishProcessing();\n                });\n                this.patchFormUsingFileUpload(response);\n                this.toast.open('Track uploaded.');\n            }, () => this.toast.open('Could not upload track'));\n            // make sure progress bar is shown if we're editing track from admin\n            if ( ! this.uploadQueueItem) {\n                this.uploadQueueItem = this.uploadQueue.uploads$.value[0];\n                this.cd.markForCheck();\n            }\n        });\n    }\n\n    private patchFormUsingFileUpload(response: TrackUploadResponse) {\n        const values: {[K in keyof Partial<Track>]: any} & {lyrics?: string} = {\n            name: response.metadata.title,\n            duration: response.metadata.duration,\n            url: response.fileEntry.url,\n            genres: response.metadata.genres || [],\n            description: response.metadata.comment,\n            lyrics: response.metadata.lyrics,\n        };\n        if (response.metadata.album) {\n            values.album = response.metadata.album;\n        }\n        if (response.metadata.artist) {\n            values.artists = [response.metadata.artist];\n\n            // set artist on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.artist) {\n                this.albumForm.patchValue({artist: response.metadata.artist});\n            }\n        }\n        if (response.metadata.image) {\n            values.image = response.metadata.image.url;\n\n            // set image on album, if does not already have one\n            if (this.albumForm && ! this.albumForm.value.image) {\n                this.albumForm.patchValue({image: response.metadata.image.url});\n            }\n        }\n        if (response.metadata.release_date && this.albumForm && !this.albumForm.value.release_date) {\n            this.albumForm.patchValue({release_date: response.metadata.release_date});\n        }\n        this.form.patchValue(values);\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.indexOf('admin') > -1;\n    }\n\n    public shouldShowDurationField() {\n        const trackUrl = this.form.get('url').value;\n        return !trackUrl || isAbsoluteUrl(trackUrl);\n    }\n\n    public suggestTagFn = (query: string) => {\n        return this.search.media(query, {types: [TAG_MODEL], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    }\n\n    public suggestGenreFn = (query: string) => {\n        return this.search.media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(map(response => response.results.genres.map(genre => genre.name)));\n    }\n}\n","export const TAG_MODEL = 'tag';\n\nexport interface Tag {\n    id: number;\n    name: string;\n    display_name: string;\n    type: string;\n    updated_at: string;\n    created_at: string;\n}\n","<form (ngSubmit)=\"submit()\" [formGroup]=\"form\">\n    <div class=\"main-info-fields\">\n        <div class=\"left-column\">\n            <upload-image-control formControlName=\"image\" diskPrefix=\"album\"></upload-image-control>\n            <button mat-flat-button color=\"accent\" type=\"button\" class=\"upload-tracks-button\" [uploadButton]=\"uploadButtonConfig\" (filesSelected)=\"uploadFiles($event)\" trans>Upload Tracks</button>\n        </div>\n        <div class=\"text-fields-container many-inputs\">\n            <div class=\"input-container\">\n                <label for=\"album-form-name\" trans>Name</label>\n                <input type=\"text\" id=\"album-form-name\" formControlName=\"name\" [readOnly]=\"album && !currentUser.hasPermissions(['music.update'])\" required>\n                <div class=\"error\" *ngIf=\"errors.name\">{{errors.name}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-release_date\" trans>Release Date</label>\n                <input type=\"date\" placeholder=\"YYYY-MM-DD\" id=\"album-form-release_date\" formControlName=\"release_date\" required>\n                <div class=\"error\" *ngIf=\"errors.release_date\">{{errors.release_date}}</div>\n            </div>\n\n            <track-artist-control [error]=\"errors.artists\" id=\"album-form-artists\" formControlName=\"artists\"></track-artist-control>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-description\" trans>Description</label>\n                <textarea type=\"text\" id=\"album-form-description\" formControlName=\"description\" minlength=\"10\" maxlength=\"250\" rows=\"5\"></textarea>\n                <div class=\"error\" *ngIf=\"errors.description\">{{errors.description}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-genres\" trans>Genres</label>\n                <chip-input placeholder=\"+Add genre\" id=\"album-form-genres\" [suggestFn]=\"suggestGenreFn\" formControlName=\"genres\"></chip-input>\n                <div class=\"error\" *ngIf=\"errors.genres\">{{errors.genres}}</div>\n            </div>\n\n            <div class=\"input-container\">\n                <label for=\"album-form-tags\" trans>Tags</label>\n                <chip-input placeholder=\"+Add tag\" id=\"album-form-tags\" formControlName=\"tags\" [suggestFn]=\"suggestTagFn\"></chip-input>\n                <div class=\"error\" *ngIf=\"errors.tags\">{{errors.tags}}</div>\n            </div>\n\n            <div class=\"input-container\" *ngIf=\"insideAdmin && settings.get('spotify_is_setup')\">\n                <label for=\"album-spotify-id\" trans>Spotify ID</label>\n                <input type=\"text\" id=\"album-spotify-id\" formControlName=\"spotify_id\" minlength=\"22\" maxlength=\"22\">\n            </div>\n\n            <button type=\"submit\" [disabled]=\"loading$ | async\" mat-raised-button color=\"accent\" trans>Save</button>\n            <button type=\"button\" mat-button (click)=\"maybeCancel()\" trans>Cancel</button>\n        </div>\n    </div>\n</form>\n\n<ul class=\"track-list unstyled-list\" cdkDropList (cdkDropListDropped)=\"reorderTracks($event)\">\n    <li class=\"track-list-item\" *ngFor=\"let track of allTracks$ | async; trackBy: trackByFn; index as index\" cdkDrag>\n        <track-form [albumForm]=\"form\" [track]=\"track\" *ngIf=\"track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\n            <button mat-icon-button cdkDragHandle type=\"button\">\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n            </button>\n        </track-form>\n        <track-form [albumForm]=\"form\" [uploadQueueItem]=\"track\" *ngIf=\"!track.model_type\" [number]=\"index + 1\" (canceled)=\"trackRemoved(track)\">\n            <button mat-icon-button cdkDragHandle type=\"button\">\n                <mat-icon svgIcon=\"drag-handle\"></mat-icon>\n            </button>\n        </track-form>\n    </li>\n</ul>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    EventEmitter,\n    Input,\n    OnInit,\n    Output,\n    QueryList,\n    ViewChildren,\n} from '@angular/core';\nimport {FormBuilder} from '@angular/forms';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {CdkDragDrop, moveItemInArray} from '@angular/cdk/drag-drop';\nimport {Albums} from '../../web-player/albums/albums.service';\nimport {\n    TrackFormComponent,\n    TrackUploadResponse,\n} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {BehaviorSubject} from 'rxjs';\nimport {finalize, map} from 'rxjs/operators';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {Track} from '../../models/Track';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {\n    UploadInputConfig,\n    UploadInputTypes,\n} from '@common/uploads/upload-input-config';\nimport {Settings} from '@common/core/config/settings.service';\nimport {scrollInvalidInputIntoView} from '@common/core/utils/scroll-invalid-input-into-view';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {Search} from '../../web-player/search/search.service';\nimport {GENRE_MODEL} from '../../models/Genre';\nimport {BackendErrorResponse} from '@common/core/types/backend-error-response';\nimport {AppCurrentUser} from '../../app-current-user';\nimport {TAG_MODEL} from '@common/core/types/models/Tag';\nimport {Artist} from '../../models/Artist';\nimport {Router} from '@angular/router';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\n\n@Component({\n    selector: 'album-form',\n    templateUrl: './album-form.component.html',\n    styleUrls: ['./album-form.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AlbumFormComponent implements OnInit {\n    public uploadButtonConfig: UploadInputConfig = {\n        multiple: true,\n        types: [UploadInputTypes.audio, UploadInputTypes.video],\n    };\n    public insideAdmin: boolean;\n    // album that is being edited\n    @Input() album: Album;\n    @Input() artist: Artist;\n    @Input() confirmCancel = true;\n    @Output() canceled = new EventEmitter();\n    @Output() saved = new EventEmitter<Album>();\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n\n    public errors: {[K in keyof Partial<Album>]: string} = {};\n    public loading$ = new BehaviorSubject(false);\n    public allTracks$ = new BehaviorSubject<(UploadQueueItem | Track)[]>([]);\n\n    public form = this.fb.group({\n        name: [''],\n        image: [''],\n        artists: [[]],\n        release_date: [new Date().toISOString().slice(0, 10)],\n        description: [''],\n        spotify_id: [''],\n        tags: [[]],\n        genres: [[]],\n    });\n\n    constructor(\n        private fb: FormBuilder,\n        public uploadQueue: UploadQueueService,\n        private albums: Albums,\n        private cd: ChangeDetectorRef,\n        public currentUser: AppCurrentUser,\n        private modal: Modal,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        public settings: Settings,\n        private search: Search,\n        private router: Router,\n        private waveform: WaveformGenerator\n    ) {}\n\n    ngOnInit() {\n        this.insideAdmin = this.router.url.includes('admin');\n        this.allTracks$ = new BehaviorSubject([\n            ...(this.album ? this.album.tracks : []),\n            ...this.onlyValidUploads(this.uploadQueue.uploads$.value),\n        ]);\n        this.uploadQueue.uploadsAdded$.subscribe(uploads => {\n            this.allTracks$.next([\n                ...this.allTracks$.value,\n                ...this.onlyValidUploads(uploads),\n            ]);\n        });\n\n        // if we are editing an album, hydrate the form\n        if (this.album) {\n            const value = {\n                ...this.album,\n                tags: this.album.tags.map(t => t.name),\n                genres: this.album.genres.map(g => g.display_name || g.name),\n            };\n            this.form.patchValue(value);\n        } else if (this.artist) {\n            this.form.get('artists').setValue([this.artist]);\n            // set album artist as primary artist of current user\n        } else if (!this.currentUser.canAttachMusicToAnyArtist()) {\n            this.form\n                .get('artists')\n                .setValue([\n                    this.currentUser.get('artists')[0] ||\n                        this.currentUser.artistPlaceholder(),\n                ]);\n        }\n    }\n\n    private onlyValidUploads(uploads: UploadQueueItem[]) {\n        return uploads.filter(upload => !upload.error$.value);\n    }\n\n    public reorderTracks(e: CdkDragDrop<never>) {\n        const sortedTracks = this.allTracks$.value;\n        moveItemInArray(sortedTracks, e.previousIndex, e.currentIndex);\n        this.allTracks$.next(sortedTracks);\n    }\n\n    public submit() {\n        if (this.trackForms.some(f => f.isUploading())) {\n            this.toast.open(\n                'Some tracks are still uploading or failed to upload.'\n            );\n            return;\n        }\n\n        this.loading$.next(true);\n\n        const payload = {\n            ...this.form.value,\n            tracks: this.trackForms.map(f => f.getPayload()),\n        };\n        payload.artists = payload.artists.map(a =>\n            typeof a !== 'number' ? a.id : a\n        );\n\n        const request = this.album\n            ? this.albums.update(this.album.id, payload)\n            : this.albums.create(payload);\n\n        request.pipe(finalize(() => this.loading$.next(false))).subscribe(\n            response => {\n                this.form.markAsPristine();\n                this.trackForms.forEach(tf => tf.form.markAsPristine());\n                this.toast.open('Album saved.');\n                this.uploadQueue.reset();\n                this.saved.emit(response.album);\n            },\n            (errResponse: BackendErrorResponse) => {\n                this.errors = errResponse.errors;\n                scrollInvalidInputIntoView(this.errors, 'track-form');\n                this.cd.markForCheck();\n            }\n        );\n    }\n\n    public maybeCancel() {\n        if (!this.confirmCancel) {\n            this.canceled.emit();\n            return;\n        }\n        this.modal\n            .show(ConfirmModalComponent, {\n                title: 'Delete Album',\n                body: 'Are you sure you want to cancel all uploads and delete this album?',\n                ok: 'Delete',\n            })\n            .beforeClosed()\n            .subscribe(confirmed => {\n                if (confirmed) {\n                    this.form.reset();\n                    this.uploadQueue.reset();\n                    this.canceled.emit();\n                }\n            });\n    }\n\n    public uploadFiles(uploadedFiles: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {\n                autoMatchAlbum: false,\n                diskPrefix: 'track_media',\n                disk: 'public',\n            },\n            validator: this.audioValidator,\n        } as UploadApiConfig;\n        this.uploadQueue.start(uploadedFiles, params).subscribe(\n            (response: TrackUploadResponse) => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                const trackForm = this.trackForms.find(\n                    tf => tf.uploadQueueItem?.id === response.queueItemId\n                ).form;\n                this.waveform\n                    .generate(queueItem.uploadedFile.native)\n                    .then(waveData => {\n                        trackForm.patchValue({waveData});\n                        queueItem.finishProcessing();\n                    });\n                trackForm.markAsDirty();\n            },\n            () => this.toast.open('Could not upload tracks.')\n        );\n    }\n\n    public trackRemoved(track: UploadQueueItem | Track) {\n        const newTracks = this.allTracks$.value.filter(t => t.id !== track.id);\n        this.allTracks$.next(newTracks);\n    }\n\n    public trackByFn = (i: number, upload: UploadQueueItem | Track) =>\n        upload.id;\n\n    public suggestTagFn = (query: string) => {\n        return this.search\n            .media(query, {types: [TAG_MODEL], limit: 5})\n            .pipe(map(response => response.results.tags.map(tag => tag.name)));\n    };\n\n    public suggestGenreFn = (query: string) => {\n        return this.search\n            .media(query, {types: [GENRE_MODEL], limit: 5})\n            .pipe(\n                map(response =>\n                    response.results.genres.map(genre => genre.name)\n                )\n            );\n    };\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Album} from '../../../models/Album';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../../web-player/web-player-urls.service';\nimport {Artist} from '../../../models/Artist';\n\n@Component({\n    selector: 'crupdate-album-page',\n    templateUrl: './crupdate-album-page.component.html',\n    styleUrls: ['./crupdate-album-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class CrupdateAlbumPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(AlbumFormComponent, {static: true}) albumForm: AlbumFormComponent;\n    public album: Album;\n    public artist: Artist;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n        public urls: WebPlayerUrls,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.album = data.api.album;\n            }\n        });\n        this.route.queryParams.subscribe(params => {\n            if (params.artist) {\n                this.artist = JSON.parse(atob(params.artist));\n            }\n        });\n    }\n\n    public toAlbumsPage() {\n        if (this.router.url.includes('admin')) {\n            if (this.artist) {\n                this.router.navigate(this.urls.editArtist(this.artist.id, true));\n            } else {\n                this.router.navigate(['/admin/albums']);\n            }\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    public canDeactivate() {\n        if (this.albumForm.form.dirty) {\n            return false;\n        } else if (this.albumForm.trackForms.some(tf => tf.form.dirty)) {\n            return false;\n        }\n        return true;\n    }\n}\n","<album-form [album]=\"album\" [artist]=\"artist\" class=\"material-panel\" (canceled)=\"toAlbumsPage()\" [confirmCancel]=\"false\" (saved)=\"toAlbumsPage()\"></album-form>\n","import { CanDeactivate } from '@angular/router';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {Observable} from 'rxjs';\nimport {Injectable} from '@angular/core';\nimport {Modal} from '@common/core/ui/dialogs/modal.service';\nimport {ConfirmModalComponent} from '@common/core/ui/confirm-modal/confirm-modal.component';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class PendingChangesGuard implements CanDeactivate<ComponentCanDeactivate> {\n    constructor(private modal: Modal) {}\n\n    canDeactivate(component: ComponentCanDeactivate): boolean | Observable<boolean> {\n        if (component.canDeactivate()) {\n            return true;\n        } else {\n            return this.modal.show(ConfirmModalComponent, {\n                title: 'Unsaved Changes',\n                body:  'You have unsaved changes. Do you want to discard them?',\n                ok:    'Discard'\n            }).beforeClosed();\n        }\n    }\n}\n","import {ChangeDetectionStrategy, Component, OnInit, ViewChild} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Track} from '../../../models/Track';\nimport {ComponentCanDeactivate} from '@common/guards/pending-changes/component-can-deactivate';\nimport {AlbumFormComponent} from '../../../uploading/album-form/album-form.component';\nimport {TrackFormComponent} from '../../../uploading/track-form/track-form.component';\nimport {Settings} from '@common/core/config/settings.service';\n\n@Component({\n    selector: 'crupdate-track-page',\n    templateUrl: './crupdate-track-page.component.html',\n    styleUrls: ['./crupdate-track-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class CrupdateTrackPageComponent implements OnInit, ComponentCanDeactivate {\n    @ViewChild(TrackFormComponent, {static: true}) trackForm: AlbumFormComponent;\n    public track: Track;\n\n    constructor(\n        private route: ActivatedRoute,\n        private router: Router,\n        public settings: Settings,\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe(data => {\n            if (data.api) {\n                this.track = data.api.track;\n            }\n        });\n    }\n\n    public toTracksPage() {\n        if (this.insideAdmin()) {\n            this.router.navigate(['/admin/tracks']);\n        } else {\n            this.router.navigate(['/']);\n        }\n    }\n\n    public canDeactivate() {\n        return !this.trackForm.form.dirty;\n    }\n\n    public insideAdmin(): boolean {\n        return this.router.url.includes('admin');\n    }\n}\n","<track-form [track]=\"track\" class=\"material-panel\" (canceled)=\"toTracksPage()\" (saved)=\"toTracksPage()\"></track-form>\n","import { UploadedFile } from '../uploaded-file';\n\nexport async function readUploadedFolders(entries: WebKitEntry[]): Promise<UploadedFile[]> {\n    let files = [];\n\n    for (const key in entries) {\n        const entry = entries[key];\n\n        if ( ! entry.isDirectory) {\n            files.push(await transformFileEntry(entry as WebKitFileEntry));\n        } else {\n            files = files.concat(await readDirRecursive(entry as WebKitDirectoryEntry));\n        }\n    }\n\n    return files;\n}\n\nasync function readDirRecursive(entry: WebKitDirectoryEntry, files = []) {\n    const entries = await readEntries(entry);\n\n    for (const key in entries) {\n        const childEntry = entries[key];\n\n        if (childEntry.isDirectory) {\n            await readDirRecursive(childEntry as WebKitDirectoryEntry, files);\n        } else {\n            files.push(await transformFileEntry(childEntry as WebKitFileEntry));\n        }\n    }\n\n    return files;\n}\n\nfunction readEntries(dir: WebKitDirectoryEntry): Promise<WebKitEntry[]> {\n    return new Promise(resolve => {\n       readEntriesRecursive(dir.createReader(), resolve);\n    });\n}\n\nfunction readEntriesRecursive(reader: WebKitDirectoryReader, resolve, allEntries: WebKitEntry[] = []) {\n    reader.readEntries(entries => {\n        if (entries.length) {\n            allEntries = allEntries.concat(entries);\n            readEntriesRecursive(reader, resolve, allEntries);\n        } else {\n            resolve(allEntries);\n        }\n    });\n}\n\nfunction transformFileEntry(entry: WebKitFileEntry) {\n    return new Promise(resolve => {\n        entry.file((file: any) => {\n            resolve(new UploadedFile(file as File, entry.fullPath));\n        });\n    });\n}\n","import { Directive, ElementRef, EventEmitter, Input, OnDestroy, OnInit, Output } from '@angular/core';\nimport { openUploadWindow } from '../utils/open-upload-window';\nimport { UploadedFile } from '../uploaded-file';\nimport { readUploadedFolders } from '../utils/read-uploaded-folders';\nimport { UploadInputConfig } from '@common/uploads/upload-input-config';\n\n@Directive({\n    selector: '[fileDropzone]',\n})\nexport class UploadDropzoneDirective implements OnInit, OnDestroy {\n    @Input() disableDropzoneClick = false;\n    @Input() disableDropzone = false;\n    @Input() clickButton: ElementRef;\n    @Input('fileDropzone') uploadConfig: UploadInputConfig = {};\n    @Output() filesDropped: EventEmitter<UploadedFile[]> = new EventEmitter();\n\n    constructor(protected el: ElementRef) {}\n\n    ngOnInit() {\n        const el = this.el.nativeElement;\n        el.addEventListener('dragenter', (e) => this.handleDragEnter(e));\n        el.addEventListener('dragover', (e) => this.handleDragOver(e));\n        el.addEventListener('dragleave', (e) => this.handleDragLeave(e));\n        el.addEventListener('drop', (e) => this.handleDrop(e));\n\n        if ( ! this.disableDropzoneClick) {\n            const trigger = this.clickButton ? this.clickButton.nativeElement : el;\n            trigger.addEventListener('click', () => this.handleClick());\n        }\n    }\n\n    ngOnDestroy() {\n        this.removeClassesFromDropzone();\n    }\n\n    protected handleClick() {\n        if (this.disableDropzone) return;\n        openUploadWindow(this.uploadConfig).then(files => {\n            this.emitUploadEvent(files);\n        });\n    }\n\n    public handleDragEnter(e) {\n        if (this.dropzoneDisabled(e)) return;\n        this.el.nativeElement.classList.add('file-over-dropzone');\n    }\n\n    public handleDragOver(e) {\n        if (e.preventDefault) e.preventDefault();\n        e.dataTransfer.dropEffect = this.dropzoneDisabled(e) ? 'none' : 'move';\n        return false;\n    }\n\n    public handleDragLeave(e: MouseEvent) {\n        const newEl = document.elementFromPoint(e.clientX, e.clientY);\n        if (this.el.nativeElement.contains(newEl)) return;\n        this.removeClassesFromDropzone();\n    }\n\n    public async handleDrop(e) {\n        e.stopPropagation();\n        e.preventDefault();\n        this.removeClassesFromDropzone();\n        if (this.dropzoneDisabled(e) || !e.dataTransfer.items) return;\n\n        const items = Array.from(e.dataTransfer.items)\n            .filter((item: DataTransferItem) => item.kind === 'file')\n            .map((item: DataTransferItem) => {\n                return item.webkitGetAsEntry();\n            });\n\n        if (items.length) {\n            this.emitUploadEvent(await readUploadedFolders(items));\n        }\n    }\n\n    protected emitUploadEvent(files: UploadedFile[]) {\n        this.filesDropped.emit(files);\n    }\n\n    protected removeClassesFromDropzone() {\n        this.el.nativeElement.classList.remove('file-over-dropzone');\n    }\n\n    protected dropzoneDisabled(e: DragEvent) {\n        const hasFiles = e.dataTransfer.types.find(type => type.toLowerCase() === 'files');\n        return this.disableDropzone || ! hasFiles;\n    }\n}\n","<div class=\"media-image-container\" [class.show-album-border]=\"!isTrack(media)\">\n    <media-image [media]=\"media\"></media-image>\n    <img class=\"album-border-image\" [src]=\"settings.getAssetUrl('images/album-border.png')\" alt=\"album border image\">\n</div>\n<div class=\"middle-column\">\n    <div class=\"artist-name\">{{media.artists[0].name}}</div>\n    <div class=\"track-name\">{{media.name}}</div>\n    <div class=\"genre-row\">\n        <mat-chip class=\"track-genre\" *ngIf=\"media.genres.length\">{{media.genres[0].name}}</mat-chip>\n    </div>\n    <div class=\"message\">\n        <span trans>Upload complete.</span> <a [routerLink]=\"mediaLink()\" trans> View now.</a>\n    </div>\n</div>\n<div class=\"right-column\">\n    <div class=\"title\" trans>Share your new {{isTrack(media) ? 'track' : 'album' }}</div>\n    <div class=\"share-icons\">\n        <button mat-icon-button (click)=\"shareUsing('facebook')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/facebook.png')}}\" alt=\"facebook-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('twitter')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/twitter.png')}}\" alt=\"twitter-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('tumblr')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/tumblr.png')}}\" alt=\"tumblr-icon\">\n        </button>\n        <button mat-icon-button (click)=\"shareUsing('blogger')\">\n            <img src=\"{{settings.getAssetUrl('images/social-icons/bloggr.png')}}\" alt=\"blogger-icon\">\n        </button>\n    </div>\n    <div class=\"track-link-input input-container\">\n        <label for=\"media-item-link\" class=\"hidden\" trans>Media link</label>\n        <input #trackLinkInput id=\"media-item-link\" type=\"text\" readonly [value]=\"mediaUrl()\" (click)=\"$event.target.select()\">\n    </div>\n</div>\n","import {Component, OnInit, ChangeDetectionStrategy, Input, ViewChild, ElementRef} from '@angular/core';\nimport {Track, TRACK_MODEL} from '../../models/Track';\nimport {ShareableNetworks, shareLinkSocially} from '@common/core/utils/share-link-socially';\nimport {Settings} from '@common/core/config/settings.service';\nimport {WebPlayerUrls} from '../../web-player/web-player-urls.service';\nimport {Album} from '../../models/Album';\n\n@Component({\n    selector: 'uploaded-media-preview',\n    templateUrl: './uploaded-media-preview.component.html',\n    styleUrls: ['./uploaded-media-preview.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    host: {'class': 'material-panel'},\n})\nexport class UploadedMediaPreviewComponent implements OnInit {\n    @ViewChild('trackLinkInput', {static: true}) trackLinkInput: ElementRef<HTMLInputElement>;\n    @Input() media: Track|Album;\n\n    constructor(\n        public settings: Settings,\n        public urls: WebPlayerUrls\n    ) {}\n\n    ngOnInit() {\n        setTimeout(() => {\n            this.trackLinkInput.nativeElement.focus();\n            this.trackLinkInput.nativeElement.select();\n        });\n    }\n\n    public mediaLink() {\n        if (this.isTrack(this.media)) {\n            return this.urls.track(this.media);\n        } else {\n            return this.urls.album(this.media);\n        }\n    }\n\n    public mediaUrl() {\n        return this.urls.routerLinkToUrl(this.mediaLink());\n    }\n\n    public shareUsing(network: ShareableNetworks) {\n        shareLinkSocially(network, this.mediaUrl());\n    }\n\n    public isTrack(media: Track|Album): media is Track {\n        return media.model_type === TRACK_MODEL;\n    }\n}\n","<div\n    class=\"dropzone\"\n    [fileDropzone]=\"uploadConfig\"\n    [clickButton]=\"clickButton\"\n    (filesDropped)=\"uploadTracks($event)\"\n>\n    <div class=\"title\" trans>Drag and drop your tracks, videos & albums here.</div>\n    <div class=\"action-button\">\n        <button\n            mat-flat-button\n            color=\"accent\"\n            type=\"button\"\n            class=\"upload-button\"\n            #clickMatButton\n            trans\n        >\n            or choose files to upload\n        </button>\n    </div>\n    <div class=\"setting-toggle-container\" *ngIf=\"uploadQueue.isEmpty()\">\n        <mat-slide-toggle (change)=\"createAlbum$.next($event.checked)\" trans\n            >Make an album when multiple files are selected</mat-slide-toggle\n        >\n    </div>\n</div>\n\n<div\n    class=\"minutes-container\"\n    *ngIf=\"currentUser.getRestrictionValue('tracks.create', 'minutes') as minuteLimit\"\n>\n    <span\n        >You have {{ minuteLimit }} minutes left. Try\n        <a class=\"hover-underline\" routerLink=\"/billing/upgrade\" target=\"_blank\">Pro accounts</a> to\n        get more time and access to advanced features.</span\n    >\n</div>\n\n<div class=\"track-upload-queue\" *ngIf=\"uploadQueue.uploads$ | async as uploads\">\n    <ng-container *ngIf=\"uploads.length\">\n        <album-form\n            class=\"material-panel\"\n            *ngIf=\"createAlbum$ | async; else createTracks\"\n            (saved)=\"addSavedMedia($event)\"\n        ></album-form>\n        <ng-template #createTracks>\n            <ng-container *ngIf=\"errors$ | async as errors\">\n                <div\n                    class=\"track-panel material-panel\"\n                    *ngFor=\"let upload of uploads; trackBy: trackByFn\"\n                >\n                    <track-form\n                        [uploadQueueItem]=\"upload\"\n                        (saved)=\"addSavedMedia($event)\"\n                    ></track-form>\n                </div>\n            </ng-container>\n        </ng-template>\n    </ng-container>\n</div>\n\n<div class=\"saved-tracks\">\n    <uploaded-media-preview\n        [media]=\"media\"\n        *ngFor=\"let media of savedMedia$ | async\"\n    ></uploaded-media-preview>\n</div>\n","import {RouterModule, Routes} from '@angular/router';\nimport {NgModule} from '@angular/core';\nimport {BackstageRequestFormComponent} from './requests/backstage-request-form/backstage-request-form.component';\nimport {BackstageRequestSubmittedComponent} from './requests/backstage-request-submitted/backstage-request-submitted.component';\nimport {BackstageTypeSelectorComponent} from './requests/backstage-type-selector/backstage-type-selector.component';\nimport {CrupdateArtistPageComponent} from './editing/crupdate-artist-page/crupdate-artist-page.component';\nimport {EditArtistPageResolver} from './editing/crupdate-artist-page/crupdate-artist-page-resolver.service';\nimport {CrupdateAlbumPageComponent} from './editing/crupdate-album-page/crupdate-album-page.component';\nimport {PendingChangesGuard} from '@common/guards/pending-changes/pending-changes-guard.service';\nimport {CrupdateTrackPageComponent} from './editing/crupdate-track-page/crupdate-track-page.component';\nimport {TrackPageResolver} from '../web-player/tracks/track-page/track-page-resolver.service';\nimport {UploadPageComponent} from '../uploading/upload-page/upload-page.component';\nimport {CrupdateAlbumPageResolverService} from './editing/crupdate-album-page/crupdate-album-page-resolver.service';\n\nconst routes: Routes = [\n    {\n        path: '',\n        redirectTo: '/',\n        pathMatch: 'full',\n    },\n    {\n        path: 'requests',\n        component: BackstageTypeSelectorComponent,\n    },\n    {\n        path: 'requests/verify-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/become-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/claim-artist',\n        component: BackstageRequestFormComponent,\n    },\n    {\n        path: 'requests/:requestId/request-submitted',\n        component: BackstageRequestSubmittedComponent,\n    },\n\n    //\n    {\n        path: 'upload',\n        component: UploadPageComponent,\n    },\n    {\n        path: 'artists/new',\n        component: CrupdateArtistPageComponent,\n    },\n    {\n        path: 'artists/:id/edit',\n        component: CrupdateArtistPageComponent,\n        resolve: {api: EditArtistPageResolver},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'albums/:id/edit',\n        component: CrupdateAlbumPageComponent,\n        resolve: {api: CrupdateAlbumPageResolverService},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'albums/new',\n        component: CrupdateAlbumPageComponent,\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'tracks/:id/edit',\n        component: CrupdateTrackPageComponent,\n        resolve: {api: TrackPageResolver},\n        canDeactivate: [PendingChangesGuard],\n    },\n    {\n        path: 'tracks/new',\n        component: CrupdateTrackPageComponent,\n        canDeactivate: [PendingChangesGuard],\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class BackstageRoutingModule {\n}\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    ElementRef,\n    QueryList,\n    ViewChild,\n    ViewChildren,\n} from '@angular/core';\nimport {Tracks} from '../../web-player/tracks/tracks.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {UploadedFile} from '@common/uploads/uploaded-file';\nimport {UploadQueueService} from '@common/uploads/upload-queue/upload-queue.service';\nimport {Settings} from '@common/core/config/settings.service';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {AudioUploadValidator} from '../../web-player/audio-upload-validator';\nimport {BehaviorSubject} from 'rxjs';\nimport {UploadQueueItem} from '@common/uploads/upload-queue/upload-queue-item';\nimport {\n    UploadInputConfig,\n    UploadInputTypes,\n} from '@common/uploads/upload-input-config';\nimport {Track} from '../../models/Track';\nimport {\n    TrackFormComponent,\n    TrackUploadResponse,\n} from '../track-form/track-form.component';\nimport {Album} from '../../models/Album';\nimport {WaveformGenerator} from '../../web-player/tracks/waveform/waveform-generator';\nimport {UploadApiConfig} from '@common/uploads/types/upload-api-config';\nimport {AlbumFormComponent} from '../album-form/album-form.component';\n\n@Component({\n    selector: 'upload-page',\n    templateUrl: './upload-page.component.html',\n    styleUrls: ['./upload-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [UploadQueueService],\n})\nexport class UploadPageComponent {\n    @ViewChild('clickMatButton', {read: ElementRef, static: true})\n    clickButton: ElementRef<HTMLButtonElement>;\n    @ViewChildren(TrackFormComponent) trackForms: QueryList<TrackFormComponent>;\n    @ViewChild(AlbumFormComponent) albumForm: AlbumFormComponent;\n    errors$ = new BehaviorSubject<{\n        [key: string]: {[K in keyof Partial<Track>]: string};\n    }>({});\n    uploadConfig: UploadInputConfig = {\n        types: [UploadInputTypes.video, UploadInputTypes.audio],\n        multiple: true,\n    };\n    savedMedia$ = new BehaviorSubject<(Track | Album)[]>([]);\n    createAlbum$ = new BehaviorSubject<boolean>(false);\n\n    constructor(\n        private track: Tracks,\n        public currentUser: CurrentUser,\n        public uploadQueue: UploadQueueService,\n        public settings: Settings,\n        protected tracks: Tracks,\n        private toast: Toast,\n        private audioValidator: AudioUploadValidator,\n        private waveGenerator: WaveformGenerator\n    ) {}\n\n    uploadTracks(files: UploadedFile[]) {\n        const params = {\n            uri: 'uploads',\n            httpParams: {\n                diskPrefix: 'track_media',\n                disk: 'public',\n            },\n            validator: this.audioValidator,\n            willProcessFiles: true,\n            autoMatchAlbum: !this.createAlbum$.value,\n        } as UploadApiConfig;\n        this.uploadQueue\n            .start(files, params)\n            .subscribe((response: TrackUploadResponse) => {\n                const queueItem = this.uploadQueue.find(response.queueItemId);\n                this.waveGenerator\n                    .generate(queueItem.uploadedFile.native)\n                    .then(waveData => {\n                        queueItem.customData = {waveData};\n                        queueItem.finishProcessing();\n                    });\n\n                if (\n                    this.albumForm &&\n                    !this.albumForm.form.get('name').value &&\n                    response.metadata.album_name\n                ) {\n                    this.albumForm.form.patchValue({\n                        name: response.metadata.album_name,\n                    });\n                }\n            });\n    }\n\n    addSavedMedia(newMedia: Track | Album) {\n        this.savedMedia$.next([...this.savedMedia$.value, newMedia]);\n    }\n\n    trackByFn = (i: number, upload: UploadQueueItem) => upload.id;\n}\n","import {Injectable} from '@angular/core';\nimport {\n    ActivatedRouteSnapshot,\n    Resolve,\n    Router,\n    RouterStateSnapshot\n} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, of} from 'rxjs';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {Albums} from '../../../web-player/albums/albums.service';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class CrupdateAlbumPageResolverService implements Resolve<any> {\n\n    constructor(\n        private albums: Albums,\n        private router: Router\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): BackendResponse<any> {\n        const params = {\n            with: ['tags', 'genres', 'artists', 'fullTracks'],\n            albumsPerPage: 50,\n            forEditing: true,\n        };\n        const id = +route.paramMap.get('id');\n        return this.albums.get(id, params).pipe(\n            catchError(() => {\n                this.router.navigate(['/']);\n                return EMPTY;\n            }),\n            mergeMap(response => {\n                if (response.album) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {SelectArtistControlComponent} from './select-artist-control.component';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MediaImageModule} from '../../web-player/shared/media-image/media-image.module';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatIconModule} from '@angular/material/icon';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatButtonModule} from '@angular/material/button';\n\n\n@NgModule({\n    declarations: [\n        SelectArtistControlComponent,\n    ],\n    exports: [\n        SelectArtistControlComponent,\n    ],\n    imports: [\n        CommonModule,\n\n        MatMenuModule,\n        MediaImageModule,\n        TranslationsModule,\n        FormsModule,\n        ReactiveFormsModule,\n        MatIconModule,\n        LoadingIndicatorModule,\n        MatButtonModule,\n    ]\n})\nexport class SelectArtistControlModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {UploadPageComponent} from './upload-page/upload-page.component';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {TrackFormComponent} from './track-form/track-form.component';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {AlbumFormComponent} from './album-form/album-form.component';\nimport {DragDropModule} from '@angular/cdk/drag-drop';\nimport {TrackUploadHeaderComponent} from './track-upload-header/track-upload-header.component';\nimport {TrackArtistControlComponent} from './track-form/track-artist-control/track-artist-control.component';\nimport {AlbumControlComponent} from './track-form/album-control/album-control.component';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {RouterModule} from '@angular/router';\nimport {UploadedMediaPreviewComponent} from './uploaded-media-preview/uploaded-media-preview.component';\nimport {UploadingHostComponent} from './uploading-host/uploading-host.component';\nimport {ChipsModule} from '@common/core/ui/chips/chips.module';\nimport {SelectArtistControlModule} from '../shared/select-artist-control/select-artist-control.module';\nimport {ArtistsLinksListModule} from '../web-player/artists/artists-links-list/artists-links-list.module';\n\n@NgModule({\n    declarations: [\n        UploadPageComponent,\n        TrackFormComponent,\n        AlbumFormComponent,\n        TrackUploadHeaderComponent,\n        TrackArtistControlComponent,\n        AlbumControlComponent,\n        UploadedMediaPreviewComponent,\n        UploadingHostComponent,\n    ],\n    imports: [\n        CommonModule,\n        RouterModule,\n        MediaImageModule,\n        SelectArtistControlModule,\n\n        MatIconModule,\n        MatProgressBarModule,\n        TranslationsModule,\n        UploadsModule,\n        ReactiveFormsModule,\n        FormsModule,\n        MatButtonModule,\n        ChipsModule,\n        MatChipsModule,\n        MatSlideToggleModule,\n        MatTooltipModule,\n        UploadImageControlModule,\n        DragDropModule,\n        MatAutocompleteModule,\n        MatMenuModule,\n        LoadingIndicatorModule,\n        ArtistsLinksListModule,\n    ],\n    exports: [\n        TrackFormComponent,\n        AlbumFormComponent,\n    ]\n})\nexport class UploadingModule {\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {BackstageRoutingModule} from './backstage-routing.module';\nimport {MaterialNavbarModule} from '@common/core/ui/material-navbar/material-navbar.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {UploadImageControlModule} from '@common/shared/form-controls/upload-image-control/upload-image-control.module';\nimport {BackstageRequestFormComponent} from './requests/backstage-request-form/backstage-request-form.component';\nimport {BackstageRequestSubmittedComponent} from './requests/backstage-request-submitted/backstage-request-submitted.component';\nimport {BackstageTypeSelectorComponent} from './requests/backstage-type-selector/backstage-type-selector.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {UploadsModule} from '@common/uploads/uploads.module';\nimport {FormatPipesModule} from '@common/core/ui/format-pipes/format-pipes.module';\nimport {SelectArtistControlModule} from '../shared/select-artist-control/select-artist-control.module';\nimport {CrupdateArtistPageComponent} from './editing/crupdate-artist-page/crupdate-artist-page.component';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {ChipsModule} from '@common/core/ui/chips/chips.module';\nimport {ArtistAlbumsTableComponent} from './editing/crupdate-artist-page/artist-albums-table/artist-albums-table.component';\nimport {DatatableModule} from '@common/datatable/datatable.module';\nimport {MediaImageModule} from '../web-player/shared/media-image/media-image.module';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {ProfileLinksFormControlModule} from '../web-player/shared/profile-links-form-control/profile-links-form-control.module';\nimport {CrupdateTrackPageComponent} from './editing/crupdate-track-page/crupdate-track-page.component';\nimport {CrupdateAlbumPageComponent} from './editing/crupdate-album-page/crupdate-album-page.component';\nimport {UploadingModule} from '../uploading/uploading.module';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {LoadingIndicatorModule} from '@common/core/ui/loading-indicator/loading-indicator.module';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\n\n@NgModule({\n    declarations: [\n        BackstageRequestFormComponent,\n        BackstageRequestSubmittedComponent,\n        BackstageTypeSelectorComponent,\n\n        //\n        CrupdateArtistPageComponent,\n        ArtistAlbumsTableComponent,\n        CrupdateAlbumPageComponent,\n        CrupdateTrackPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        BackstageRoutingModule,\n        UploadingModule,\n        ReactiveFormsModule,\n        FormsModule,\n        SelectArtistControlModule,\n        TranslationsModule,\n        MaterialNavbarModule,\n        MatButtonModule,\n        MatIconModule,\n        MatSlideToggleModule,\n        UploadsModule,\n        UploadImageControlModule,\n        FormatPipesModule,\n        ProfileLinksFormControlModule,\n        LoadingIndicatorModule,\n\n        //\n        MatDialogModule,\n        MatTabsModule,\n        ChipsModule,\n        DatatableModule,\n        MediaImageModule,\n        MatTooltipModule,\n    ]\n})\nexport class BackstageModule {\n}\n"]}