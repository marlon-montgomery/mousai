{"version":3,"mappings":"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","names":["i","b","constructor","n","getAll","this","http","get","updateUserSubscriptions","o","put","selections","t","factory","Éµfac","P","U","e","r","l","u","v","window","c","ngOnInit","route","data","subscribe","groupedNotifications","api","subscriptions","availableChannels","available_channels","initialUserSelections","user_selections","forEach","addNotifFormField","notif_id","find","m","channels","f","value","disabled","supportsBrowserNotifications","Notification","permission","valueChanges","pipe","_","toast","open","setValue","emitEvent","cd","markForCheck","requestPermission","then","q","addControl","form","toggleAllRowsFor","allRowsSelectedFor","Object","values","controls","markAsDirty","every","someRowsSelectedFor","some","saveSettings","loading$","next","getPayload","currentUser","F","markAsPristine","entries","filter","dirty","map","_ref4","selectors","R","resolve","Y","router","navigate","O","$","Q","E","numberOfPages","last_page","iterator","Array","from","keys","currentPage","current_page","selectPage","pageChanged","queryParams","page","replaceUrl","nextPage","prevPage","G","path","component","loadPage","snapshot","notifications","load","perPage","pagination$","pagination","markAsRead","id","read_at","permissions","L","d","V","g","p","y","D","H","I","X","Z"],"sources":["webpack:///src/common/notifications/notification-subscriptions/notification-subscriptions.service.ts","webpack:///src/common/notifications/notification-subscriptions/notification-subscriptions.component.html","webpack:///src/common/notifications/notification-subscriptions/notification-subscriptions.component.ts","webpack:///src/common/notifications/notification-subscriptions/notification-subscriptions-resolver.service.ts","webpack:///src/common/shared/pagination-widget/pagination-widget.component.html","webpack:///src/common/shared/pagination-widget/pagination-widget.component.ts","webpack:///src/common/notifications/notifications-routing.module.ts","webpack:///src/common/notifications/notification-page/notification-page.component.ts","webpack:///src/common/notifications/notification-page/notification-page.component.html","webpack:///src/common/shared/pagination-widget/pagination-widget.module.ts","webpack:///src/common/notifications/notifications.module.ts"],"sourcesContent":["import {Injectable} from '@angular/core';\nimport {AppHttpClient} from '@common/core/http/app-http-client.service';\nimport {BackendResponse} from '@common/core/types/backend-response';\nimport {\n    NotificationSubscriptionGroup,\n    NotificationSubscriptionsResponse\n} from '@common/notifications/notification-subscriptions/notification-subscription';\n\nexport type UpdateNotificationSubscriptionsPayload = {\n    notif_id: string;\n    channels: {[key: string]: boolean};\n}[];\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationSubscriptionsService {\n    constructor(private http: AppHttpClient) {}\n\n    public getAll(userId: number): BackendResponse<NotificationSubscriptionsResponse> {\n        return this.http.get(`notifications/${userId}/subscriptions`);\n    }\n\n    public updateUserSubscriptions(userId: number, selections: UpdateNotificationSubscriptionsPayload): BackendResponse<void> {\n        return this.http.put(`notifications/${userId}/subscriptions`, {selections});\n    }\n}\n","<material-navbar\n  [menuPosition]=\"settings.get('vebto.navbar.defaultPosition')\"\n  class=\"box-shadow\"\n></material-navbar>\n\n<div class=\"be-container\">\n  <form class=\"table material-panel\" (ngSubmit)=\"saveSettings()\">\n    <div class=\"setting-group\" *ngFor=\"let group of groupedNotifications; let first = first\">\n      <div class=\"row\">\n        <div class=\"name-column strong\" trans>{{ group.group_name }}</div>\n        <ng-container *ngIf=\"first\">\n          <div class=\"channel-column\" *ngFor=\"let channelName of availableChannels\">\n            <div class=\"channel-name\" trans>{{ channelName }}</div>\n            <mat-checkbox\n              (change)=\"$event ? toggleAllRowsFor(channelName) : null\"\n              [checked]=\"allRowsSelectedFor(channelName)\"\n              [indeterminate]=\"someRowsSelectedFor(channelName) && !allRowsSelectedFor(channelName)\"\n              [disabled]=\"channelName === 'browser' && !supportsBrowserNotifications\"\n            >\n            </mat-checkbox>\n          </div>\n        </ng-container>\n      </div>\n      <div [formGroup]=\"form\">\n        <div\n          class=\"row indent\"\n          *ngFor=\"let subscription of group.subscriptions; let last = last\"\n          [class.no-border]=\"last\"\n          [formGroupName]=\"subscription.notif_id\"\n        >\n          <div class=\"name-column\" trans>{{ subscription.name }}</div>\n          <div class=\"channel-column\" *ngFor=\"let channelName of availableChannels\">\n            <mat-checkbox [formControlName]=\"channelName\"></mat-checkbox>\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <button\n      mat-raised-button\n      color=\"accent\"\n      class=\"submit-button\"\n      [disabled]=\"loading$ | async\"\n      trans\n    >\n      Save Settings\n    </button>\n  </form>\n</div>\n","import {\n    ChangeDetectionStrategy,\n    ChangeDetectorRef,\n    Component,\n    OnInit,\n} from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\nimport {\n    NotificationSubscription,\n    NotificationSubscriptionGroup,\n    NotificationSubscriptionsResponse,\n} from '@common/notifications/notification-subscriptions/notification-subscription';\nimport {\n    NotificationSubscriptionsService,\n    UpdateNotificationSubscriptionsPayload,\n} from '@common/notifications/notification-subscriptions/notification-subscriptions.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {Toast} from '@common/core/ui/toast.service';\nimport {BehaviorSubject} from 'rxjs';\nimport {filter, finalize} from 'rxjs/operators';\nimport {Settings} from '@common/core/config/settings.service';\nimport {FormControl, FormGroup} from '@angular/forms';\n\n@Component({\n    selector: 'notification-subscriptions',\n    templateUrl: './notification-subscriptions.component.html',\n    styleUrls: ['./notification-subscriptions.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class NotificationSubscriptionsComponent implements OnInit {\n    private initialUserSelections: NotificationSubscription[];\n    groupedNotifications: NotificationSubscriptionGroup[];\n    availableChannels: string[] = [];\n    loading$ = new BehaviorSubject<boolean>(false);\n    supportsBrowserNotifications = ('Notification' in window);\n    form = new FormGroup({});\n\n    constructor(\n        private route: ActivatedRoute,\n        private api: NotificationSubscriptionsService,\n        private currentUser: CurrentUser,\n        private toast: Toast,\n        private cd: ChangeDetectorRef,\n        public settings: Settings\n    ) {}\n\n    ngOnInit() {\n        this.route.data.subscribe((data: {api: NotificationSubscriptionsResponse}) => {\n            this.groupedNotifications = data.api.subscriptions;\n            this.availableChannels = data.api.available_channels;\n            this.initialUserSelections = data.api.user_selections;\n            this.groupedNotifications.forEach(group => {\n                group.subscriptions.forEach(s => this.addNotifFormField(s.notif_id));\n            });\n        });\n    }\n\n    public addNotifFormField(notifId: string) {\n        const channelGroup = new FormGroup({});\n        this.availableChannels.forEach(channel => {\n            const initial = this.initialUserSelections.find(s => s.notif_id === notifId)\n                ?.channels[channel];\n            const disabled = channel === 'browser' && !this.supportsBrowserNotifications;\n            const control = new FormControl({value: initial ?? false, disabled});\n            if (channel === 'browser' && Notification.permission !== 'granted') {\n                control.valueChanges.pipe(filter(isChecked => isChecked)).subscribe(_ => {\n                    if (Notification.permission === 'denied') {\n                        this.toast.open(\n                            'Notifications blocked. Please enable them for this site from browser settings.'\n                        );\n                        control.setValue(false, {emitEvent: false});\n                        this.cd.markForCheck();\n                    } else {\n                        Notification.requestPermission().then(permission => {\n                            if (permission !== 'granted') {\n                                control.setValue(false, {emitEvent: false});\n                                this.cd.markForCheck();\n                            }\n                        });\n                    }\n                });\n            }\n            channelGroup.addControl(channel, control);\n        });\n        this.form.addControl(notifId, channelGroup);\n    }\n\n    public toggleAllRowsFor(channelName: string) {\n        const newValue = !this.allRowsSelectedFor(channelName);\n        Object.values(this.form.controls).forEach(c => {\n            (c as FormGroup).controls[channelName].setValue(newValue);\n            (c as FormGroup).controls[channelName].markAsDirty();\n        });\n    }\n\n    public allRowsSelectedFor(channelName: string): boolean {\n        return Object.values(this.form.controls).every(control => {\n            return (control as FormGroup).controls[channelName].value === true;\n        });\n    }\n\n    public someRowsSelectedFor(channelName: string): boolean {\n        return Object.values(this.form.controls).some(control => {\n            return (control as FormGroup).controls[channelName].value === true;\n        });\n    }\n\n    public saveSettings() {\n        this.loading$.next(true);\n        const payload = this.getPayload();\n        this.api\n            .updateUserSubscriptions(this.currentUser.get('id'), payload)\n            .pipe(finalize(() => this.loading$.next(false)))\n            .subscribe(() => {\n                this.form.markAsPristine();\n                this.toast.open('Notification settings updated.');\n            });\n    }\n\n    private getPayload(): UpdateNotificationSubscriptionsPayload {\n        return Object.entries(this.form.controls)\n            .filter(([_, control]) => control.dirty)\n            .map(([notifId, control]) => {\n                return {notif_id: notifId, channels: control.value};\n            });\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {ActivatedRouteSnapshot, Resolve, Router, RouterStateSnapshot} from '@angular/router';\nimport {catchError, mergeMap} from 'rxjs/operators';\nimport {EMPTY, Observable, of} from 'rxjs';\nimport {NotificationSubscriptionsService} from '@common/notifications/notification-subscriptions/notification-subscriptions.service';\nimport {CurrentUser} from '@common/auth/current-user';\nimport {NotificationSubscriptionsResponse} from '@common/notifications/notification-subscriptions/notification-subscription';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class NotificationSubscriptionsResolverService implements Resolve<Observable<NotificationSubscriptionsResponse>> {\n    constructor(\n        private router: Router,\n        private subscriptions: NotificationSubscriptionsService,\n        private currentUser: CurrentUser,\n    ) {}\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<NotificationSubscriptionsResponse> {\n        return this.subscriptions.getAll(+this.currentUser.get('id')).pipe(\n            catchError(() => {\n                this.router.navigate(['/account/settings']);\n                return EMPTY; //\n            }),\n            mergeMap(response => {\n                if (response) {\n                    return of(response);\n                } else {\n                    this.router.navigate(['/account/settings']);\n                    return EMPTY;\n                }\n            })\n        );\n    }\n}\n","<ul class=\"page-numbers unstyled-list\">\n    <li>\n        <button type=\"button\" class=\"prev\" [disabled]=\"disabled\" (click)=\"prevPage()\" mat-button trans>Previous</button>\n    </li>\n    <li *ngFor=\"let page of iterator\">\n        <button type=\"button\" class=\"page-number-button\" [disabled]=\"disabled\" [class.active]=\"currentPage === page\" (click)=\"selectPage(page)\" mat-flat-button color=\"gray\">{{page}}</button>\n    </li>\n    <li>\n        <button type=\"button\" class=\"next\" [disabled]=\"disabled\" (click)=\"nextPage()\" mat-button trans>Next</button>\n    </li>\n</ul>\n","import {ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output} from '@angular/core';\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\nimport {Router} from '@angular/router';\n\n@Component({\n    selector: 'pagination-widget',\n    templateUrl: './pagination-widget.component.html',\n    styleUrls: ['./pagination-widget.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class PaginationWidgetComponent {\n    private numberOfPages: number;\n    public iterator: number[];\n    public currentPage: number;\n\n    @HostBinding('class.hidden') get shouldHide() {\n        return this.numberOfPages < 2;\n    }\n\n    @Output() pageChanged = new EventEmitter<number>();\n\n    @Input() disabled = true;\n    @Input() set pagination(value: PaginationResponse<any>) {\n        if (value) {\n            this.numberOfPages = value.last_page > 10 ? 10 : value.last_page;\n            if (this.numberOfPages > 1) {\n                this.iterator = Array.from(Array(this.numberOfPages).keys()).map(n => n + 1);\n                this.currentPage = value.current_page;\n            }\n        }\n    }\n\n    constructor(private router: Router) {}\n\n    public selectPage(page: number) {\n        if (this.currentPage !== page) {\n            this.currentPage = page;\n            this.pageChanged.next(page);\n            this.router.navigate([], {queryParams: {page}, replaceUrl: true});\n        }\n    }\n\n    public nextPage() {\n        const newPage = this.currentPage + 1;\n        this.selectPage(newPage <= this.numberOfPages ? newPage : this.currentPage);\n    }\n\n    public prevPage() {\n        const newPage = this.currentPage - 1;\n        this.selectPage(newPage >= 1 ? newPage : this.currentPage);\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {NotificationSubscriptionsComponent} from './notification-subscriptions/notification-subscriptions.component';\nimport {NotificationSubscriptionsResolverService} from './notification-subscriptions/notification-subscriptions-resolver.service';\nimport {NotificationPageComponent} from '@common/notifications/notification-page/notification-page.component';\n\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: NotificationPageComponent,\n    },\n    {\n        path: 'settings',\n        component: NotificationSubscriptionsComponent,\n        resolve: {api: NotificationSubscriptionsResolverService},\n        data: {permissions: ['notification.subscribe']},\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class NotificationsRoutingModule {\n}\n","import {Component, OnInit, ChangeDetectionStrategy} from '@angular/core';\nimport {Settings} from '@common/core/config/settings.service';\nimport {NotificationService} from '@common/notifications/notification-list/notification.service';\nimport {BreakpointsService} from '@common/core/ui/breakpoints.service';\nimport {ActivatedRoute} from '@angular/router';\nimport {BehaviorSubject} from 'rxjs';\nimport {PaginationResponse} from '@common/core/types/pagination/pagination-response';\nimport {DatabaseNotification} from '@common/notifications/database-notification';\n\n@Component({\n    selector: 'notification-page',\n    templateUrl: './notification-page.component.html',\n    styleUrls: ['./notification-page.component.scss'],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NotificationPageComponent implements OnInit {\n    public pagination$ = new BehaviorSubject<PaginationResponse<DatabaseNotification>>(null);\n\n    constructor(\n        public settings: Settings,\n        public notifications: NotificationService,\n        public breakpoints: BreakpointsService,\n        private route: ActivatedRoute,\n    ) {}\n\n    ngOnInit() {\n        this.loadPage(this.route.snapshot.queryParams.page || 1);\n    }\n\n    public loadPage(page: number) {\n        this.notifications.load({page, perPage: 25})\n            .subscribe(response => {\n                this.pagination$.next(response.pagination);\n            });\n    }\n\n    public markAsRead(markedNotif: DatabaseNotification) {\n        const notification = this.pagination$.value.data.find(n => n.id === markedNotif.id);\n        notification.read_at = markedNotif.read_at;\n    }\n}\n","<material-navbar [menuPosition]=\"settings.get('vebto.navbar.defaultPosition')\"></material-navbar>\n<div class=\"be-container\">\n    <notification-list [notifications]=\"(pagination$ | async)?.data\" [compact]=\"breakpoints.isMobile$ | async\" (markedAsRead)=\"markAsRead($event)\"></notification-list>\n    <pagination-widget [pagination]=\"pagination$ | async\" [disabled]=\"notifications.loading$ | async\" (pageChanged)=\"loadPage($event)\"></pagination-widget>\n</div>\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {PaginationWidgetComponent} from '@common/shared/pagination-widget/pagination-widget.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport {TranslationsModule} from '@common/core/translations/translations.module';\n\n\n@NgModule({\n    declarations: [\n        PaginationWidgetComponent,\n    ],\n    imports: [\n        CommonModule,\n        MatButtonModule,\n        TranslationsModule,\n    ],\n    exports: [\n        PaginationWidgetComponent,\n    ]\n})\nexport class PaginationWidgetModule {\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { NotificationsRoutingModule } from './notifications-routing.module';\nimport { NotificationSubscriptionsComponent } from './notification-subscriptions/notification-subscriptions.component';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { ImageOrIconModule } from '@common/core/ui/image-or-icon/image-or-icon.module';\nimport { NotificationListModule } from '@common/notifications/notification-list/notification-list.module';\nimport { MaterialNavbarModule } from '@common/core/ui/material-navbar/material-navbar.module';\nimport { NotificationPageComponent } from './notification-page/notification-page.component';\nimport {PaginationWidgetModule} from '@common/shared/pagination-widget/pagination-widget.module';\nimport {MatButtonModule} from '@angular/material/button';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport { TranslationsModule } from '../core/translations/translations.module';\n\n\n@NgModule({\n    declarations: [\n        NotificationSubscriptionsComponent,\n        NotificationPageComponent,\n    ],\n    imports: [\n        CommonModule,\n        FormsModule,\n        ReactiveFormsModule,\n        NotificationsRoutingModule,\n        MaterialNavbarModule,\n        ImageOrIconModule,\n        NotificationListModule,\n        PaginationWidgetModule,\n        TranslationsModule,\n\n        // material\n        MatCheckboxModule,\n        MatButtonModule,\n    ]\n})\nexport class NotificationsModule {\n}\n"]}